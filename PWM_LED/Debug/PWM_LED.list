
PWM_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048cc  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  0800498c  0800498c  0000598c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049f8  080049f8  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080049f8  080049f8  000059f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a00  08004a00  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a00  08004a00  00005a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004a04  08004a04  00005a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004a08  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  2000000c  08004a14  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b0  08004a14  000061b0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000110fc  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000258c  00000000  00000000  00017130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001010  00000000  00000000  000196c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c8b  00000000  00000000  0001a6d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001582b  00000000  00000000  0001b35b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012ce4  00000000  00000000  00030b86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088ee7  00000000  00000000  0004386a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cc751  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a3c  00000000  00000000  000cc794  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000d01d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004974 	.word	0x08004974

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08004974 	.word	0x08004974

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	@ (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	@ (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__udivmoddi4>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	4657      	mov	r7, sl
 8000264:	464e      	mov	r6, r9
 8000266:	4645      	mov	r5, r8
 8000268:	46de      	mov	lr, fp
 800026a:	b5e0      	push	{r5, r6, r7, lr}
 800026c:	0004      	movs	r4, r0
 800026e:	000d      	movs	r5, r1
 8000270:	4692      	mov	sl, r2
 8000272:	4699      	mov	r9, r3
 8000274:	b083      	sub	sp, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d830      	bhi.n	80002dc <__udivmoddi4+0x7c>
 800027a:	d02d      	beq.n	80002d8 <__udivmoddi4+0x78>
 800027c:	4649      	mov	r1, r9
 800027e:	4650      	mov	r0, sl
 8000280:	f000 f8ba 	bl	80003f8 <__clzdi2>
 8000284:	0029      	movs	r1, r5
 8000286:	0006      	movs	r6, r0
 8000288:	0020      	movs	r0, r4
 800028a:	f000 f8b5 	bl	80003f8 <__clzdi2>
 800028e:	1a33      	subs	r3, r6, r0
 8000290:	4698      	mov	r8, r3
 8000292:	3b20      	subs	r3, #32
 8000294:	d434      	bmi.n	8000300 <__udivmoddi4+0xa0>
 8000296:	469b      	mov	fp, r3
 8000298:	4653      	mov	r3, sl
 800029a:	465a      	mov	r2, fp
 800029c:	4093      	lsls	r3, r2
 800029e:	4642      	mov	r2, r8
 80002a0:	001f      	movs	r7, r3
 80002a2:	4653      	mov	r3, sl
 80002a4:	4093      	lsls	r3, r2
 80002a6:	001e      	movs	r6, r3
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d83b      	bhi.n	8000324 <__udivmoddi4+0xc4>
 80002ac:	42af      	cmp	r7, r5
 80002ae:	d100      	bne.n	80002b2 <__udivmoddi4+0x52>
 80002b0:	e079      	b.n	80003a6 <__udivmoddi4+0x146>
 80002b2:	465b      	mov	r3, fp
 80002b4:	1ba4      	subs	r4, r4, r6
 80002b6:	41bd      	sbcs	r5, r7
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	da00      	bge.n	80002be <__udivmoddi4+0x5e>
 80002bc:	e076      	b.n	80003ac <__udivmoddi4+0x14c>
 80002be:	2200      	movs	r2, #0
 80002c0:	2300      	movs	r3, #0
 80002c2:	9200      	str	r2, [sp, #0]
 80002c4:	9301      	str	r3, [sp, #4]
 80002c6:	2301      	movs	r3, #1
 80002c8:	465a      	mov	r2, fp
 80002ca:	4093      	lsls	r3, r2
 80002cc:	9301      	str	r3, [sp, #4]
 80002ce:	2301      	movs	r3, #1
 80002d0:	4642      	mov	r2, r8
 80002d2:	4093      	lsls	r3, r2
 80002d4:	9300      	str	r3, [sp, #0]
 80002d6:	e029      	b.n	800032c <__udivmoddi4+0xcc>
 80002d8:	4282      	cmp	r2, r0
 80002da:	d9cf      	bls.n	800027c <__udivmoddi4+0x1c>
 80002dc:	2200      	movs	r2, #0
 80002de:	2300      	movs	r3, #0
 80002e0:	9200      	str	r2, [sp, #0]
 80002e2:	9301      	str	r3, [sp, #4]
 80002e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <__udivmoddi4+0x8e>
 80002ea:	601c      	str	r4, [r3, #0]
 80002ec:	605d      	str	r5, [r3, #4]
 80002ee:	9800      	ldr	r0, [sp, #0]
 80002f0:	9901      	ldr	r1, [sp, #4]
 80002f2:	b003      	add	sp, #12
 80002f4:	bcf0      	pop	{r4, r5, r6, r7}
 80002f6:	46bb      	mov	fp, r7
 80002f8:	46b2      	mov	sl, r6
 80002fa:	46a9      	mov	r9, r5
 80002fc:	46a0      	mov	r8, r4
 80002fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000300:	4642      	mov	r2, r8
 8000302:	469b      	mov	fp, r3
 8000304:	2320      	movs	r3, #32
 8000306:	1a9b      	subs	r3, r3, r2
 8000308:	4652      	mov	r2, sl
 800030a:	40da      	lsrs	r2, r3
 800030c:	4641      	mov	r1, r8
 800030e:	0013      	movs	r3, r2
 8000310:	464a      	mov	r2, r9
 8000312:	408a      	lsls	r2, r1
 8000314:	0017      	movs	r7, r2
 8000316:	4642      	mov	r2, r8
 8000318:	431f      	orrs	r7, r3
 800031a:	4653      	mov	r3, sl
 800031c:	4093      	lsls	r3, r2
 800031e:	001e      	movs	r6, r3
 8000320:	42af      	cmp	r7, r5
 8000322:	d9c3      	bls.n	80002ac <__udivmoddi4+0x4c>
 8000324:	2200      	movs	r2, #0
 8000326:	2300      	movs	r3, #0
 8000328:	9200      	str	r2, [sp, #0]
 800032a:	9301      	str	r3, [sp, #4]
 800032c:	4643      	mov	r3, r8
 800032e:	2b00      	cmp	r3, #0
 8000330:	d0d8      	beq.n	80002e4 <__udivmoddi4+0x84>
 8000332:	07fb      	lsls	r3, r7, #31
 8000334:	0872      	lsrs	r2, r6, #1
 8000336:	431a      	orrs	r2, r3
 8000338:	4646      	mov	r6, r8
 800033a:	087b      	lsrs	r3, r7, #1
 800033c:	e00e      	b.n	800035c <__udivmoddi4+0xfc>
 800033e:	42ab      	cmp	r3, r5
 8000340:	d101      	bne.n	8000346 <__udivmoddi4+0xe6>
 8000342:	42a2      	cmp	r2, r4
 8000344:	d80c      	bhi.n	8000360 <__udivmoddi4+0x100>
 8000346:	1aa4      	subs	r4, r4, r2
 8000348:	419d      	sbcs	r5, r3
 800034a:	2001      	movs	r0, #1
 800034c:	1924      	adds	r4, r4, r4
 800034e:	416d      	adcs	r5, r5
 8000350:	2100      	movs	r1, #0
 8000352:	3e01      	subs	r6, #1
 8000354:	1824      	adds	r4, r4, r0
 8000356:	414d      	adcs	r5, r1
 8000358:	2e00      	cmp	r6, #0
 800035a:	d006      	beq.n	800036a <__udivmoddi4+0x10a>
 800035c:	42ab      	cmp	r3, r5
 800035e:	d9ee      	bls.n	800033e <__udivmoddi4+0xde>
 8000360:	3e01      	subs	r6, #1
 8000362:	1924      	adds	r4, r4, r4
 8000364:	416d      	adcs	r5, r5
 8000366:	2e00      	cmp	r6, #0
 8000368:	d1f8      	bne.n	800035c <__udivmoddi4+0xfc>
 800036a:	9800      	ldr	r0, [sp, #0]
 800036c:	9901      	ldr	r1, [sp, #4]
 800036e:	465b      	mov	r3, fp
 8000370:	1900      	adds	r0, r0, r4
 8000372:	4169      	adcs	r1, r5
 8000374:	2b00      	cmp	r3, #0
 8000376:	db24      	blt.n	80003c2 <__udivmoddi4+0x162>
 8000378:	002b      	movs	r3, r5
 800037a:	465a      	mov	r2, fp
 800037c:	4644      	mov	r4, r8
 800037e:	40d3      	lsrs	r3, r2
 8000380:	002a      	movs	r2, r5
 8000382:	40e2      	lsrs	r2, r4
 8000384:	001c      	movs	r4, r3
 8000386:	465b      	mov	r3, fp
 8000388:	0015      	movs	r5, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	db2a      	blt.n	80003e4 <__udivmoddi4+0x184>
 800038e:	0026      	movs	r6, r4
 8000390:	409e      	lsls	r6, r3
 8000392:	0033      	movs	r3, r6
 8000394:	0026      	movs	r6, r4
 8000396:	4647      	mov	r7, r8
 8000398:	40be      	lsls	r6, r7
 800039a:	0032      	movs	r2, r6
 800039c:	1a80      	subs	r0, r0, r2
 800039e:	4199      	sbcs	r1, r3
 80003a0:	9000      	str	r0, [sp, #0]
 80003a2:	9101      	str	r1, [sp, #4]
 80003a4:	e79e      	b.n	80002e4 <__udivmoddi4+0x84>
 80003a6:	42a3      	cmp	r3, r4
 80003a8:	d8bc      	bhi.n	8000324 <__udivmoddi4+0xc4>
 80003aa:	e782      	b.n	80002b2 <__udivmoddi4+0x52>
 80003ac:	4642      	mov	r2, r8
 80003ae:	2320      	movs	r3, #32
 80003b0:	2100      	movs	r1, #0
 80003b2:	1a9b      	subs	r3, r3, r2
 80003b4:	2200      	movs	r2, #0
 80003b6:	9100      	str	r1, [sp, #0]
 80003b8:	9201      	str	r2, [sp, #4]
 80003ba:	2201      	movs	r2, #1
 80003bc:	40da      	lsrs	r2, r3
 80003be:	9201      	str	r2, [sp, #4]
 80003c0:	e785      	b.n	80002ce <__udivmoddi4+0x6e>
 80003c2:	4642      	mov	r2, r8
 80003c4:	2320      	movs	r3, #32
 80003c6:	1a9b      	subs	r3, r3, r2
 80003c8:	002a      	movs	r2, r5
 80003ca:	4646      	mov	r6, r8
 80003cc:	409a      	lsls	r2, r3
 80003ce:	0023      	movs	r3, r4
 80003d0:	40f3      	lsrs	r3, r6
 80003d2:	4644      	mov	r4, r8
 80003d4:	4313      	orrs	r3, r2
 80003d6:	002a      	movs	r2, r5
 80003d8:	40e2      	lsrs	r2, r4
 80003da:	001c      	movs	r4, r3
 80003dc:	465b      	mov	r3, fp
 80003de:	0015      	movs	r5, r2
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	dad4      	bge.n	800038e <__udivmoddi4+0x12e>
 80003e4:	4642      	mov	r2, r8
 80003e6:	002f      	movs	r7, r5
 80003e8:	2320      	movs	r3, #32
 80003ea:	0026      	movs	r6, r4
 80003ec:	4097      	lsls	r7, r2
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	40de      	lsrs	r6, r3
 80003f2:	003b      	movs	r3, r7
 80003f4:	4333      	orrs	r3, r6
 80003f6:	e7cd      	b.n	8000394 <__udivmoddi4+0x134>

080003f8 <__clzdi2>:
 80003f8:	b510      	push	{r4, lr}
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d103      	bne.n	8000406 <__clzdi2+0xe>
 80003fe:	f000 f807 	bl	8000410 <__clzsi2>
 8000402:	3020      	adds	r0, #32
 8000404:	e002      	b.n	800040c <__clzdi2+0x14>
 8000406:	0008      	movs	r0, r1
 8000408:	f000 f802 	bl	8000410 <__clzsi2>
 800040c:	bd10      	pop	{r4, pc}
 800040e:	46c0      	nop			@ (mov r8, r8)

08000410 <__clzsi2>:
 8000410:	211c      	movs	r1, #28
 8000412:	2301      	movs	r3, #1
 8000414:	041b      	lsls	r3, r3, #16
 8000416:	4298      	cmp	r0, r3
 8000418:	d301      	bcc.n	800041e <__clzsi2+0xe>
 800041a:	0c00      	lsrs	r0, r0, #16
 800041c:	3910      	subs	r1, #16
 800041e:	0a1b      	lsrs	r3, r3, #8
 8000420:	4298      	cmp	r0, r3
 8000422:	d301      	bcc.n	8000428 <__clzsi2+0x18>
 8000424:	0a00      	lsrs	r0, r0, #8
 8000426:	3908      	subs	r1, #8
 8000428:	091b      	lsrs	r3, r3, #4
 800042a:	4298      	cmp	r0, r3
 800042c:	d301      	bcc.n	8000432 <__clzsi2+0x22>
 800042e:	0900      	lsrs	r0, r0, #4
 8000430:	3904      	subs	r1, #4
 8000432:	a202      	add	r2, pc, #8	@ (adr r2, 800043c <__clzsi2+0x2c>)
 8000434:	5c10      	ldrb	r0, [r2, r0]
 8000436:	1840      	adds	r0, r0, r1
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	02020304 	.word	0x02020304
 8000440:	01010101 	.word	0x01010101
	...

0800044c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000450:	f000 fce0 	bl	8000e14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000454:	f000 f81c 	bl	8000490 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000458:	f000 fa5a 	bl	8000910 <MX_GPIO_Init>
  MX_RTC_Init();
 800045c:	f000 f892 	bl	8000584 <MX_RTC_Init>
  MX_SPI1_Init();
 8000460:	f000 f930 	bl	80006c4 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000464:	f000 fa24 	bl	80008b0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000468:	f000 f964 	bl	8000734 <MX_TIM2_Init>
  MX_TIM3_Init();
 800046c:	f000 f9b6 	bl	80007dc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // Start PWM on TIM3 CH2
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000470:	4b05      	ldr	r3, [pc, #20]	@ (8000488 <main+0x3c>)
 8000472:	2104      	movs	r1, #4
 8000474:	0018      	movs	r0, r3
 8000476:	f002 fcff 	bl	8002e78 <HAL_TIM_PWM_Start>

  // Set duty cycle (e.g., 70% brightness)
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 999);
 800047a:	4b03      	ldr	r3, [pc, #12]	@ (8000488 <main+0x3c>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	4a03      	ldr	r2, [pc, #12]	@ (800048c <main+0x40>)
 8000480:	639a      	str	r2, [r3, #56]	@ 0x38

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000482:	46c0      	nop			@ (mov r8, r8)
 8000484:	e7fd      	b.n	8000482 <main+0x36>
 8000486:	46c0      	nop			@ (mov r8, r8)
 8000488:	200000e4 	.word	0x200000e4
 800048c:	000003e7 	.word	0x000003e7

08000490 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000490:	b590      	push	{r4, r7, lr}
 8000492:	b09d      	sub	sp, #116	@ 0x74
 8000494:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000496:	2438      	movs	r4, #56	@ 0x38
 8000498:	193b      	adds	r3, r7, r4
 800049a:	0018      	movs	r0, r3
 800049c:	2338      	movs	r3, #56	@ 0x38
 800049e:	001a      	movs	r2, r3
 80004a0:	2100      	movs	r1, #0
 80004a2:	f004 fa3b 	bl	800491c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004a6:	2324      	movs	r3, #36	@ 0x24
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	0018      	movs	r0, r3
 80004ac:	2314      	movs	r3, #20
 80004ae:	001a      	movs	r2, r3
 80004b0:	2100      	movs	r1, #0
 80004b2:	f004 fa33 	bl	800491c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004b6:	003b      	movs	r3, r7
 80004b8:	0018      	movs	r0, r3
 80004ba:	2324      	movs	r3, #36	@ 0x24
 80004bc:	001a      	movs	r2, r3
 80004be:	2100      	movs	r1, #0
 80004c0:	f004 fa2c 	bl	800491c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004c4:	4b2d      	ldr	r3, [pc, #180]	@ (800057c <SystemClock_Config+0xec>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4a2d      	ldr	r2, [pc, #180]	@ (8000580 <SystemClock_Config+0xf0>)
 80004ca:	401a      	ands	r2, r3
 80004cc:	4b2b      	ldr	r3, [pc, #172]	@ (800057c <SystemClock_Config+0xec>)
 80004ce:	2180      	movs	r1, #128	@ 0x80
 80004d0:	0109      	lsls	r1, r1, #4
 80004d2:	430a      	orrs	r2, r1
 80004d4:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80004d6:	0021      	movs	r1, r4
 80004d8:	187b      	adds	r3, r7, r1
 80004da:	220a      	movs	r2, #10
 80004dc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004de:	187b      	adds	r3, r7, r1
 80004e0:	2201      	movs	r2, #1
 80004e2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004e4:	187b      	adds	r3, r7, r1
 80004e6:	2210      	movs	r2, #16
 80004e8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80004ea:	187b      	adds	r3, r7, r1
 80004ec:	2201      	movs	r2, #1
 80004ee:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004f0:	187b      	adds	r3, r7, r1
 80004f2:	2202      	movs	r2, #2
 80004f4:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004f6:	187b      	adds	r3, r7, r1
 80004f8:	2200      	movs	r2, #0
 80004fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_6;
 80004fc:	187b      	adds	r3, r7, r1
 80004fe:	2280      	movs	r2, #128	@ 0x80
 8000500:	0312      	lsls	r2, r2, #12
 8000502:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8000504:	187b      	adds	r3, r7, r1
 8000506:	2280      	movs	r2, #128	@ 0x80
 8000508:	0412      	lsls	r2, r2, #16
 800050a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800050c:	187b      	adds	r3, r7, r1
 800050e:	0018      	movs	r0, r3
 8000510:	f001 f818 	bl	8001544 <HAL_RCC_OscConfig>
 8000514:	1e03      	subs	r3, r0, #0
 8000516:	d001      	beq.n	800051c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000518:	f000 faaa 	bl	8000a70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800051c:	2124      	movs	r1, #36	@ 0x24
 800051e:	187b      	adds	r3, r7, r1
 8000520:	220f      	movs	r2, #15
 8000522:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000524:	187b      	adds	r3, r7, r1
 8000526:	2203      	movs	r2, #3
 8000528:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800052a:	187b      	adds	r3, r7, r1
 800052c:	2200      	movs	r2, #0
 800052e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000530:	187b      	adds	r3, r7, r1
 8000532:	2200      	movs	r2, #0
 8000534:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000536:	187b      	adds	r3, r7, r1
 8000538:	2200      	movs	r2, #0
 800053a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800053c:	187b      	adds	r3, r7, r1
 800053e:	2101      	movs	r1, #1
 8000540:	0018      	movs	r0, r3
 8000542:	f001 fbd3 	bl	8001cec <HAL_RCC_ClockConfig>
 8000546:	1e03      	subs	r3, r0, #0
 8000548:	d001      	beq.n	800054e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800054a:	f000 fa91 	bl	8000a70 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_RTC;
 800054e:	003b      	movs	r3, r7
 8000550:	2222      	movs	r2, #34	@ 0x22
 8000552:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000554:	003b      	movs	r3, r7
 8000556:	2200      	movs	r2, #0
 8000558:	60da      	str	r2, [r3, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800055a:	003b      	movs	r3, r7
 800055c:	2280      	movs	r2, #128	@ 0x80
 800055e:	0292      	lsls	r2, r2, #10
 8000560:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000562:	003b      	movs	r3, r7
 8000564:	0018      	movs	r0, r3
 8000566:	f001 fdc5 	bl	80020f4 <HAL_RCCEx_PeriphCLKConfig>
 800056a:	1e03      	subs	r3, r0, #0
 800056c:	d001      	beq.n	8000572 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 800056e:	f000 fa7f 	bl	8000a70 <Error_Handler>
  }
}
 8000572:	46c0      	nop			@ (mov r8, r8)
 8000574:	46bd      	mov	sp, r7
 8000576:	b01d      	add	sp, #116	@ 0x74
 8000578:	bd90      	pop	{r4, r7, pc}
 800057a:	46c0      	nop			@ (mov r8, r8)
 800057c:	40007000 	.word	0x40007000
 8000580:	ffffe7ff 	.word	0xffffe7ff

08000584 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b090      	sub	sp, #64	@ 0x40
 8000588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800058a:	232c      	movs	r3, #44	@ 0x2c
 800058c:	18fb      	adds	r3, r7, r3
 800058e:	0018      	movs	r0, r3
 8000590:	2314      	movs	r3, #20
 8000592:	001a      	movs	r2, r3
 8000594:	2100      	movs	r1, #0
 8000596:	f004 f9c1 	bl	800491c <memset>
  RTC_DateTypeDef sDate = {0};
 800059a:	2328      	movs	r3, #40	@ 0x28
 800059c:	18fb      	adds	r3, r7, r3
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 80005a2:	003b      	movs	r3, r7
 80005a4:	0018      	movs	r0, r3
 80005a6:	2328      	movs	r3, #40	@ 0x28
 80005a8:	001a      	movs	r2, r3
 80005aa:	2100      	movs	r1, #0
 80005ac:	f004 f9b6 	bl	800491c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80005b0:	4b41      	ldr	r3, [pc, #260]	@ (80006b8 <MX_RTC_Init+0x134>)
 80005b2:	4a42      	ldr	r2, [pc, #264]	@ (80006bc <MX_RTC_Init+0x138>)
 80005b4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80005b6:	4b40      	ldr	r3, [pc, #256]	@ (80006b8 <MX_RTC_Init+0x134>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 31;
 80005bc:	4b3e      	ldr	r3, [pc, #248]	@ (80006b8 <MX_RTC_Init+0x134>)
 80005be:	221f      	movs	r2, #31
 80005c0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 1023;
 80005c2:	4b3d      	ldr	r3, [pc, #244]	@ (80006b8 <MX_RTC_Init+0x134>)
 80005c4:	4a3e      	ldr	r2, [pc, #248]	@ (80006c0 <MX_RTC_Init+0x13c>)
 80005c6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80005c8:	4b3b      	ldr	r3, [pc, #236]	@ (80006b8 <MX_RTC_Init+0x134>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80005ce:	4b3a      	ldr	r3, [pc, #232]	@ (80006b8 <MX_RTC_Init+0x134>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80005d4:	4b38      	ldr	r3, [pc, #224]	@ (80006b8 <MX_RTC_Init+0x134>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80005da:	4b37      	ldr	r3, [pc, #220]	@ (80006b8 <MX_RTC_Init+0x134>)
 80005dc:	2200      	movs	r2, #0
 80005de:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80005e0:	4b35      	ldr	r3, [pc, #212]	@ (80006b8 <MX_RTC_Init+0x134>)
 80005e2:	0018      	movs	r0, r3
 80005e4:	f001 fee2 	bl	80023ac <HAL_RTC_Init>
 80005e8:	1e03      	subs	r3, r0, #0
 80005ea:	d001      	beq.n	80005f0 <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 80005ec:	f000 fa40 	bl	8000a70 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 80005f0:	212c      	movs	r1, #44	@ 0x2c
 80005f2:	187b      	adds	r3, r7, r1
 80005f4:	2200      	movs	r2, #0
 80005f6:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 80005f8:	187b      	adds	r3, r7, r1
 80005fa:	2200      	movs	r2, #0
 80005fc:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 80005fe:	187b      	adds	r3, r7, r1
 8000600:	2200      	movs	r2, #0
 8000602:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000604:	187b      	adds	r3, r7, r1
 8000606:	2200      	movs	r2, #0
 8000608:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800060a:	187b      	adds	r3, r7, r1
 800060c:	2200      	movs	r2, #0
 800060e:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000610:	1879      	adds	r1, r7, r1
 8000612:	4b29      	ldr	r3, [pc, #164]	@ (80006b8 <MX_RTC_Init+0x134>)
 8000614:	2200      	movs	r2, #0
 8000616:	0018      	movs	r0, r3
 8000618:	f001 ff64 	bl	80024e4 <HAL_RTC_SetTime>
 800061c:	1e03      	subs	r3, r0, #0
 800061e:	d001      	beq.n	8000624 <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 8000620:	f000 fa26 	bl	8000a70 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000624:	2128      	movs	r1, #40	@ 0x28
 8000626:	187b      	adds	r3, r7, r1
 8000628:	2201      	movs	r2, #1
 800062a:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800062c:	187b      	adds	r3, r7, r1
 800062e:	2201      	movs	r2, #1
 8000630:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 8000632:	187b      	adds	r3, r7, r1
 8000634:	2201      	movs	r2, #1
 8000636:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 8000638:	187b      	adds	r3, r7, r1
 800063a:	2200      	movs	r2, #0
 800063c:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800063e:	1879      	adds	r1, r7, r1
 8000640:	4b1d      	ldr	r3, [pc, #116]	@ (80006b8 <MX_RTC_Init+0x134>)
 8000642:	2200      	movs	r2, #0
 8000644:	0018      	movs	r0, r3
 8000646:	f001 fff7 	bl	8002638 <HAL_RTC_SetDate>
 800064a:	1e03      	subs	r3, r0, #0
 800064c:	d001      	beq.n	8000652 <MX_RTC_Init+0xce>
  {
    Error_Handler();
 800064e:	f000 fa0f 	bl	8000a70 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8000652:	003b      	movs	r3, r7
 8000654:	2200      	movs	r2, #0
 8000656:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8000658:	003b      	movs	r3, r7
 800065a:	2200      	movs	r2, #0
 800065c:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 800065e:	003b      	movs	r3, r7
 8000660:	2200      	movs	r2, #0
 8000662:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8000664:	003b      	movs	r3, r7
 8000666:	2200      	movs	r2, #0
 8000668:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800066a:	003b      	movs	r3, r7
 800066c:	2200      	movs	r2, #0
 800066e:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000670:	003b      	movs	r3, r7
 8000672:	2200      	movs	r2, #0
 8000674:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000676:	003b      	movs	r3, r7
 8000678:	2200      	movs	r2, #0
 800067a:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_NONE;
 800067c:	003b      	movs	r3, r7
 800067e:	22f0      	movs	r2, #240	@ 0xf0
 8000680:	0512      	lsls	r2, r2, #20
 8000682:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000684:	003b      	movs	r3, r7
 8000686:	2200      	movs	r2, #0
 8000688:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 800068a:	003b      	movs	r3, r7
 800068c:	2220      	movs	r2, #32
 800068e:	2101      	movs	r1, #1
 8000690:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8000692:	003b      	movs	r3, r7
 8000694:	2280      	movs	r2, #128	@ 0x80
 8000696:	0052      	lsls	r2, r2, #1
 8000698:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 800069a:	0039      	movs	r1, r7
 800069c:	4b06      	ldr	r3, [pc, #24]	@ (80006b8 <MX_RTC_Init+0x134>)
 800069e:	2200      	movs	r2, #0
 80006a0:	0018      	movs	r0, r3
 80006a2:	f002 f85d 	bl	8002760 <HAL_RTC_SetAlarm_IT>
 80006a6:	1e03      	subs	r3, r0, #0
 80006a8:	d001      	beq.n	80006ae <MX_RTC_Init+0x12a>
  {
    Error_Handler();
 80006aa:	f000 f9e1 	bl	8000a70 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80006ae:	46c0      	nop			@ (mov r8, r8)
 80006b0:	46bd      	mov	sp, r7
 80006b2:	b010      	add	sp, #64	@ 0x40
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	46c0      	nop			@ (mov r8, r8)
 80006b8:	20000028 	.word	0x20000028
 80006bc:	40002800 	.word	0x40002800
 80006c0:	000003ff 	.word	0x000003ff

080006c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006c8:	4b18      	ldr	r3, [pc, #96]	@ (800072c <MX_SPI1_Init+0x68>)
 80006ca:	4a19      	ldr	r2, [pc, #100]	@ (8000730 <MX_SPI1_Init+0x6c>)
 80006cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006ce:	4b17      	ldr	r3, [pc, #92]	@ (800072c <MX_SPI1_Init+0x68>)
 80006d0:	2282      	movs	r2, #130	@ 0x82
 80006d2:	0052      	lsls	r2, r2, #1
 80006d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006d6:	4b15      	ldr	r3, [pc, #84]	@ (800072c <MX_SPI1_Init+0x68>)
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006dc:	4b13      	ldr	r3, [pc, #76]	@ (800072c <MX_SPI1_Init+0x68>)
 80006de:	2200      	movs	r2, #0
 80006e0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006e2:	4b12      	ldr	r3, [pc, #72]	@ (800072c <MX_SPI1_Init+0x68>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006e8:	4b10      	ldr	r3, [pc, #64]	@ (800072c <MX_SPI1_Init+0x68>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006ee:	4b0f      	ldr	r3, [pc, #60]	@ (800072c <MX_SPI1_Init+0x68>)
 80006f0:	2280      	movs	r2, #128	@ 0x80
 80006f2:	0092      	lsls	r2, r2, #2
 80006f4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80006f6:	4b0d      	ldr	r3, [pc, #52]	@ (800072c <MX_SPI1_Init+0x68>)
 80006f8:	2220      	movs	r2, #32
 80006fa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006fc:	4b0b      	ldr	r3, [pc, #44]	@ (800072c <MX_SPI1_Init+0x68>)
 80006fe:	2200      	movs	r2, #0
 8000700:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000702:	4b0a      	ldr	r3, [pc, #40]	@ (800072c <MX_SPI1_Init+0x68>)
 8000704:	2200      	movs	r2, #0
 8000706:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000708:	4b08      	ldr	r3, [pc, #32]	@ (800072c <MX_SPI1_Init+0x68>)
 800070a:	2200      	movs	r2, #0
 800070c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800070e:	4b07      	ldr	r3, [pc, #28]	@ (800072c <MX_SPI1_Init+0x68>)
 8000710:	2207      	movs	r2, #7
 8000712:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000714:	4b05      	ldr	r3, [pc, #20]	@ (800072c <MX_SPI1_Init+0x68>)
 8000716:	0018      	movs	r0, r3
 8000718:	f002 fa9a 	bl	8002c50 <HAL_SPI_Init>
 800071c:	1e03      	subs	r3, r0, #0
 800071e:	d001      	beq.n	8000724 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000720:	f000 f9a6 	bl	8000a70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000724:	46c0      	nop			@ (mov r8, r8)
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	46c0      	nop			@ (mov r8, r8)
 800072c:	2000004c 	.word	0x2000004c
 8000730:	40013000 	.word	0x40013000

08000734 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b086      	sub	sp, #24
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800073a:	2308      	movs	r3, #8
 800073c:	18fb      	adds	r3, r7, r3
 800073e:	0018      	movs	r0, r3
 8000740:	2310      	movs	r3, #16
 8000742:	001a      	movs	r2, r3
 8000744:	2100      	movs	r1, #0
 8000746:	f004 f8e9 	bl	800491c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800074a:	003b      	movs	r3, r7
 800074c:	0018      	movs	r0, r3
 800074e:	2308      	movs	r3, #8
 8000750:	001a      	movs	r2, r3
 8000752:	2100      	movs	r1, #0
 8000754:	f004 f8e2 	bl	800491c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000758:	4b1e      	ldr	r3, [pc, #120]	@ (80007d4 <MX_TIM2_Init+0xa0>)
 800075a:	2280      	movs	r2, #128	@ 0x80
 800075c:	05d2      	lsls	r2, r2, #23
 800075e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 8000760:	4b1c      	ldr	r3, [pc, #112]	@ (80007d4 <MX_TIM2_Init+0xa0>)
 8000762:	220f      	movs	r2, #15
 8000764:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000766:	4b1b      	ldr	r3, [pc, #108]	@ (80007d4 <MX_TIM2_Init+0xa0>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800076c:	4b19      	ldr	r3, [pc, #100]	@ (80007d4 <MX_TIM2_Init+0xa0>)
 800076e:	4a1a      	ldr	r2, [pc, #104]	@ (80007d8 <MX_TIM2_Init+0xa4>)
 8000770:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000772:	4b18      	ldr	r3, [pc, #96]	@ (80007d4 <MX_TIM2_Init+0xa0>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000778:	4b16      	ldr	r3, [pc, #88]	@ (80007d4 <MX_TIM2_Init+0xa0>)
 800077a:	2200      	movs	r2, #0
 800077c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800077e:	4b15      	ldr	r3, [pc, #84]	@ (80007d4 <MX_TIM2_Init+0xa0>)
 8000780:	0018      	movs	r0, r3
 8000782:	f002 faf9 	bl	8002d78 <HAL_TIM_Base_Init>
 8000786:	1e03      	subs	r3, r0, #0
 8000788:	d001      	beq.n	800078e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800078a:	f000 f971 	bl	8000a70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800078e:	2108      	movs	r1, #8
 8000790:	187b      	adds	r3, r7, r1
 8000792:	2280      	movs	r2, #128	@ 0x80
 8000794:	0152      	lsls	r2, r2, #5
 8000796:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000798:	187a      	adds	r2, r7, r1
 800079a:	4b0e      	ldr	r3, [pc, #56]	@ (80007d4 <MX_TIM2_Init+0xa0>)
 800079c:	0011      	movs	r1, r2
 800079e:	0018      	movs	r0, r3
 80007a0:	f002 fcc2 	bl	8003128 <HAL_TIM_ConfigClockSource>
 80007a4:	1e03      	subs	r3, r0, #0
 80007a6:	d001      	beq.n	80007ac <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80007a8:	f000 f962 	bl	8000a70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ac:	003b      	movs	r3, r7
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007b2:	003b      	movs	r3, r7
 80007b4:	2200      	movs	r2, #0
 80007b6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007b8:	003a      	movs	r2, r7
 80007ba:	4b06      	ldr	r3, [pc, #24]	@ (80007d4 <MX_TIM2_Init+0xa0>)
 80007bc:	0011      	movs	r1, r2
 80007be:	0018      	movs	r0, r3
 80007c0:	f002 ffac 	bl	800371c <HAL_TIMEx_MasterConfigSynchronization>
 80007c4:	1e03      	subs	r3, r0, #0
 80007c6:	d001      	beq.n	80007cc <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80007c8:	f000 f952 	bl	8000a70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007cc:	46c0      	nop			@ (mov r8, r8)
 80007ce:	46bd      	mov	sp, r7
 80007d0:	b006      	add	sp, #24
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	200000a4 	.word	0x200000a4
 80007d8:	000003e7 	.word	0x000003e7

080007dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b086      	sub	sp, #24
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007e2:	2310      	movs	r3, #16
 80007e4:	18fb      	adds	r3, r7, r3
 80007e6:	0018      	movs	r0, r3
 80007e8:	2308      	movs	r3, #8
 80007ea:	001a      	movs	r2, r3
 80007ec:	2100      	movs	r1, #0
 80007ee:	f004 f895 	bl	800491c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007f2:	003b      	movs	r3, r7
 80007f4:	0018      	movs	r0, r3
 80007f6:	2310      	movs	r3, #16
 80007f8:	001a      	movs	r2, r3
 80007fa:	2100      	movs	r1, #0
 80007fc:	f004 f88e 	bl	800491c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000800:	4b28      	ldr	r3, [pc, #160]	@ (80008a4 <MX_TIM3_Init+0xc8>)
 8000802:	4a29      	ldr	r2, [pc, #164]	@ (80008a8 <MX_TIM3_Init+0xcc>)
 8000804:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000806:	4b27      	ldr	r3, [pc, #156]	@ (80008a4 <MX_TIM3_Init+0xc8>)
 8000808:	2200      	movs	r2, #0
 800080a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800080c:	4b25      	ldr	r3, [pc, #148]	@ (80008a4 <MX_TIM3_Init+0xc8>)
 800080e:	2200      	movs	r2, #0
 8000810:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000812:	4b24      	ldr	r3, [pc, #144]	@ (80008a4 <MX_TIM3_Init+0xc8>)
 8000814:	4a25      	ldr	r2, [pc, #148]	@ (80008ac <MX_TIM3_Init+0xd0>)
 8000816:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000818:	4b22      	ldr	r3, [pc, #136]	@ (80008a4 <MX_TIM3_Init+0xc8>)
 800081a:	2200      	movs	r2, #0
 800081c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800081e:	4b21      	ldr	r3, [pc, #132]	@ (80008a4 <MX_TIM3_Init+0xc8>)
 8000820:	2200      	movs	r2, #0
 8000822:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000824:	4b1f      	ldr	r3, [pc, #124]	@ (80008a4 <MX_TIM3_Init+0xc8>)
 8000826:	0018      	movs	r0, r3
 8000828:	f002 fae6 	bl	8002df8 <HAL_TIM_PWM_Init>
 800082c:	1e03      	subs	r3, r0, #0
 800082e:	d001      	beq.n	8000834 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000830:	f000 f91e 	bl	8000a70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000834:	2110      	movs	r1, #16
 8000836:	187b      	adds	r3, r7, r1
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800083c:	187b      	adds	r3, r7, r1
 800083e:	2200      	movs	r2, #0
 8000840:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000842:	187a      	adds	r2, r7, r1
 8000844:	4b17      	ldr	r3, [pc, #92]	@ (80008a4 <MX_TIM3_Init+0xc8>)
 8000846:	0011      	movs	r1, r2
 8000848:	0018      	movs	r0, r3
 800084a:	f002 ff67 	bl	800371c <HAL_TIMEx_MasterConfigSynchronization>
 800084e:	1e03      	subs	r3, r0, #0
 8000850:	d001      	beq.n	8000856 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8000852:	f000 f90d 	bl	8000a70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000856:	003b      	movs	r3, r7
 8000858:	2260      	movs	r2, #96	@ 0x60
 800085a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800085c:	003b      	movs	r3, r7
 800085e:	2200      	movs	r2, #0
 8000860:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000862:	003b      	movs	r3, r7
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000868:	003b      	movs	r3, r7
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800086e:	0039      	movs	r1, r7
 8000870:	4b0c      	ldr	r3, [pc, #48]	@ (80008a4 <MX_TIM3_Init+0xc8>)
 8000872:	2204      	movs	r2, #4
 8000874:	0018      	movs	r0, r3
 8000876:	f002 fb91 	bl	8002f9c <HAL_TIM_PWM_ConfigChannel>
 800087a:	1e03      	subs	r3, r0, #0
 800087c:	d001      	beq.n	8000882 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 800087e:	f000 f8f7 	bl	8000a70 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI2_GPIOB5_AF4) != HAL_OK)
 8000882:	4b08      	ldr	r3, [pc, #32]	@ (80008a4 <MX_TIM3_Init+0xc8>)
 8000884:	2108      	movs	r1, #8
 8000886:	0018      	movs	r0, r3
 8000888:	f002 ffa6 	bl	80037d8 <HAL_TIMEx_RemapConfig>
 800088c:	1e03      	subs	r3, r0, #0
 800088e:	d001      	beq.n	8000894 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000890:	f000 f8ee 	bl	8000a70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000894:	4b03      	ldr	r3, [pc, #12]	@ (80008a4 <MX_TIM3_Init+0xc8>)
 8000896:	0018      	movs	r0, r3
 8000898:	f000 f9b8 	bl	8000c0c <HAL_TIM_MspPostInit>

}
 800089c:	46c0      	nop			@ (mov r8, r8)
 800089e:	46bd      	mov	sp, r7
 80008a0:	b006      	add	sp, #24
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	200000e4 	.word	0x200000e4
 80008a8:	40000400 	.word	0x40000400
 80008ac:	0000ffff 	.word	0x0000ffff

080008b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008b4:	4b14      	ldr	r3, [pc, #80]	@ (8000908 <MX_USART2_UART_Init+0x58>)
 80008b6:	4a15      	ldr	r2, [pc, #84]	@ (800090c <MX_USART2_UART_Init+0x5c>)
 80008b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008ba:	4b13      	ldr	r3, [pc, #76]	@ (8000908 <MX_USART2_UART_Init+0x58>)
 80008bc:	22e1      	movs	r2, #225	@ 0xe1
 80008be:	0252      	lsls	r2, r2, #9
 80008c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008c2:	4b11      	ldr	r3, [pc, #68]	@ (8000908 <MX_USART2_UART_Init+0x58>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000908 <MX_USART2_UART_Init+0x58>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000908 <MX_USART2_UART_Init+0x58>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000908 <MX_USART2_UART_Init+0x58>)
 80008d6:	220c      	movs	r2, #12
 80008d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008da:	4b0b      	ldr	r3, [pc, #44]	@ (8000908 <MX_USART2_UART_Init+0x58>)
 80008dc:	2200      	movs	r2, #0
 80008de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e0:	4b09      	ldr	r3, [pc, #36]	@ (8000908 <MX_USART2_UART_Init+0x58>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008e6:	4b08      	ldr	r3, [pc, #32]	@ (8000908 <MX_USART2_UART_Init+0x58>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008ec:	4b06      	ldr	r3, [pc, #24]	@ (8000908 <MX_USART2_UART_Init+0x58>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008f2:	4b05      	ldr	r3, [pc, #20]	@ (8000908 <MX_USART2_UART_Init+0x58>)
 80008f4:	0018      	movs	r0, r3
 80008f6:	f002 ff8d 	bl	8003814 <HAL_UART_Init>
 80008fa:	1e03      	subs	r3, r0, #0
 80008fc:	d001      	beq.n	8000902 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008fe:	f000 f8b7 	bl	8000a70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000902:	46c0      	nop			@ (mov r8, r8)
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	20000124 	.word	0x20000124
 800090c:	40004400 	.word	0x40004400

08000910 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000910:	b590      	push	{r4, r7, lr}
 8000912:	b08b      	sub	sp, #44	@ 0x2c
 8000914:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000916:	2414      	movs	r4, #20
 8000918:	193b      	adds	r3, r7, r4
 800091a:	0018      	movs	r0, r3
 800091c:	2314      	movs	r3, #20
 800091e:	001a      	movs	r2, r3
 8000920:	2100      	movs	r1, #0
 8000922:	f003 fffb 	bl	800491c <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000926:	4b4e      	ldr	r3, [pc, #312]	@ (8000a60 <MX_GPIO_Init+0x150>)
 8000928:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800092a:	4b4d      	ldr	r3, [pc, #308]	@ (8000a60 <MX_GPIO_Init+0x150>)
 800092c:	2101      	movs	r1, #1
 800092e:	430a      	orrs	r2, r1
 8000930:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000932:	4b4b      	ldr	r3, [pc, #300]	@ (8000a60 <MX_GPIO_Init+0x150>)
 8000934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000936:	2201      	movs	r2, #1
 8000938:	4013      	ands	r3, r2
 800093a:	613b      	str	r3, [r7, #16]
 800093c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800093e:	4b48      	ldr	r3, [pc, #288]	@ (8000a60 <MX_GPIO_Init+0x150>)
 8000940:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000942:	4b47      	ldr	r3, [pc, #284]	@ (8000a60 <MX_GPIO_Init+0x150>)
 8000944:	2102      	movs	r1, #2
 8000946:	430a      	orrs	r2, r1
 8000948:	62da      	str	r2, [r3, #44]	@ 0x2c
 800094a:	4b45      	ldr	r3, [pc, #276]	@ (8000a60 <MX_GPIO_Init+0x150>)
 800094c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800094e:	2202      	movs	r2, #2
 8000950:	4013      	ands	r3, r2
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000956:	4b42      	ldr	r3, [pc, #264]	@ (8000a60 <MX_GPIO_Init+0x150>)
 8000958:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800095a:	4b41      	ldr	r3, [pc, #260]	@ (8000a60 <MX_GPIO_Init+0x150>)
 800095c:	2104      	movs	r1, #4
 800095e:	430a      	orrs	r2, r1
 8000960:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000962:	4b3f      	ldr	r3, [pc, #252]	@ (8000a60 <MX_GPIO_Init+0x150>)
 8000964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000966:	2204      	movs	r2, #4
 8000968:	4013      	ands	r3, r2
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800096e:	4b3c      	ldr	r3, [pc, #240]	@ (8000a60 <MX_GPIO_Init+0x150>)
 8000970:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000972:	4b3b      	ldr	r3, [pc, #236]	@ (8000a60 <MX_GPIO_Init+0x150>)
 8000974:	2180      	movs	r1, #128	@ 0x80
 8000976:	430a      	orrs	r2, r1
 8000978:	62da      	str	r2, [r3, #44]	@ 0x2c
 800097a:	4b39      	ldr	r3, [pc, #228]	@ (8000a60 <MX_GPIO_Init+0x150>)
 800097c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800097e:	2280      	movs	r2, #128	@ 0x80
 8000980:	4013      	ands	r3, r2
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PA15_RESERVED_Pin|PA12_RESERVED_Pin|PA1_RESERVED_Pin, GPIO_PIN_RESET);
 8000986:	4937      	ldr	r1, [pc, #220]	@ (8000a64 <MX_GPIO_Init+0x154>)
 8000988:	23a0      	movs	r3, #160	@ 0xa0
 800098a:	05db      	lsls	r3, r3, #23
 800098c:	2200      	movs	r2, #0
 800098e:	0018      	movs	r0, r3
 8000990:	f000 fd94 	bl	80014bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PC1_RESERVED_Pin|PC0_RESERVED_Pin|PC2_RESERVED_Pin, GPIO_PIN_RESET);
 8000994:	4b34      	ldr	r3, [pc, #208]	@ (8000a68 <MX_GPIO_Init+0x158>)
 8000996:	2200      	movs	r2, #0
 8000998:	2107      	movs	r1, #7
 800099a:	0018      	movs	r0, r3
 800099c:	f000 fd8e 	bl	80014bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA15_RESERVED_Pin PA12_RESERVED_Pin PA1_RESERVED_Pin */
  GPIO_InitStruct.Pin = PA15_RESERVED_Pin|PA12_RESERVED_Pin|PA1_RESERVED_Pin;
 80009a0:	193b      	adds	r3, r7, r4
 80009a2:	4a30      	ldr	r2, [pc, #192]	@ (8000a64 <MX_GPIO_Init+0x154>)
 80009a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a6:	193b      	adds	r3, r7, r4
 80009a8:	2201      	movs	r2, #1
 80009aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	193b      	adds	r3, r7, r4
 80009ae:	2200      	movs	r2, #0
 80009b0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009b2:	193b      	adds	r3, r7, r4
 80009b4:	2202      	movs	r2, #2
 80009b6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b8:	193a      	adds	r2, r7, r4
 80009ba:	23a0      	movs	r3, #160	@ 0xa0
 80009bc:	05db      	lsls	r3, r3, #23
 80009be:	0011      	movs	r1, r2
 80009c0:	0018      	movs	r0, r3
 80009c2:	f000 fbfd 	bl	80011c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4_RESERVED_Pin PB1_RESERVED_Pin PB0_RESERVED_Pin */
  GPIO_InitStruct.Pin = PB4_RESERVED_Pin|PB1_RESERVED_Pin|PB0_RESERVED_Pin;
 80009c6:	0021      	movs	r1, r4
 80009c8:	187b      	adds	r3, r7, r1
 80009ca:	2213      	movs	r2, #19
 80009cc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009ce:	187b      	adds	r3, r7, r1
 80009d0:	2288      	movs	r2, #136	@ 0x88
 80009d2:	0352      	lsls	r2, r2, #13
 80009d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	187b      	adds	r3, r7, r1
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009dc:	000c      	movs	r4, r1
 80009de:	187b      	adds	r3, r7, r1
 80009e0:	4a22      	ldr	r2, [pc, #136]	@ (8000a6c <MX_GPIO_Init+0x15c>)
 80009e2:	0019      	movs	r1, r3
 80009e4:	0010      	movs	r0, r2
 80009e6:	f000 fbeb 	bl	80011c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13_RESERVED_Pin */
  GPIO_InitStruct.Pin = PC13_RESERVED_Pin;
 80009ea:	0021      	movs	r1, r4
 80009ec:	187b      	adds	r3, r7, r1
 80009ee:	2280      	movs	r2, #128	@ 0x80
 80009f0:	0192      	lsls	r2, r2, #6
 80009f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009f4:	187b      	adds	r3, r7, r1
 80009f6:	2288      	movs	r2, #136	@ 0x88
 80009f8:	0352      	lsls	r2, r2, #13
 80009fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	187b      	adds	r3, r7, r1
 80009fe:	2200      	movs	r2, #0
 8000a00:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(PC13_RESERVED_GPIO_Port, &GPIO_InitStruct);
 8000a02:	000c      	movs	r4, r1
 8000a04:	187b      	adds	r3, r7, r1
 8000a06:	4a18      	ldr	r2, [pc, #96]	@ (8000a68 <MX_GPIO_Init+0x158>)
 8000a08:	0019      	movs	r1, r3
 8000a0a:	0010      	movs	r0, r2
 8000a0c:	f000 fbd8 	bl	80011c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1_RESERVED_Pin PC0_RESERVED_Pin PC2_RESERVED_Pin */
  GPIO_InitStruct.Pin = PC1_RESERVED_Pin|PC0_RESERVED_Pin|PC2_RESERVED_Pin;
 8000a10:	0021      	movs	r1, r4
 8000a12:	187b      	adds	r3, r7, r1
 8000a14:	2207      	movs	r2, #7
 8000a16:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a18:	187b      	adds	r3, r7, r1
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	187b      	adds	r3, r7, r1
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a24:	187b      	adds	r3, r7, r1
 8000a26:	2202      	movs	r2, #2
 8000a28:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a2a:	187b      	adds	r3, r7, r1
 8000a2c:	4a0e      	ldr	r2, [pc, #56]	@ (8000a68 <MX_GPIO_Init+0x158>)
 8000a2e:	0019      	movs	r1, r3
 8000a30:	0010      	movs	r0, r2
 8000a32:	f000 fbc5 	bl	80011c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2100      	movs	r1, #0
 8000a3a:	2005      	movs	r0, #5
 8000a3c:	f000 fb06 	bl	800104c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000a40:	2005      	movs	r0, #5
 8000a42:	f000 fb18 	bl	8001076 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2100      	movs	r1, #0
 8000a4a:	2007      	movs	r0, #7
 8000a4c:	f000 fafe 	bl	800104c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000a50:	2007      	movs	r0, #7
 8000a52:	f000 fb10 	bl	8001076 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a56:	46c0      	nop			@ (mov r8, r8)
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	b00b      	add	sp, #44	@ 0x2c
 8000a5c:	bd90      	pop	{r4, r7, pc}
 8000a5e:	46c0      	nop			@ (mov r8, r8)
 8000a60:	40021000 	.word	0x40021000
 8000a64:	00009002 	.word	0x00009002
 8000a68:	50000800 	.word	0x50000800
 8000a6c:	50000400 	.word	0x50000400

08000a70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a74:	b672      	cpsid	i
}
 8000a76:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a78:	46c0      	nop			@ (mov r8, r8)
 8000a7a:	e7fd      	b.n	8000a78 <Error_Handler+0x8>

08000a7c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a80:	4b07      	ldr	r3, [pc, #28]	@ (8000aa0 <HAL_MspInit+0x24>)
 8000a82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a84:	4b06      	ldr	r3, [pc, #24]	@ (8000aa0 <HAL_MspInit+0x24>)
 8000a86:	2101      	movs	r1, #1
 8000a88:	430a      	orrs	r2, r1
 8000a8a:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a8c:	4b04      	ldr	r3, [pc, #16]	@ (8000aa0 <HAL_MspInit+0x24>)
 8000a8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000a90:	4b03      	ldr	r3, [pc, #12]	@ (8000aa0 <HAL_MspInit+0x24>)
 8000a92:	2180      	movs	r1, #128	@ 0x80
 8000a94:	0549      	lsls	r1, r1, #21
 8000a96:	430a      	orrs	r2, r1
 8000a98:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a9a:	46c0      	nop			@ (mov r8, r8)
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40021000 	.word	0x40021000

08000aa4 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a0a      	ldr	r2, [pc, #40]	@ (8000adc <HAL_RTC_MspInit+0x38>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d10e      	bne.n	8000ad4 <HAL_RTC_MspInit+0x30>
  {
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ae0 <HAL_RTC_MspInit+0x3c>)
 8000ab8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000aba:	4b09      	ldr	r3, [pc, #36]	@ (8000ae0 <HAL_RTC_MspInit+0x3c>)
 8000abc:	2180      	movs	r1, #128	@ 0x80
 8000abe:	02c9      	lsls	r1, r1, #11
 8000ac0:	430a      	orrs	r2, r1
 8000ac2:	651a      	str	r2, [r3, #80]	@ 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	2002      	movs	r0, #2
 8000aca:	f000 fabf 	bl	800104c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8000ace:	2002      	movs	r0, #2
 8000ad0:	f000 fad1 	bl	8001076 <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8000ad4:	46c0      	nop			@ (mov r8, r8)
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	b002      	add	sp, #8
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40002800 	.word	0x40002800
 8000ae0:	40021000 	.word	0x40021000

08000ae4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ae4:	b590      	push	{r4, r7, lr}
 8000ae6:	b08b      	sub	sp, #44	@ 0x2c
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aec:	2414      	movs	r4, #20
 8000aee:	193b      	adds	r3, r7, r4
 8000af0:	0018      	movs	r0, r3
 8000af2:	2314      	movs	r3, #20
 8000af4:	001a      	movs	r2, r3
 8000af6:	2100      	movs	r1, #0
 8000af8:	f003 ff10 	bl	800491c <memset>
  if(hspi->Instance==SPI1)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a28      	ldr	r2, [pc, #160]	@ (8000ba4 <HAL_SPI_MspInit+0xc0>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d14a      	bne.n	8000b9c <HAL_SPI_MspInit+0xb8>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b06:	4b28      	ldr	r3, [pc, #160]	@ (8000ba8 <HAL_SPI_MspInit+0xc4>)
 8000b08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b0a:	4b27      	ldr	r3, [pc, #156]	@ (8000ba8 <HAL_SPI_MspInit+0xc4>)
 8000b0c:	2180      	movs	r1, #128	@ 0x80
 8000b0e:	0149      	lsls	r1, r1, #5
 8000b10:	430a      	orrs	r2, r1
 8000b12:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b14:	4b24      	ldr	r3, [pc, #144]	@ (8000ba8 <HAL_SPI_MspInit+0xc4>)
 8000b16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000b18:	4b23      	ldr	r3, [pc, #140]	@ (8000ba8 <HAL_SPI_MspInit+0xc4>)
 8000b1a:	2102      	movs	r1, #2
 8000b1c:	430a      	orrs	r2, r1
 8000b1e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000b20:	4b21      	ldr	r3, [pc, #132]	@ (8000ba8 <HAL_SPI_MspInit+0xc4>)
 8000b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b24:	2202      	movs	r2, #2
 8000b26:	4013      	ands	r3, r2
 8000b28:	613b      	str	r3, [r7, #16]
 8000b2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ba8 <HAL_SPI_MspInit+0xc4>)
 8000b2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000b30:	4b1d      	ldr	r3, [pc, #116]	@ (8000ba8 <HAL_SPI_MspInit+0xc4>)
 8000b32:	2101      	movs	r1, #1
 8000b34:	430a      	orrs	r2, r1
 8000b36:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000b38:	4b1b      	ldr	r3, [pc, #108]	@ (8000ba8 <HAL_SPI_MspInit+0xc4>)
 8000b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	4013      	ands	r3, r2
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = PB3_RESERVED_Pin;
 8000b44:	193b      	adds	r3, r7, r4
 8000b46:	2208      	movs	r2, #8
 8000b48:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4a:	193b      	adds	r3, r7, r4
 8000b4c:	2202      	movs	r2, #2
 8000b4e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	193b      	adds	r3, r7, r4
 8000b52:	2200      	movs	r2, #0
 8000b54:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b56:	193b      	adds	r3, r7, r4
 8000b58:	2203      	movs	r2, #3
 8000b5a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000b5c:	193b      	adds	r3, r7, r4
 8000b5e:	2200      	movs	r2, #0
 8000b60:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PB3_RESERVED_GPIO_Port, &GPIO_InitStruct);
 8000b62:	193b      	adds	r3, r7, r4
 8000b64:	4a11      	ldr	r2, [pc, #68]	@ (8000bac <HAL_SPI_MspInit+0xc8>)
 8000b66:	0019      	movs	r1, r3
 8000b68:	0010      	movs	r0, r2
 8000b6a:	f000 fb29 	bl	80011c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PA7_RESERVED_Pin|PA6_RESERVED_Pin;
 8000b6e:	0021      	movs	r1, r4
 8000b70:	187b      	adds	r3, r7, r1
 8000b72:	22c0      	movs	r2, #192	@ 0xc0
 8000b74:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b76:	187b      	adds	r3, r7, r1
 8000b78:	2202      	movs	r2, #2
 8000b7a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	187b      	adds	r3, r7, r1
 8000b7e:	2200      	movs	r2, #0
 8000b80:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b82:	187b      	adds	r3, r7, r1
 8000b84:	2203      	movs	r2, #3
 8000b86:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000b88:	187b      	adds	r3, r7, r1
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8e:	187a      	adds	r2, r7, r1
 8000b90:	23a0      	movs	r3, #160	@ 0xa0
 8000b92:	05db      	lsls	r3, r3, #23
 8000b94:	0011      	movs	r1, r2
 8000b96:	0018      	movs	r0, r3
 8000b98:	f000 fb12 	bl	80011c0 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000b9c:	46c0      	nop			@ (mov r8, r8)
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	b00b      	add	sp, #44	@ 0x2c
 8000ba2:	bd90      	pop	{r4, r7, pc}
 8000ba4:	40013000 	.word	0x40013000
 8000ba8:	40021000 	.word	0x40021000
 8000bac:	50000400 	.word	0x50000400

08000bb0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	2380      	movs	r3, #128	@ 0x80
 8000bbe:	05db      	lsls	r3, r3, #23
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	d105      	bne.n	8000bd0 <HAL_TIM_Base_MspInit+0x20>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bc4:	4b04      	ldr	r3, [pc, #16]	@ (8000bd8 <HAL_TIM_Base_MspInit+0x28>)
 8000bc6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000bc8:	4b03      	ldr	r3, [pc, #12]	@ (8000bd8 <HAL_TIM_Base_MspInit+0x28>)
 8000bca:	2101      	movs	r1, #1
 8000bcc:	430a      	orrs	r2, r1
 8000bce:	639a      	str	r2, [r3, #56]	@ 0x38

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000bd0:	46c0      	nop			@ (mov r8, r8)
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	b002      	add	sp, #8
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40021000 	.word	0x40021000

08000bdc <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a06      	ldr	r2, [pc, #24]	@ (8000c04 <HAL_TIM_PWM_MspInit+0x28>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d105      	bne.n	8000bfa <HAL_TIM_PWM_MspInit+0x1e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000bee:	4b06      	ldr	r3, [pc, #24]	@ (8000c08 <HAL_TIM_PWM_MspInit+0x2c>)
 8000bf0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000bf2:	4b05      	ldr	r3, [pc, #20]	@ (8000c08 <HAL_TIM_PWM_MspInit+0x2c>)
 8000bf4:	2102      	movs	r1, #2
 8000bf6:	430a      	orrs	r2, r1
 8000bf8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000bfa:	46c0      	nop			@ (mov r8, r8)
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	b002      	add	sp, #8
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	46c0      	nop			@ (mov r8, r8)
 8000c04:	40000400 	.word	0x40000400
 8000c08:	40021000 	.word	0x40021000

08000c0c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c0c:	b590      	push	{r4, r7, lr}
 8000c0e:	b089      	sub	sp, #36	@ 0x24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c14:	240c      	movs	r4, #12
 8000c16:	193b      	adds	r3, r7, r4
 8000c18:	0018      	movs	r0, r3
 8000c1a:	2314      	movs	r3, #20
 8000c1c:	001a      	movs	r2, r3
 8000c1e:	2100      	movs	r1, #0
 8000c20:	f003 fe7c 	bl	800491c <memset>
  if(htim->Instance==TIM3)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a14      	ldr	r2, [pc, #80]	@ (8000c7c <HAL_TIM_MspPostInit+0x70>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d121      	bne.n	8000c72 <HAL_TIM_MspPostInit+0x66>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2e:	4b14      	ldr	r3, [pc, #80]	@ (8000c80 <HAL_TIM_MspPostInit+0x74>)
 8000c30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c32:	4b13      	ldr	r3, [pc, #76]	@ (8000c80 <HAL_TIM_MspPostInit+0x74>)
 8000c34:	2102      	movs	r1, #2
 8000c36:	430a      	orrs	r2, r1
 8000c38:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000c3a:	4b11      	ldr	r3, [pc, #68]	@ (8000c80 <HAL_TIM_MspPostInit+0x74>)
 8000c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c3e:	2202      	movs	r2, #2
 8000c40:	4013      	ands	r3, r2
 8000c42:	60bb      	str	r3, [r7, #8]
 8000c44:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c46:	0021      	movs	r1, r4
 8000c48:	187b      	adds	r3, r7, r1
 8000c4a:	2220      	movs	r2, #32
 8000c4c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4e:	187b      	adds	r3, r7, r1
 8000c50:	2202      	movs	r2, #2
 8000c52:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	187b      	adds	r3, r7, r1
 8000c56:	2200      	movs	r2, #0
 8000c58:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5a:	187b      	adds	r3, r7, r1
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM3;
 8000c60:	187b      	adds	r3, r7, r1
 8000c62:	2204      	movs	r2, #4
 8000c64:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c66:	187b      	adds	r3, r7, r1
 8000c68:	4a06      	ldr	r2, [pc, #24]	@ (8000c84 <HAL_TIM_MspPostInit+0x78>)
 8000c6a:	0019      	movs	r1, r3
 8000c6c:	0010      	movs	r0, r2
 8000c6e:	f000 faa7 	bl	80011c0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000c72:	46c0      	nop			@ (mov r8, r8)
 8000c74:	46bd      	mov	sp, r7
 8000c76:	b009      	add	sp, #36	@ 0x24
 8000c78:	bd90      	pop	{r4, r7, pc}
 8000c7a:	46c0      	nop			@ (mov r8, r8)
 8000c7c:	40000400 	.word	0x40000400
 8000c80:	40021000 	.word	0x40021000
 8000c84:	50000400 	.word	0x50000400

08000c88 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c88:	b590      	push	{r4, r7, lr}
 8000c8a:	b089      	sub	sp, #36	@ 0x24
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c90:	240c      	movs	r4, #12
 8000c92:	193b      	adds	r3, r7, r4
 8000c94:	0018      	movs	r0, r3
 8000c96:	2314      	movs	r3, #20
 8000c98:	001a      	movs	r2, r3
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	f003 fe3e 	bl	800491c <memset>
  if(huart->Instance==USART2)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a1c      	ldr	r2, [pc, #112]	@ (8000d18 <HAL_UART_MspInit+0x90>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d131      	bne.n	8000d0e <HAL_UART_MspInit+0x86>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000caa:	4b1c      	ldr	r3, [pc, #112]	@ (8000d1c <HAL_UART_MspInit+0x94>)
 8000cac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000cae:	4b1b      	ldr	r3, [pc, #108]	@ (8000d1c <HAL_UART_MspInit+0x94>)
 8000cb0:	2180      	movs	r1, #128	@ 0x80
 8000cb2:	0289      	lsls	r1, r1, #10
 8000cb4:	430a      	orrs	r2, r1
 8000cb6:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb8:	4b18      	ldr	r3, [pc, #96]	@ (8000d1c <HAL_UART_MspInit+0x94>)
 8000cba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000cbc:	4b17      	ldr	r3, [pc, #92]	@ (8000d1c <HAL_UART_MspInit+0x94>)
 8000cbe:	2101      	movs	r1, #1
 8000cc0:	430a      	orrs	r2, r1
 8000cc2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000cc4:	4b15      	ldr	r3, [pc, #84]	@ (8000d1c <HAL_UART_MspInit+0x94>)
 8000cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cc8:	2201      	movs	r2, #1
 8000cca:	4013      	ands	r3, r2
 8000ccc:	60bb      	str	r3, [r7, #8]
 8000cce:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000cd0:	0021      	movs	r1, r4
 8000cd2:	187b      	adds	r3, r7, r1
 8000cd4:	220c      	movs	r2, #12
 8000cd6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd8:	187b      	adds	r3, r7, r1
 8000cda:	2202      	movs	r2, #2
 8000cdc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	187b      	adds	r3, r7, r1
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce4:	187b      	adds	r3, r7, r1
 8000ce6:	2203      	movs	r2, #3
 8000ce8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000cea:	187b      	adds	r3, r7, r1
 8000cec:	2204      	movs	r2, #4
 8000cee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf0:	187a      	adds	r2, r7, r1
 8000cf2:	23a0      	movs	r3, #160	@ 0xa0
 8000cf4:	05db      	lsls	r3, r3, #23
 8000cf6:	0011      	movs	r1, r2
 8000cf8:	0018      	movs	r0, r3
 8000cfa:	f000 fa61 	bl	80011c0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2100      	movs	r1, #0
 8000d02:	201c      	movs	r0, #28
 8000d04:	f000 f9a2 	bl	800104c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d08:	201c      	movs	r0, #28
 8000d0a:	f000 f9b4 	bl	8001076 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000d0e:	46c0      	nop			@ (mov r8, r8)
 8000d10:	46bd      	mov	sp, r7
 8000d12:	b009      	add	sp, #36	@ 0x24
 8000d14:	bd90      	pop	{r4, r7, pc}
 8000d16:	46c0      	nop			@ (mov r8, r8)
 8000d18:	40004400 	.word	0x40004400
 8000d1c:	40021000 	.word	0x40021000

08000d20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d24:	46c0      	nop			@ (mov r8, r8)
 8000d26:	e7fd      	b.n	8000d24 <NMI_Handler+0x4>

08000d28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d2c:	46c0      	nop			@ (mov r8, r8)
 8000d2e:	e7fd      	b.n	8000d2c <HardFault_Handler+0x4>

08000d30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d34:	46c0      	nop			@ (mov r8, r8)
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d3e:	46c0      	nop			@ (mov r8, r8)
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d48:	f000 f8b8 	bl	8000ebc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d4c:	46c0      	nop			@ (mov r8, r8)
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
	...

08000d54 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000d58:	4b03      	ldr	r3, [pc, #12]	@ (8000d68 <RTC_IRQHandler+0x14>)
 8000d5a:	0018      	movs	r0, r3
 8000d5c:	f001 fe62 	bl	8002a24 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8000d60:	46c0      	nop			@ (mov r8, r8)
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	46c0      	nop			@ (mov r8, r8)
 8000d68:	20000028 	.word	0x20000028

08000d6c <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PB0_RESERVED_Pin);
 8000d70:	2001      	movs	r0, #1
 8000d72:	f000 fbc1 	bl	80014f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PB1_RESERVED_Pin);
 8000d76:	2002      	movs	r0, #2
 8000d78:	f000 fbbe 	bl	80014f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000d7c:	46c0      	nop			@ (mov r8, r8)
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PB4_RESERVED_Pin);
 8000d86:	2010      	movs	r0, #16
 8000d88:	f000 fbb6 	bl	80014f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PC13_RESERVED_Pin);
 8000d8c:	2380      	movs	r3, #128	@ 0x80
 8000d8e:	019b      	lsls	r3, r3, #6
 8000d90:	0018      	movs	r0, r3
 8000d92:	f000 fbb1 	bl	80014f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000d96:	46c0      	nop			@ (mov r8, r8)
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000da0:	4b03      	ldr	r3, [pc, #12]	@ (8000db0 <USART2_IRQHandler+0x14>)
 8000da2:	0018      	movs	r0, r3
 8000da4:	f002 fd8a 	bl	80038bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000da8:	46c0      	nop			@ (mov r8, r8)
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	46c0      	nop			@ (mov r8, r8)
 8000db0:	20000124 	.word	0x20000124

08000db4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000db8:	46c0      	nop			@ (mov r8, r8)
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
	...

08000dc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000dc0:	480d      	ldr	r0, [pc, #52]	@ (8000df8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000dc2:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000dc4:	f7ff fff6 	bl	8000db4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dc8:	480c      	ldr	r0, [pc, #48]	@ (8000dfc <LoopForever+0x6>)
  ldr r1, =_edata
 8000dca:	490d      	ldr	r1, [pc, #52]	@ (8000e00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dcc:	4a0d      	ldr	r2, [pc, #52]	@ (8000e04 <LoopForever+0xe>)
  movs r3, #0
 8000dce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dd0:	e002      	b.n	8000dd8 <LoopCopyDataInit>

08000dd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dd6:	3304      	adds	r3, #4

08000dd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ddc:	d3f9      	bcc.n	8000dd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dde:	4a0a      	ldr	r2, [pc, #40]	@ (8000e08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000de0:	4c0a      	ldr	r4, [pc, #40]	@ (8000e0c <LoopForever+0x16>)
  movs r3, #0
 8000de2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de4:	e001      	b.n	8000dea <LoopFillZerobss>

08000de6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000de6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de8:	3204      	adds	r2, #4

08000dea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dec:	d3fb      	bcc.n	8000de6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dee:	f003 fd9d 	bl	800492c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000df2:	f7ff fb2b 	bl	800044c <main>

08000df6 <LoopForever>:

LoopForever:
    b LoopForever
 8000df6:	e7fe      	b.n	8000df6 <LoopForever>
   ldr   r0, =_estack
 8000df8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000dfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e00:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e04:	08004a08 	.word	0x08004a08
  ldr r2, =_sbss
 8000e08:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e0c:	200001b0 	.word	0x200001b0

08000e10 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e10:	e7fe      	b.n	8000e10 <ADC1_COMP_IRQHandler>
	...

08000e14 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e1a:	1dfb      	adds	r3, r7, #7
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000e20:	4b0b      	ldr	r3, [pc, #44]	@ (8000e50 <HAL_Init+0x3c>)
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	4b0a      	ldr	r3, [pc, #40]	@ (8000e50 <HAL_Init+0x3c>)
 8000e26:	2140      	movs	r1, #64	@ 0x40
 8000e28:	430a      	orrs	r2, r1
 8000e2a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	f000 f811 	bl	8000e54 <HAL_InitTick>
 8000e32:	1e03      	subs	r3, r0, #0
 8000e34:	d003      	beq.n	8000e3e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000e36:	1dfb      	adds	r3, r7, #7
 8000e38:	2201      	movs	r2, #1
 8000e3a:	701a      	strb	r2, [r3, #0]
 8000e3c:	e001      	b.n	8000e42 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e3e:	f7ff fe1d 	bl	8000a7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e42:	1dfb      	adds	r3, r7, #7
 8000e44:	781b      	ldrb	r3, [r3, #0]
}
 8000e46:	0018      	movs	r0, r3
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	b002      	add	sp, #8
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	46c0      	nop			@ (mov r8, r8)
 8000e50:	40022000 	.word	0x40022000

08000e54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e54:	b590      	push	{r4, r7, lr}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e5c:	4b14      	ldr	r3, [pc, #80]	@ (8000eb0 <HAL_InitTick+0x5c>)
 8000e5e:	681c      	ldr	r4, [r3, #0]
 8000e60:	4b14      	ldr	r3, [pc, #80]	@ (8000eb4 <HAL_InitTick+0x60>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	0019      	movs	r1, r3
 8000e66:	23fa      	movs	r3, #250	@ 0xfa
 8000e68:	0098      	lsls	r0, r3, #2
 8000e6a:	f7ff f94d 	bl	8000108 <__udivsi3>
 8000e6e:	0003      	movs	r3, r0
 8000e70:	0019      	movs	r1, r3
 8000e72:	0020      	movs	r0, r4
 8000e74:	f7ff f948 	bl	8000108 <__udivsi3>
 8000e78:	0003      	movs	r3, r0
 8000e7a:	0018      	movs	r0, r3
 8000e7c:	f000 f90b 	bl	8001096 <HAL_SYSTICK_Config>
 8000e80:	1e03      	subs	r3, r0, #0
 8000e82:	d001      	beq.n	8000e88 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000e84:	2301      	movs	r3, #1
 8000e86:	e00f      	b.n	8000ea8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2b03      	cmp	r3, #3
 8000e8c:	d80b      	bhi.n	8000ea6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e8e:	6879      	ldr	r1, [r7, #4]
 8000e90:	2301      	movs	r3, #1
 8000e92:	425b      	negs	r3, r3
 8000e94:	2200      	movs	r2, #0
 8000e96:	0018      	movs	r0, r3
 8000e98:	f000 f8d8 	bl	800104c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e9c:	4b06      	ldr	r3, [pc, #24]	@ (8000eb8 <HAL_InitTick+0x64>)
 8000e9e:	687a      	ldr	r2, [r7, #4]
 8000ea0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	e000      	b.n	8000ea8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
}
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	b003      	add	sp, #12
 8000eae:	bd90      	pop	{r4, r7, pc}
 8000eb0:	20000000 	.word	0x20000000
 8000eb4:	20000008 	.word	0x20000008
 8000eb8:	20000004 	.word	0x20000004

08000ebc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ec0:	4b05      	ldr	r3, [pc, #20]	@ (8000ed8 <HAL_IncTick+0x1c>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	001a      	movs	r2, r3
 8000ec6:	4b05      	ldr	r3, [pc, #20]	@ (8000edc <HAL_IncTick+0x20>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	18d2      	adds	r2, r2, r3
 8000ecc:	4b03      	ldr	r3, [pc, #12]	@ (8000edc <HAL_IncTick+0x20>)
 8000ece:	601a      	str	r2, [r3, #0]
}
 8000ed0:	46c0      	nop			@ (mov r8, r8)
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	46c0      	nop			@ (mov r8, r8)
 8000ed8:	20000008 	.word	0x20000008
 8000edc:	200001ac 	.word	0x200001ac

08000ee0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee4:	4b02      	ldr	r3, [pc, #8]	@ (8000ef0 <HAL_GetTick+0x10>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
}
 8000ee8:	0018      	movs	r0, r3
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	46c0      	nop			@ (mov r8, r8)
 8000ef0:	200001ac 	.word	0x200001ac

08000ef4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	0002      	movs	r2, r0
 8000efc:	1dfb      	adds	r3, r7, #7
 8000efe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f00:	1dfb      	adds	r3, r7, #7
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f06:	d809      	bhi.n	8000f1c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f08:	1dfb      	adds	r3, r7, #7
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	001a      	movs	r2, r3
 8000f0e:	231f      	movs	r3, #31
 8000f10:	401a      	ands	r2, r3
 8000f12:	4b04      	ldr	r3, [pc, #16]	@ (8000f24 <__NVIC_EnableIRQ+0x30>)
 8000f14:	2101      	movs	r1, #1
 8000f16:	4091      	lsls	r1, r2
 8000f18:	000a      	movs	r2, r1
 8000f1a:	601a      	str	r2, [r3, #0]
  }
}
 8000f1c:	46c0      	nop			@ (mov r8, r8)
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	b002      	add	sp, #8
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	e000e100 	.word	0xe000e100

08000f28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f28:	b590      	push	{r4, r7, lr}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	0002      	movs	r2, r0
 8000f30:	6039      	str	r1, [r7, #0]
 8000f32:	1dfb      	adds	r3, r7, #7
 8000f34:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f36:	1dfb      	adds	r3, r7, #7
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f3c:	d828      	bhi.n	8000f90 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f3e:	4a2f      	ldr	r2, [pc, #188]	@ (8000ffc <__NVIC_SetPriority+0xd4>)
 8000f40:	1dfb      	adds	r3, r7, #7
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	b25b      	sxtb	r3, r3
 8000f46:	089b      	lsrs	r3, r3, #2
 8000f48:	33c0      	adds	r3, #192	@ 0xc0
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	589b      	ldr	r3, [r3, r2]
 8000f4e:	1dfa      	adds	r2, r7, #7
 8000f50:	7812      	ldrb	r2, [r2, #0]
 8000f52:	0011      	movs	r1, r2
 8000f54:	2203      	movs	r2, #3
 8000f56:	400a      	ands	r2, r1
 8000f58:	00d2      	lsls	r2, r2, #3
 8000f5a:	21ff      	movs	r1, #255	@ 0xff
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	000a      	movs	r2, r1
 8000f60:	43d2      	mvns	r2, r2
 8000f62:	401a      	ands	r2, r3
 8000f64:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	019b      	lsls	r3, r3, #6
 8000f6a:	22ff      	movs	r2, #255	@ 0xff
 8000f6c:	401a      	ands	r2, r3
 8000f6e:	1dfb      	adds	r3, r7, #7
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	0018      	movs	r0, r3
 8000f74:	2303      	movs	r3, #3
 8000f76:	4003      	ands	r3, r0
 8000f78:	00db      	lsls	r3, r3, #3
 8000f7a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f7c:	481f      	ldr	r0, [pc, #124]	@ (8000ffc <__NVIC_SetPriority+0xd4>)
 8000f7e:	1dfb      	adds	r3, r7, #7
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	b25b      	sxtb	r3, r3
 8000f84:	089b      	lsrs	r3, r3, #2
 8000f86:	430a      	orrs	r2, r1
 8000f88:	33c0      	adds	r3, #192	@ 0xc0
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f8e:	e031      	b.n	8000ff4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f90:	4a1b      	ldr	r2, [pc, #108]	@ (8001000 <__NVIC_SetPriority+0xd8>)
 8000f92:	1dfb      	adds	r3, r7, #7
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	0019      	movs	r1, r3
 8000f98:	230f      	movs	r3, #15
 8000f9a:	400b      	ands	r3, r1
 8000f9c:	3b08      	subs	r3, #8
 8000f9e:	089b      	lsrs	r3, r3, #2
 8000fa0:	3306      	adds	r3, #6
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	18d3      	adds	r3, r2, r3
 8000fa6:	3304      	adds	r3, #4
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	1dfa      	adds	r2, r7, #7
 8000fac:	7812      	ldrb	r2, [r2, #0]
 8000fae:	0011      	movs	r1, r2
 8000fb0:	2203      	movs	r2, #3
 8000fb2:	400a      	ands	r2, r1
 8000fb4:	00d2      	lsls	r2, r2, #3
 8000fb6:	21ff      	movs	r1, #255	@ 0xff
 8000fb8:	4091      	lsls	r1, r2
 8000fba:	000a      	movs	r2, r1
 8000fbc:	43d2      	mvns	r2, r2
 8000fbe:	401a      	ands	r2, r3
 8000fc0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	019b      	lsls	r3, r3, #6
 8000fc6:	22ff      	movs	r2, #255	@ 0xff
 8000fc8:	401a      	ands	r2, r3
 8000fca:	1dfb      	adds	r3, r7, #7
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	0018      	movs	r0, r3
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	4003      	ands	r3, r0
 8000fd4:	00db      	lsls	r3, r3, #3
 8000fd6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fd8:	4809      	ldr	r0, [pc, #36]	@ (8001000 <__NVIC_SetPriority+0xd8>)
 8000fda:	1dfb      	adds	r3, r7, #7
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	001c      	movs	r4, r3
 8000fe0:	230f      	movs	r3, #15
 8000fe2:	4023      	ands	r3, r4
 8000fe4:	3b08      	subs	r3, #8
 8000fe6:	089b      	lsrs	r3, r3, #2
 8000fe8:	430a      	orrs	r2, r1
 8000fea:	3306      	adds	r3, #6
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	18c3      	adds	r3, r0, r3
 8000ff0:	3304      	adds	r3, #4
 8000ff2:	601a      	str	r2, [r3, #0]
}
 8000ff4:	46c0      	nop			@ (mov r8, r8)
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	b003      	add	sp, #12
 8000ffa:	bd90      	pop	{r4, r7, pc}
 8000ffc:	e000e100 	.word	0xe000e100
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	1e5a      	subs	r2, r3, #1
 8001010:	2380      	movs	r3, #128	@ 0x80
 8001012:	045b      	lsls	r3, r3, #17
 8001014:	429a      	cmp	r2, r3
 8001016:	d301      	bcc.n	800101c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001018:	2301      	movs	r3, #1
 800101a:	e010      	b.n	800103e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800101c:	4b0a      	ldr	r3, [pc, #40]	@ (8001048 <SysTick_Config+0x44>)
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	3a01      	subs	r2, #1
 8001022:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001024:	2301      	movs	r3, #1
 8001026:	425b      	negs	r3, r3
 8001028:	2103      	movs	r1, #3
 800102a:	0018      	movs	r0, r3
 800102c:	f7ff ff7c 	bl	8000f28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001030:	4b05      	ldr	r3, [pc, #20]	@ (8001048 <SysTick_Config+0x44>)
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001036:	4b04      	ldr	r3, [pc, #16]	@ (8001048 <SysTick_Config+0x44>)
 8001038:	2207      	movs	r2, #7
 800103a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800103c:	2300      	movs	r3, #0
}
 800103e:	0018      	movs	r0, r3
 8001040:	46bd      	mov	sp, r7
 8001042:	b002      	add	sp, #8
 8001044:	bd80      	pop	{r7, pc}
 8001046:	46c0      	nop			@ (mov r8, r8)
 8001048:	e000e010 	.word	0xe000e010

0800104c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	60b9      	str	r1, [r7, #8]
 8001054:	607a      	str	r2, [r7, #4]
 8001056:	210f      	movs	r1, #15
 8001058:	187b      	adds	r3, r7, r1
 800105a:	1c02      	adds	r2, r0, #0
 800105c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800105e:	68ba      	ldr	r2, [r7, #8]
 8001060:	187b      	adds	r3, r7, r1
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	b25b      	sxtb	r3, r3
 8001066:	0011      	movs	r1, r2
 8001068:	0018      	movs	r0, r3
 800106a:	f7ff ff5d 	bl	8000f28 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 800106e:	46c0      	nop			@ (mov r8, r8)
 8001070:	46bd      	mov	sp, r7
 8001072:	b004      	add	sp, #16
 8001074:	bd80      	pop	{r7, pc}

08001076 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b082      	sub	sp, #8
 800107a:	af00      	add	r7, sp, #0
 800107c:	0002      	movs	r2, r0
 800107e:	1dfb      	adds	r3, r7, #7
 8001080:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001082:	1dfb      	adds	r3, r7, #7
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	b25b      	sxtb	r3, r3
 8001088:	0018      	movs	r0, r3
 800108a:	f7ff ff33 	bl	8000ef4 <__NVIC_EnableIRQ>
}
 800108e:	46c0      	nop			@ (mov r8, r8)
 8001090:	46bd      	mov	sp, r7
 8001092:	b002      	add	sp, #8
 8001094:	bd80      	pop	{r7, pc}

08001096 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b082      	sub	sp, #8
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	0018      	movs	r0, r3
 80010a2:	f7ff ffaf 	bl	8001004 <SysTick_Config>
 80010a6:	0003      	movs	r3, r0
}
 80010a8:	0018      	movs	r0, r3
 80010aa:	46bd      	mov	sp, r7
 80010ac:	b002      	add	sp, #8
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010b8:	230f      	movs	r3, #15
 80010ba:	18fb      	adds	r3, r7, r3
 80010bc:	2200      	movs	r2, #0
 80010be:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2225      	movs	r2, #37	@ 0x25
 80010c4:	5c9b      	ldrb	r3, [r3, r2]
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d008      	beq.n	80010de <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2204      	movs	r2, #4
 80010d0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2224      	movs	r2, #36	@ 0x24
 80010d6:	2100      	movs	r1, #0
 80010d8:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e024      	b.n	8001128 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	210e      	movs	r1, #14
 80010ea:	438a      	bics	r2, r1
 80010ec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2101      	movs	r1, #1
 80010fa:	438a      	bics	r2, r1
 80010fc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001102:	221c      	movs	r2, #28
 8001104:	401a      	ands	r2, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800110a:	2101      	movs	r1, #1
 800110c:	4091      	lsls	r1, r2
 800110e:	000a      	movs	r2, r1
 8001110:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2225      	movs	r2, #37	@ 0x25
 8001116:	2101      	movs	r1, #1
 8001118:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2224      	movs	r2, #36	@ 0x24
 800111e:	2100      	movs	r1, #0
 8001120:	5499      	strb	r1, [r3, r2]

    return status;
 8001122:	230f      	movs	r3, #15
 8001124:	18fb      	adds	r3, r7, r3
 8001126:	781b      	ldrb	r3, [r3, #0]
  }
}
 8001128:	0018      	movs	r0, r3
 800112a:	46bd      	mov	sp, r7
 800112c:	b004      	add	sp, #16
 800112e:	bd80      	pop	{r7, pc}

08001130 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001138:	210f      	movs	r1, #15
 800113a:	187b      	adds	r3, r7, r1
 800113c:	2200      	movs	r2, #0
 800113e:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2225      	movs	r2, #37	@ 0x25
 8001144:	5c9b      	ldrb	r3, [r3, r2]
 8001146:	b2db      	uxtb	r3, r3
 8001148:	2b02      	cmp	r3, #2
 800114a:	d006      	beq.n	800115a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2204      	movs	r2, #4
 8001150:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001152:	187b      	adds	r3, r7, r1
 8001154:	2201      	movs	r2, #1
 8001156:	701a      	strb	r2, [r3, #0]
 8001158:	e02a      	b.n	80011b0 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	210e      	movs	r1, #14
 8001166:	438a      	bics	r2, r1
 8001168:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2101      	movs	r1, #1
 8001176:	438a      	bics	r2, r1
 8001178:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800117e:	221c      	movs	r2, #28
 8001180:	401a      	ands	r2, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001186:	2101      	movs	r1, #1
 8001188:	4091      	lsls	r1, r2
 800118a:	000a      	movs	r2, r1
 800118c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2225      	movs	r2, #37	@ 0x25
 8001192:	2101      	movs	r1, #1
 8001194:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2224      	movs	r2, #36	@ 0x24
 800119a:	2100      	movs	r1, #0
 800119c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d004      	beq.n	80011b0 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	0010      	movs	r0, r2
 80011ae:	4798      	blx	r3
    }
  }
  return status;
 80011b0:	230f      	movs	r3, #15
 80011b2:	18fb      	adds	r3, r7, r3
 80011b4:	781b      	ldrb	r3, [r3, #0]
}
 80011b6:	0018      	movs	r0, r3
 80011b8:	46bd      	mov	sp, r7
 80011ba:	b004      	add	sp, #16
 80011bc:	bd80      	pop	{r7, pc}
	...

080011c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80011ca:	2300      	movs	r3, #0
 80011cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011ce:	2300      	movs	r3, #0
 80011d0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80011d2:	2300      	movs	r3, #0
 80011d4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80011d6:	e155      	b.n	8001484 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2101      	movs	r1, #1
 80011de:	697a      	ldr	r2, [r7, #20]
 80011e0:	4091      	lsls	r1, r2
 80011e2:	000a      	movs	r2, r1
 80011e4:	4013      	ands	r3, r2
 80011e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d100      	bne.n	80011f0 <HAL_GPIO_Init+0x30>
 80011ee:	e146      	b.n	800147e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	2203      	movs	r2, #3
 80011f6:	4013      	ands	r3, r2
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d005      	beq.n	8001208 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	2203      	movs	r2, #3
 8001202:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001204:	2b02      	cmp	r3, #2
 8001206:	d130      	bne.n	800126a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	2203      	movs	r2, #3
 8001214:	409a      	lsls	r2, r3
 8001216:	0013      	movs	r3, r2
 8001218:	43da      	mvns	r2, r3
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	4013      	ands	r3, r2
 800121e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	68da      	ldr	r2, [r3, #12]
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	409a      	lsls	r2, r3
 800122a:	0013      	movs	r3, r2
 800122c:	693a      	ldr	r2, [r7, #16]
 800122e:	4313      	orrs	r3, r2
 8001230:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800123e:	2201      	movs	r2, #1
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	409a      	lsls	r2, r3
 8001244:	0013      	movs	r3, r2
 8001246:	43da      	mvns	r2, r3
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	4013      	ands	r3, r2
 800124c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	091b      	lsrs	r3, r3, #4
 8001254:	2201      	movs	r2, #1
 8001256:	401a      	ands	r2, r3
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	409a      	lsls	r2, r3
 800125c:	0013      	movs	r3, r2
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	4313      	orrs	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	2203      	movs	r2, #3
 8001270:	4013      	ands	r3, r2
 8001272:	2b03      	cmp	r3, #3
 8001274:	d017      	beq.n	80012a6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	68db      	ldr	r3, [r3, #12]
 800127a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	2203      	movs	r2, #3
 8001282:	409a      	lsls	r2, r3
 8001284:	0013      	movs	r3, r2
 8001286:	43da      	mvns	r2, r3
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	4013      	ands	r3, r2
 800128c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	689a      	ldr	r2, [r3, #8]
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	409a      	lsls	r2, r3
 8001298:	0013      	movs	r3, r2
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	4313      	orrs	r3, r2
 800129e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	2203      	movs	r2, #3
 80012ac:	4013      	ands	r3, r2
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d123      	bne.n	80012fa <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	08da      	lsrs	r2, r3, #3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	3208      	adds	r2, #8
 80012ba:	0092      	lsls	r2, r2, #2
 80012bc:	58d3      	ldr	r3, [r2, r3]
 80012be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	2207      	movs	r2, #7
 80012c4:	4013      	ands	r3, r2
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	220f      	movs	r2, #15
 80012ca:	409a      	lsls	r2, r3
 80012cc:	0013      	movs	r3, r2
 80012ce:	43da      	mvns	r2, r3
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	4013      	ands	r3, r2
 80012d4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	691a      	ldr	r2, [r3, #16]
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	2107      	movs	r1, #7
 80012de:	400b      	ands	r3, r1
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	409a      	lsls	r2, r3
 80012e4:	0013      	movs	r3, r2
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	08da      	lsrs	r2, r3, #3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	3208      	adds	r2, #8
 80012f4:	0092      	lsls	r2, r2, #2
 80012f6:	6939      	ldr	r1, [r7, #16]
 80012f8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	2203      	movs	r2, #3
 8001306:	409a      	lsls	r2, r3
 8001308:	0013      	movs	r3, r2
 800130a:	43da      	mvns	r2, r3
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	4013      	ands	r3, r2
 8001310:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	2203      	movs	r2, #3
 8001318:	401a      	ands	r2, r3
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	409a      	lsls	r2, r3
 8001320:	0013      	movs	r3, r2
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	4313      	orrs	r3, r2
 8001326:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685a      	ldr	r2, [r3, #4]
 8001332:	23c0      	movs	r3, #192	@ 0xc0
 8001334:	029b      	lsls	r3, r3, #10
 8001336:	4013      	ands	r3, r2
 8001338:	d100      	bne.n	800133c <HAL_GPIO_Init+0x17c>
 800133a:	e0a0      	b.n	800147e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800133c:	4b57      	ldr	r3, [pc, #348]	@ (800149c <HAL_GPIO_Init+0x2dc>)
 800133e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001340:	4b56      	ldr	r3, [pc, #344]	@ (800149c <HAL_GPIO_Init+0x2dc>)
 8001342:	2101      	movs	r1, #1
 8001344:	430a      	orrs	r2, r1
 8001346:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001348:	4a55      	ldr	r2, [pc, #340]	@ (80014a0 <HAL_GPIO_Init+0x2e0>)
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	089b      	lsrs	r3, r3, #2
 800134e:	3302      	adds	r3, #2
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	589b      	ldr	r3, [r3, r2]
 8001354:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	2203      	movs	r2, #3
 800135a:	4013      	ands	r3, r2
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	220f      	movs	r2, #15
 8001360:	409a      	lsls	r2, r3
 8001362:	0013      	movs	r3, r2
 8001364:	43da      	mvns	r2, r3
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	4013      	ands	r3, r2
 800136a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	23a0      	movs	r3, #160	@ 0xa0
 8001370:	05db      	lsls	r3, r3, #23
 8001372:	429a      	cmp	r2, r3
 8001374:	d01f      	beq.n	80013b6 <HAL_GPIO_Init+0x1f6>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a4a      	ldr	r2, [pc, #296]	@ (80014a4 <HAL_GPIO_Init+0x2e4>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d019      	beq.n	80013b2 <HAL_GPIO_Init+0x1f2>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a49      	ldr	r2, [pc, #292]	@ (80014a8 <HAL_GPIO_Init+0x2e8>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d013      	beq.n	80013ae <HAL_GPIO_Init+0x1ee>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a48      	ldr	r2, [pc, #288]	@ (80014ac <HAL_GPIO_Init+0x2ec>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d00d      	beq.n	80013aa <HAL_GPIO_Init+0x1ea>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a47      	ldr	r2, [pc, #284]	@ (80014b0 <HAL_GPIO_Init+0x2f0>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d007      	beq.n	80013a6 <HAL_GPIO_Init+0x1e6>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a46      	ldr	r2, [pc, #280]	@ (80014b4 <HAL_GPIO_Init+0x2f4>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d101      	bne.n	80013a2 <HAL_GPIO_Init+0x1e2>
 800139e:	2305      	movs	r3, #5
 80013a0:	e00a      	b.n	80013b8 <HAL_GPIO_Init+0x1f8>
 80013a2:	2306      	movs	r3, #6
 80013a4:	e008      	b.n	80013b8 <HAL_GPIO_Init+0x1f8>
 80013a6:	2304      	movs	r3, #4
 80013a8:	e006      	b.n	80013b8 <HAL_GPIO_Init+0x1f8>
 80013aa:	2303      	movs	r3, #3
 80013ac:	e004      	b.n	80013b8 <HAL_GPIO_Init+0x1f8>
 80013ae:	2302      	movs	r3, #2
 80013b0:	e002      	b.n	80013b8 <HAL_GPIO_Init+0x1f8>
 80013b2:	2301      	movs	r3, #1
 80013b4:	e000      	b.n	80013b8 <HAL_GPIO_Init+0x1f8>
 80013b6:	2300      	movs	r3, #0
 80013b8:	697a      	ldr	r2, [r7, #20]
 80013ba:	2103      	movs	r1, #3
 80013bc:	400a      	ands	r2, r1
 80013be:	0092      	lsls	r2, r2, #2
 80013c0:	4093      	lsls	r3, r2
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013c8:	4935      	ldr	r1, [pc, #212]	@ (80014a0 <HAL_GPIO_Init+0x2e0>)
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	089b      	lsrs	r3, r3, #2
 80013ce:	3302      	adds	r3, #2
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013d6:	4b38      	ldr	r3, [pc, #224]	@ (80014b8 <HAL_GPIO_Init+0x2f8>)
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	43da      	mvns	r2, r3
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	4013      	ands	r3, r2
 80013e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685a      	ldr	r2, [r3, #4]
 80013ea:	2380      	movs	r3, #128	@ 0x80
 80013ec:	035b      	lsls	r3, r3, #13
 80013ee:	4013      	ands	r3, r2
 80013f0:	d003      	beq.n	80013fa <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80013fa:	4b2f      	ldr	r3, [pc, #188]	@ (80014b8 <HAL_GPIO_Init+0x2f8>)
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001400:	4b2d      	ldr	r3, [pc, #180]	@ (80014b8 <HAL_GPIO_Init+0x2f8>)
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	43da      	mvns	r2, r3
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	4013      	ands	r3, r2
 800140e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685a      	ldr	r2, [r3, #4]
 8001414:	2380      	movs	r3, #128	@ 0x80
 8001416:	039b      	lsls	r3, r3, #14
 8001418:	4013      	ands	r3, r2
 800141a:	d003      	beq.n	8001424 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800141c:	693a      	ldr	r2, [r7, #16]
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	4313      	orrs	r3, r2
 8001422:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001424:	4b24      	ldr	r3, [pc, #144]	@ (80014b8 <HAL_GPIO_Init+0x2f8>)
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800142a:	4b23      	ldr	r3, [pc, #140]	@ (80014b8 <HAL_GPIO_Init+0x2f8>)
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	43da      	mvns	r2, r3
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	4013      	ands	r3, r2
 8001438:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685a      	ldr	r2, [r3, #4]
 800143e:	2380      	movs	r3, #128	@ 0x80
 8001440:	029b      	lsls	r3, r3, #10
 8001442:	4013      	ands	r3, r2
 8001444:	d003      	beq.n	800144e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	4313      	orrs	r3, r2
 800144c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800144e:	4b1a      	ldr	r3, [pc, #104]	@ (80014b8 <HAL_GPIO_Init+0x2f8>)
 8001450:	693a      	ldr	r2, [r7, #16]
 8001452:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001454:	4b18      	ldr	r3, [pc, #96]	@ (80014b8 <HAL_GPIO_Init+0x2f8>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	43da      	mvns	r2, r3
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	4013      	ands	r3, r2
 8001462:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685a      	ldr	r2, [r3, #4]
 8001468:	2380      	movs	r3, #128	@ 0x80
 800146a:	025b      	lsls	r3, r3, #9
 800146c:	4013      	ands	r3, r2
 800146e:	d003      	beq.n	8001478 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	4313      	orrs	r3, r2
 8001476:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001478:	4b0f      	ldr	r3, [pc, #60]	@ (80014b8 <HAL_GPIO_Init+0x2f8>)
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	3301      	adds	r3, #1
 8001482:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	40da      	lsrs	r2, r3
 800148c:	1e13      	subs	r3, r2, #0
 800148e:	d000      	beq.n	8001492 <HAL_GPIO_Init+0x2d2>
 8001490:	e6a2      	b.n	80011d8 <HAL_GPIO_Init+0x18>
  }
}
 8001492:	46c0      	nop			@ (mov r8, r8)
 8001494:	46c0      	nop			@ (mov r8, r8)
 8001496:	46bd      	mov	sp, r7
 8001498:	b006      	add	sp, #24
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40021000 	.word	0x40021000
 80014a0:	40010000 	.word	0x40010000
 80014a4:	50000400 	.word	0x50000400
 80014a8:	50000800 	.word	0x50000800
 80014ac:	50000c00 	.word	0x50000c00
 80014b0:	50001000 	.word	0x50001000
 80014b4:	50001c00 	.word	0x50001c00
 80014b8:	40010400 	.word	0x40010400

080014bc <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	0008      	movs	r0, r1
 80014c6:	0011      	movs	r1, r2
 80014c8:	1cbb      	adds	r3, r7, #2
 80014ca:	1c02      	adds	r2, r0, #0
 80014cc:	801a      	strh	r2, [r3, #0]
 80014ce:	1c7b      	adds	r3, r7, #1
 80014d0:	1c0a      	adds	r2, r1, #0
 80014d2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014d4:	1c7b      	adds	r3, r7, #1
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d004      	beq.n	80014e6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014dc:	1cbb      	adds	r3, r7, #2
 80014de:	881a      	ldrh	r2, [r3, #0]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80014e4:	e003      	b.n	80014ee <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80014e6:	1cbb      	adds	r3, r7, #2
 80014e8:	881a      	ldrh	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80014ee:	46c0      	nop			@ (mov r8, r8)
 80014f0:	46bd      	mov	sp, r7
 80014f2:	b002      	add	sp, #8
 80014f4:	bd80      	pop	{r7, pc}
	...

080014f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	0002      	movs	r2, r0
 8001500:	1dbb      	adds	r3, r7, #6
 8001502:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001504:	4b09      	ldr	r3, [pc, #36]	@ (800152c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001506:	695b      	ldr	r3, [r3, #20]
 8001508:	1dba      	adds	r2, r7, #6
 800150a:	8812      	ldrh	r2, [r2, #0]
 800150c:	4013      	ands	r3, r2
 800150e:	d008      	beq.n	8001522 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001510:	4b06      	ldr	r3, [pc, #24]	@ (800152c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001512:	1dba      	adds	r2, r7, #6
 8001514:	8812      	ldrh	r2, [r2, #0]
 8001516:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001518:	1dbb      	adds	r3, r7, #6
 800151a:	881b      	ldrh	r3, [r3, #0]
 800151c:	0018      	movs	r0, r3
 800151e:	f000 f807 	bl	8001530 <HAL_GPIO_EXTI_Callback>
  }
}
 8001522:	46c0      	nop			@ (mov r8, r8)
 8001524:	46bd      	mov	sp, r7
 8001526:	b002      	add	sp, #8
 8001528:	bd80      	pop	{r7, pc}
 800152a:	46c0      	nop			@ (mov r8, r8)
 800152c:	40010400 	.word	0x40010400

08001530 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	0002      	movs	r2, r0
 8001538:	1dbb      	adds	r3, r7, #6
 800153a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800153c:	46c0      	nop			@ (mov r8, r8)
 800153e:	46bd      	mov	sp, r7
 8001540:	b002      	add	sp, #8
 8001542:	bd80      	pop	{r7, pc}

08001544 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001544:	b5b0      	push	{r4, r5, r7, lr}
 8001546:	b08a      	sub	sp, #40	@ 0x28
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d102      	bne.n	8001558 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	f000 fbbf 	bl	8001cd6 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001558:	4bc9      	ldr	r3, [pc, #804]	@ (8001880 <HAL_RCC_OscConfig+0x33c>)
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	220c      	movs	r2, #12
 800155e:	4013      	ands	r3, r2
 8001560:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001562:	4bc7      	ldr	r3, [pc, #796]	@ (8001880 <HAL_RCC_OscConfig+0x33c>)
 8001564:	68da      	ldr	r2, [r3, #12]
 8001566:	2380      	movs	r3, #128	@ 0x80
 8001568:	025b      	lsls	r3, r3, #9
 800156a:	4013      	ands	r3, r2
 800156c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2201      	movs	r2, #1
 8001574:	4013      	ands	r3, r2
 8001576:	d100      	bne.n	800157a <HAL_RCC_OscConfig+0x36>
 8001578:	e07e      	b.n	8001678 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	2b08      	cmp	r3, #8
 800157e:	d007      	beq.n	8001590 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	2b0c      	cmp	r3, #12
 8001584:	d112      	bne.n	80015ac <HAL_RCC_OscConfig+0x68>
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	2380      	movs	r3, #128	@ 0x80
 800158a:	025b      	lsls	r3, r3, #9
 800158c:	429a      	cmp	r2, r3
 800158e:	d10d      	bne.n	80015ac <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001590:	4bbb      	ldr	r3, [pc, #748]	@ (8001880 <HAL_RCC_OscConfig+0x33c>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	2380      	movs	r3, #128	@ 0x80
 8001596:	029b      	lsls	r3, r3, #10
 8001598:	4013      	ands	r3, r2
 800159a:	d100      	bne.n	800159e <HAL_RCC_OscConfig+0x5a>
 800159c:	e06b      	b.n	8001676 <HAL_RCC_OscConfig+0x132>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d167      	bne.n	8001676 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	f000 fb95 	bl	8001cd6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	685a      	ldr	r2, [r3, #4]
 80015b0:	2380      	movs	r3, #128	@ 0x80
 80015b2:	025b      	lsls	r3, r3, #9
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d107      	bne.n	80015c8 <HAL_RCC_OscConfig+0x84>
 80015b8:	4bb1      	ldr	r3, [pc, #708]	@ (8001880 <HAL_RCC_OscConfig+0x33c>)
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	4bb0      	ldr	r3, [pc, #704]	@ (8001880 <HAL_RCC_OscConfig+0x33c>)
 80015be:	2180      	movs	r1, #128	@ 0x80
 80015c0:	0249      	lsls	r1, r1, #9
 80015c2:	430a      	orrs	r2, r1
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	e027      	b.n	8001618 <HAL_RCC_OscConfig+0xd4>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685a      	ldr	r2, [r3, #4]
 80015cc:	23a0      	movs	r3, #160	@ 0xa0
 80015ce:	02db      	lsls	r3, r3, #11
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d10e      	bne.n	80015f2 <HAL_RCC_OscConfig+0xae>
 80015d4:	4baa      	ldr	r3, [pc, #680]	@ (8001880 <HAL_RCC_OscConfig+0x33c>)
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	4ba9      	ldr	r3, [pc, #676]	@ (8001880 <HAL_RCC_OscConfig+0x33c>)
 80015da:	2180      	movs	r1, #128	@ 0x80
 80015dc:	02c9      	lsls	r1, r1, #11
 80015de:	430a      	orrs	r2, r1
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	4ba7      	ldr	r3, [pc, #668]	@ (8001880 <HAL_RCC_OscConfig+0x33c>)
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	4ba6      	ldr	r3, [pc, #664]	@ (8001880 <HAL_RCC_OscConfig+0x33c>)
 80015e8:	2180      	movs	r1, #128	@ 0x80
 80015ea:	0249      	lsls	r1, r1, #9
 80015ec:	430a      	orrs	r2, r1
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	e012      	b.n	8001618 <HAL_RCC_OscConfig+0xd4>
 80015f2:	4ba3      	ldr	r3, [pc, #652]	@ (8001880 <HAL_RCC_OscConfig+0x33c>)
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	4ba2      	ldr	r3, [pc, #648]	@ (8001880 <HAL_RCC_OscConfig+0x33c>)
 80015f8:	49a2      	ldr	r1, [pc, #648]	@ (8001884 <HAL_RCC_OscConfig+0x340>)
 80015fa:	400a      	ands	r2, r1
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	4ba0      	ldr	r3, [pc, #640]	@ (8001880 <HAL_RCC_OscConfig+0x33c>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	2380      	movs	r3, #128	@ 0x80
 8001604:	025b      	lsls	r3, r3, #9
 8001606:	4013      	ands	r3, r2
 8001608:	60fb      	str	r3, [r7, #12]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	4b9c      	ldr	r3, [pc, #624]	@ (8001880 <HAL_RCC_OscConfig+0x33c>)
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	4b9b      	ldr	r3, [pc, #620]	@ (8001880 <HAL_RCC_OscConfig+0x33c>)
 8001612:	499d      	ldr	r1, [pc, #628]	@ (8001888 <HAL_RCC_OscConfig+0x344>)
 8001614:	400a      	ands	r2, r1
 8001616:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d015      	beq.n	800164c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001620:	f7ff fc5e 	bl	8000ee0 <HAL_GetTick>
 8001624:	0003      	movs	r3, r0
 8001626:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001628:	e009      	b.n	800163e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800162a:	f7ff fc59 	bl	8000ee0 <HAL_GetTick>
 800162e:	0002      	movs	r2, r0
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	2b64      	cmp	r3, #100	@ 0x64
 8001636:	d902      	bls.n	800163e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	f000 fb4c 	bl	8001cd6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800163e:	4b90      	ldr	r3, [pc, #576]	@ (8001880 <HAL_RCC_OscConfig+0x33c>)
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	2380      	movs	r3, #128	@ 0x80
 8001644:	029b      	lsls	r3, r3, #10
 8001646:	4013      	ands	r3, r2
 8001648:	d0ef      	beq.n	800162a <HAL_RCC_OscConfig+0xe6>
 800164a:	e015      	b.n	8001678 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800164c:	f7ff fc48 	bl	8000ee0 <HAL_GetTick>
 8001650:	0003      	movs	r3, r0
 8001652:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001654:	e008      	b.n	8001668 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001656:	f7ff fc43 	bl	8000ee0 <HAL_GetTick>
 800165a:	0002      	movs	r2, r0
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	2b64      	cmp	r3, #100	@ 0x64
 8001662:	d901      	bls.n	8001668 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e336      	b.n	8001cd6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001668:	4b85      	ldr	r3, [pc, #532]	@ (8001880 <HAL_RCC_OscConfig+0x33c>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	2380      	movs	r3, #128	@ 0x80
 800166e:	029b      	lsls	r3, r3, #10
 8001670:	4013      	ands	r3, r2
 8001672:	d1f0      	bne.n	8001656 <HAL_RCC_OscConfig+0x112>
 8001674:	e000      	b.n	8001678 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001676:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2202      	movs	r2, #2
 800167e:	4013      	ands	r3, r2
 8001680:	d100      	bne.n	8001684 <HAL_RCC_OscConfig+0x140>
 8001682:	e099      	b.n	80017b8 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800168a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800168c:	2220      	movs	r2, #32
 800168e:	4013      	ands	r3, r2
 8001690:	d009      	beq.n	80016a6 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001692:	4b7b      	ldr	r3, [pc, #492]	@ (8001880 <HAL_RCC_OscConfig+0x33c>)
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	4b7a      	ldr	r3, [pc, #488]	@ (8001880 <HAL_RCC_OscConfig+0x33c>)
 8001698:	2120      	movs	r1, #32
 800169a:	430a      	orrs	r2, r1
 800169c:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800169e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a0:	2220      	movs	r2, #32
 80016a2:	4393      	bics	r3, r2
 80016a4:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	2b04      	cmp	r3, #4
 80016aa:	d005      	beq.n	80016b8 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	2b0c      	cmp	r3, #12
 80016b0:	d13e      	bne.n	8001730 <HAL_RCC_OscConfig+0x1ec>
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d13b      	bne.n	8001730 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80016b8:	4b71      	ldr	r3, [pc, #452]	@ (8001880 <HAL_RCC_OscConfig+0x33c>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2204      	movs	r2, #4
 80016be:	4013      	ands	r3, r2
 80016c0:	d004      	beq.n	80016cc <HAL_RCC_OscConfig+0x188>
 80016c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d101      	bne.n	80016cc <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e304      	b.n	8001cd6 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016cc:	4b6c      	ldr	r3, [pc, #432]	@ (8001880 <HAL_RCC_OscConfig+0x33c>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	4a6e      	ldr	r2, [pc, #440]	@ (800188c <HAL_RCC_OscConfig+0x348>)
 80016d2:	4013      	ands	r3, r2
 80016d4:	0019      	movs	r1, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	691b      	ldr	r3, [r3, #16]
 80016da:	021a      	lsls	r2, r3, #8
 80016dc:	4b68      	ldr	r3, [pc, #416]	@ (8001880 <HAL_RCC_OscConfig+0x33c>)
 80016de:	430a      	orrs	r2, r1
 80016e0:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80016e2:	4b67      	ldr	r3, [pc, #412]	@ (8001880 <HAL_RCC_OscConfig+0x33c>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2209      	movs	r2, #9
 80016e8:	4393      	bics	r3, r2
 80016ea:	0019      	movs	r1, r3
 80016ec:	4b64      	ldr	r3, [pc, #400]	@ (8001880 <HAL_RCC_OscConfig+0x33c>)
 80016ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016f0:	430a      	orrs	r2, r1
 80016f2:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016f4:	f000 fc42 	bl	8001f7c <HAL_RCC_GetSysClockFreq>
 80016f8:	0001      	movs	r1, r0
 80016fa:	4b61      	ldr	r3, [pc, #388]	@ (8001880 <HAL_RCC_OscConfig+0x33c>)
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	091b      	lsrs	r3, r3, #4
 8001700:	220f      	movs	r2, #15
 8001702:	4013      	ands	r3, r2
 8001704:	4a62      	ldr	r2, [pc, #392]	@ (8001890 <HAL_RCC_OscConfig+0x34c>)
 8001706:	5cd3      	ldrb	r3, [r2, r3]
 8001708:	000a      	movs	r2, r1
 800170a:	40da      	lsrs	r2, r3
 800170c:	4b61      	ldr	r3, [pc, #388]	@ (8001894 <HAL_RCC_OscConfig+0x350>)
 800170e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001710:	4b61      	ldr	r3, [pc, #388]	@ (8001898 <HAL_RCC_OscConfig+0x354>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2513      	movs	r5, #19
 8001716:	197c      	adds	r4, r7, r5
 8001718:	0018      	movs	r0, r3
 800171a:	f7ff fb9b 	bl	8000e54 <HAL_InitTick>
 800171e:	0003      	movs	r3, r0
 8001720:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001722:	197b      	adds	r3, r7, r5
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d046      	beq.n	80017b8 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 800172a:	197b      	adds	r3, r7, r5
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	e2d2      	b.n	8001cd6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001732:	2b00      	cmp	r3, #0
 8001734:	d027      	beq.n	8001786 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001736:	4b52      	ldr	r3, [pc, #328]	@ (8001880 <HAL_RCC_OscConfig+0x33c>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2209      	movs	r2, #9
 800173c:	4393      	bics	r3, r2
 800173e:	0019      	movs	r1, r3
 8001740:	4b4f      	ldr	r3, [pc, #316]	@ (8001880 <HAL_RCC_OscConfig+0x33c>)
 8001742:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001744:	430a      	orrs	r2, r1
 8001746:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001748:	f7ff fbca 	bl	8000ee0 <HAL_GetTick>
 800174c:	0003      	movs	r3, r0
 800174e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001750:	e008      	b.n	8001764 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001752:	f7ff fbc5 	bl	8000ee0 <HAL_GetTick>
 8001756:	0002      	movs	r2, r0
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d901      	bls.n	8001764 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e2b8      	b.n	8001cd6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001764:	4b46      	ldr	r3, [pc, #280]	@ (8001880 <HAL_RCC_OscConfig+0x33c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2204      	movs	r2, #4
 800176a:	4013      	ands	r3, r2
 800176c:	d0f1      	beq.n	8001752 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800176e:	4b44      	ldr	r3, [pc, #272]	@ (8001880 <HAL_RCC_OscConfig+0x33c>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	4a46      	ldr	r2, [pc, #280]	@ (800188c <HAL_RCC_OscConfig+0x348>)
 8001774:	4013      	ands	r3, r2
 8001776:	0019      	movs	r1, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	691b      	ldr	r3, [r3, #16]
 800177c:	021a      	lsls	r2, r3, #8
 800177e:	4b40      	ldr	r3, [pc, #256]	@ (8001880 <HAL_RCC_OscConfig+0x33c>)
 8001780:	430a      	orrs	r2, r1
 8001782:	605a      	str	r2, [r3, #4]
 8001784:	e018      	b.n	80017b8 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001786:	4b3e      	ldr	r3, [pc, #248]	@ (8001880 <HAL_RCC_OscConfig+0x33c>)
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	4b3d      	ldr	r3, [pc, #244]	@ (8001880 <HAL_RCC_OscConfig+0x33c>)
 800178c:	2101      	movs	r1, #1
 800178e:	438a      	bics	r2, r1
 8001790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001792:	f7ff fba5 	bl	8000ee0 <HAL_GetTick>
 8001796:	0003      	movs	r3, r0
 8001798:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800179a:	e008      	b.n	80017ae <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800179c:	f7ff fba0 	bl	8000ee0 <HAL_GetTick>
 80017a0:	0002      	movs	r2, r0
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e293      	b.n	8001cd6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80017ae:	4b34      	ldr	r3, [pc, #208]	@ (8001880 <HAL_RCC_OscConfig+0x33c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2204      	movs	r2, #4
 80017b4:	4013      	ands	r3, r2
 80017b6:	d1f1      	bne.n	800179c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2210      	movs	r2, #16
 80017be:	4013      	ands	r3, r2
 80017c0:	d100      	bne.n	80017c4 <HAL_RCC_OscConfig+0x280>
 80017c2:	e0a2      	b.n	800190a <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d140      	bne.n	800184c <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017ca:	4b2d      	ldr	r3, [pc, #180]	@ (8001880 <HAL_RCC_OscConfig+0x33c>)
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	2380      	movs	r3, #128	@ 0x80
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	4013      	ands	r3, r2
 80017d4:	d005      	beq.n	80017e2 <HAL_RCC_OscConfig+0x29e>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	69db      	ldr	r3, [r3, #28]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d101      	bne.n	80017e2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e279      	b.n	8001cd6 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017e2:	4b27      	ldr	r3, [pc, #156]	@ (8001880 <HAL_RCC_OscConfig+0x33c>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	4a2d      	ldr	r2, [pc, #180]	@ (800189c <HAL_RCC_OscConfig+0x358>)
 80017e8:	4013      	ands	r3, r2
 80017ea:	0019      	movs	r1, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80017f0:	4b23      	ldr	r3, [pc, #140]	@ (8001880 <HAL_RCC_OscConfig+0x33c>)
 80017f2:	430a      	orrs	r2, r1
 80017f4:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017f6:	4b22      	ldr	r3, [pc, #136]	@ (8001880 <HAL_RCC_OscConfig+0x33c>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	021b      	lsls	r3, r3, #8
 80017fc:	0a19      	lsrs	r1, r3, #8
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a1b      	ldr	r3, [r3, #32]
 8001802:	061a      	lsls	r2, r3, #24
 8001804:	4b1e      	ldr	r3, [pc, #120]	@ (8001880 <HAL_RCC_OscConfig+0x33c>)
 8001806:	430a      	orrs	r2, r1
 8001808:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800180e:	0b5b      	lsrs	r3, r3, #13
 8001810:	3301      	adds	r3, #1
 8001812:	2280      	movs	r2, #128	@ 0x80
 8001814:	0212      	lsls	r2, r2, #8
 8001816:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001818:	4b19      	ldr	r3, [pc, #100]	@ (8001880 <HAL_RCC_OscConfig+0x33c>)
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	091b      	lsrs	r3, r3, #4
 800181e:	210f      	movs	r1, #15
 8001820:	400b      	ands	r3, r1
 8001822:	491b      	ldr	r1, [pc, #108]	@ (8001890 <HAL_RCC_OscConfig+0x34c>)
 8001824:	5ccb      	ldrb	r3, [r1, r3]
 8001826:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001828:	4b1a      	ldr	r3, [pc, #104]	@ (8001894 <HAL_RCC_OscConfig+0x350>)
 800182a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800182c:	4b1a      	ldr	r3, [pc, #104]	@ (8001898 <HAL_RCC_OscConfig+0x354>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2513      	movs	r5, #19
 8001832:	197c      	adds	r4, r7, r5
 8001834:	0018      	movs	r0, r3
 8001836:	f7ff fb0d 	bl	8000e54 <HAL_InitTick>
 800183a:	0003      	movs	r3, r0
 800183c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800183e:	197b      	adds	r3, r7, r5
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d061      	beq.n	800190a <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8001846:	197b      	adds	r3, r7, r5
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	e244      	b.n	8001cd6 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	69db      	ldr	r3, [r3, #28]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d040      	beq.n	80018d6 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001854:	4b0a      	ldr	r3, [pc, #40]	@ (8001880 <HAL_RCC_OscConfig+0x33c>)
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	4b09      	ldr	r3, [pc, #36]	@ (8001880 <HAL_RCC_OscConfig+0x33c>)
 800185a:	2180      	movs	r1, #128	@ 0x80
 800185c:	0049      	lsls	r1, r1, #1
 800185e:	430a      	orrs	r2, r1
 8001860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001862:	f7ff fb3d 	bl	8000ee0 <HAL_GetTick>
 8001866:	0003      	movs	r3, r0
 8001868:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800186a:	e019      	b.n	80018a0 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800186c:	f7ff fb38 	bl	8000ee0 <HAL_GetTick>
 8001870:	0002      	movs	r2, r0
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b02      	cmp	r3, #2
 8001878:	d912      	bls.n	80018a0 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e22b      	b.n	8001cd6 <HAL_RCC_OscConfig+0x792>
 800187e:	46c0      	nop			@ (mov r8, r8)
 8001880:	40021000 	.word	0x40021000
 8001884:	fffeffff 	.word	0xfffeffff
 8001888:	fffbffff 	.word	0xfffbffff
 800188c:	ffffe0ff 	.word	0xffffe0ff
 8001890:	0800498c 	.word	0x0800498c
 8001894:	20000000 	.word	0x20000000
 8001898:	20000004 	.word	0x20000004
 800189c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80018a0:	4bca      	ldr	r3, [pc, #808]	@ (8001bcc <HAL_RCC_OscConfig+0x688>)
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	2380      	movs	r3, #128	@ 0x80
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	4013      	ands	r3, r2
 80018aa:	d0df      	beq.n	800186c <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018ac:	4bc7      	ldr	r3, [pc, #796]	@ (8001bcc <HAL_RCC_OscConfig+0x688>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	4ac7      	ldr	r2, [pc, #796]	@ (8001bd0 <HAL_RCC_OscConfig+0x68c>)
 80018b2:	4013      	ands	r3, r2
 80018b4:	0019      	movs	r1, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80018ba:	4bc4      	ldr	r3, [pc, #784]	@ (8001bcc <HAL_RCC_OscConfig+0x688>)
 80018bc:	430a      	orrs	r2, r1
 80018be:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018c0:	4bc2      	ldr	r3, [pc, #776]	@ (8001bcc <HAL_RCC_OscConfig+0x688>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	021b      	lsls	r3, r3, #8
 80018c6:	0a19      	lsrs	r1, r3, #8
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6a1b      	ldr	r3, [r3, #32]
 80018cc:	061a      	lsls	r2, r3, #24
 80018ce:	4bbf      	ldr	r3, [pc, #764]	@ (8001bcc <HAL_RCC_OscConfig+0x688>)
 80018d0:	430a      	orrs	r2, r1
 80018d2:	605a      	str	r2, [r3, #4]
 80018d4:	e019      	b.n	800190a <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80018d6:	4bbd      	ldr	r3, [pc, #756]	@ (8001bcc <HAL_RCC_OscConfig+0x688>)
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	4bbc      	ldr	r3, [pc, #752]	@ (8001bcc <HAL_RCC_OscConfig+0x688>)
 80018dc:	49bd      	ldr	r1, [pc, #756]	@ (8001bd4 <HAL_RCC_OscConfig+0x690>)
 80018de:	400a      	ands	r2, r1
 80018e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e2:	f7ff fafd 	bl	8000ee0 <HAL_GetTick>
 80018e6:	0003      	movs	r3, r0
 80018e8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80018ea:	e008      	b.n	80018fe <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018ec:	f7ff faf8 	bl	8000ee0 <HAL_GetTick>
 80018f0:	0002      	movs	r2, r0
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e1eb      	b.n	8001cd6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80018fe:	4bb3      	ldr	r3, [pc, #716]	@ (8001bcc <HAL_RCC_OscConfig+0x688>)
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	2380      	movs	r3, #128	@ 0x80
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	4013      	ands	r3, r2
 8001908:	d1f0      	bne.n	80018ec <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2208      	movs	r2, #8
 8001910:	4013      	ands	r3, r2
 8001912:	d036      	beq.n	8001982 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	695b      	ldr	r3, [r3, #20]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d019      	beq.n	8001950 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800191c:	4bab      	ldr	r3, [pc, #684]	@ (8001bcc <HAL_RCC_OscConfig+0x688>)
 800191e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001920:	4baa      	ldr	r3, [pc, #680]	@ (8001bcc <HAL_RCC_OscConfig+0x688>)
 8001922:	2101      	movs	r1, #1
 8001924:	430a      	orrs	r2, r1
 8001926:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001928:	f7ff fada 	bl	8000ee0 <HAL_GetTick>
 800192c:	0003      	movs	r3, r0
 800192e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001930:	e008      	b.n	8001944 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001932:	f7ff fad5 	bl	8000ee0 <HAL_GetTick>
 8001936:	0002      	movs	r2, r0
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	2b02      	cmp	r3, #2
 800193e:	d901      	bls.n	8001944 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e1c8      	b.n	8001cd6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001944:	4ba1      	ldr	r3, [pc, #644]	@ (8001bcc <HAL_RCC_OscConfig+0x688>)
 8001946:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001948:	2202      	movs	r2, #2
 800194a:	4013      	ands	r3, r2
 800194c:	d0f1      	beq.n	8001932 <HAL_RCC_OscConfig+0x3ee>
 800194e:	e018      	b.n	8001982 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001950:	4b9e      	ldr	r3, [pc, #632]	@ (8001bcc <HAL_RCC_OscConfig+0x688>)
 8001952:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001954:	4b9d      	ldr	r3, [pc, #628]	@ (8001bcc <HAL_RCC_OscConfig+0x688>)
 8001956:	2101      	movs	r1, #1
 8001958:	438a      	bics	r2, r1
 800195a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800195c:	f7ff fac0 	bl	8000ee0 <HAL_GetTick>
 8001960:	0003      	movs	r3, r0
 8001962:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001964:	e008      	b.n	8001978 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001966:	f7ff fabb 	bl	8000ee0 <HAL_GetTick>
 800196a:	0002      	movs	r2, r0
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	2b02      	cmp	r3, #2
 8001972:	d901      	bls.n	8001978 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e1ae      	b.n	8001cd6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001978:	4b94      	ldr	r3, [pc, #592]	@ (8001bcc <HAL_RCC_OscConfig+0x688>)
 800197a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800197c:	2202      	movs	r2, #2
 800197e:	4013      	ands	r3, r2
 8001980:	d1f1      	bne.n	8001966 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2204      	movs	r2, #4
 8001988:	4013      	ands	r3, r2
 800198a:	d100      	bne.n	800198e <HAL_RCC_OscConfig+0x44a>
 800198c:	e0ae      	b.n	8001aec <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800198e:	2023      	movs	r0, #35	@ 0x23
 8001990:	183b      	adds	r3, r7, r0
 8001992:	2200      	movs	r2, #0
 8001994:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001996:	4b8d      	ldr	r3, [pc, #564]	@ (8001bcc <HAL_RCC_OscConfig+0x688>)
 8001998:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800199a:	2380      	movs	r3, #128	@ 0x80
 800199c:	055b      	lsls	r3, r3, #21
 800199e:	4013      	ands	r3, r2
 80019a0:	d109      	bne.n	80019b6 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019a2:	4b8a      	ldr	r3, [pc, #552]	@ (8001bcc <HAL_RCC_OscConfig+0x688>)
 80019a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80019a6:	4b89      	ldr	r3, [pc, #548]	@ (8001bcc <HAL_RCC_OscConfig+0x688>)
 80019a8:	2180      	movs	r1, #128	@ 0x80
 80019aa:	0549      	lsls	r1, r1, #21
 80019ac:	430a      	orrs	r2, r1
 80019ae:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80019b0:	183b      	adds	r3, r7, r0
 80019b2:	2201      	movs	r2, #1
 80019b4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019b6:	4b88      	ldr	r3, [pc, #544]	@ (8001bd8 <HAL_RCC_OscConfig+0x694>)
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	2380      	movs	r3, #128	@ 0x80
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	4013      	ands	r3, r2
 80019c0:	d11a      	bne.n	80019f8 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019c2:	4b85      	ldr	r3, [pc, #532]	@ (8001bd8 <HAL_RCC_OscConfig+0x694>)
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	4b84      	ldr	r3, [pc, #528]	@ (8001bd8 <HAL_RCC_OscConfig+0x694>)
 80019c8:	2180      	movs	r1, #128	@ 0x80
 80019ca:	0049      	lsls	r1, r1, #1
 80019cc:	430a      	orrs	r2, r1
 80019ce:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019d0:	f7ff fa86 	bl	8000ee0 <HAL_GetTick>
 80019d4:	0003      	movs	r3, r0
 80019d6:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d8:	e008      	b.n	80019ec <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019da:	f7ff fa81 	bl	8000ee0 <HAL_GetTick>
 80019de:	0002      	movs	r2, r0
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	2b64      	cmp	r3, #100	@ 0x64
 80019e6:	d901      	bls.n	80019ec <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e174      	b.n	8001cd6 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ec:	4b7a      	ldr	r3, [pc, #488]	@ (8001bd8 <HAL_RCC_OscConfig+0x694>)
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	2380      	movs	r3, #128	@ 0x80
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	4013      	ands	r3, r2
 80019f6:	d0f0      	beq.n	80019da <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689a      	ldr	r2, [r3, #8]
 80019fc:	2380      	movs	r3, #128	@ 0x80
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d107      	bne.n	8001a14 <HAL_RCC_OscConfig+0x4d0>
 8001a04:	4b71      	ldr	r3, [pc, #452]	@ (8001bcc <HAL_RCC_OscConfig+0x688>)
 8001a06:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001a08:	4b70      	ldr	r3, [pc, #448]	@ (8001bcc <HAL_RCC_OscConfig+0x688>)
 8001a0a:	2180      	movs	r1, #128	@ 0x80
 8001a0c:	0049      	lsls	r1, r1, #1
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	651a      	str	r2, [r3, #80]	@ 0x50
 8001a12:	e031      	b.n	8001a78 <HAL_RCC_OscConfig+0x534>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d10c      	bne.n	8001a36 <HAL_RCC_OscConfig+0x4f2>
 8001a1c:	4b6b      	ldr	r3, [pc, #428]	@ (8001bcc <HAL_RCC_OscConfig+0x688>)
 8001a1e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001a20:	4b6a      	ldr	r3, [pc, #424]	@ (8001bcc <HAL_RCC_OscConfig+0x688>)
 8001a22:	496c      	ldr	r1, [pc, #432]	@ (8001bd4 <HAL_RCC_OscConfig+0x690>)
 8001a24:	400a      	ands	r2, r1
 8001a26:	651a      	str	r2, [r3, #80]	@ 0x50
 8001a28:	4b68      	ldr	r3, [pc, #416]	@ (8001bcc <HAL_RCC_OscConfig+0x688>)
 8001a2a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001a2c:	4b67      	ldr	r3, [pc, #412]	@ (8001bcc <HAL_RCC_OscConfig+0x688>)
 8001a2e:	496b      	ldr	r1, [pc, #428]	@ (8001bdc <HAL_RCC_OscConfig+0x698>)
 8001a30:	400a      	ands	r2, r1
 8001a32:	651a      	str	r2, [r3, #80]	@ 0x50
 8001a34:	e020      	b.n	8001a78 <HAL_RCC_OscConfig+0x534>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	689a      	ldr	r2, [r3, #8]
 8001a3a:	23a0      	movs	r3, #160	@ 0xa0
 8001a3c:	00db      	lsls	r3, r3, #3
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d10e      	bne.n	8001a60 <HAL_RCC_OscConfig+0x51c>
 8001a42:	4b62      	ldr	r3, [pc, #392]	@ (8001bcc <HAL_RCC_OscConfig+0x688>)
 8001a44:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001a46:	4b61      	ldr	r3, [pc, #388]	@ (8001bcc <HAL_RCC_OscConfig+0x688>)
 8001a48:	2180      	movs	r1, #128	@ 0x80
 8001a4a:	00c9      	lsls	r1, r1, #3
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	651a      	str	r2, [r3, #80]	@ 0x50
 8001a50:	4b5e      	ldr	r3, [pc, #376]	@ (8001bcc <HAL_RCC_OscConfig+0x688>)
 8001a52:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001a54:	4b5d      	ldr	r3, [pc, #372]	@ (8001bcc <HAL_RCC_OscConfig+0x688>)
 8001a56:	2180      	movs	r1, #128	@ 0x80
 8001a58:	0049      	lsls	r1, r1, #1
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	651a      	str	r2, [r3, #80]	@ 0x50
 8001a5e:	e00b      	b.n	8001a78 <HAL_RCC_OscConfig+0x534>
 8001a60:	4b5a      	ldr	r3, [pc, #360]	@ (8001bcc <HAL_RCC_OscConfig+0x688>)
 8001a62:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001a64:	4b59      	ldr	r3, [pc, #356]	@ (8001bcc <HAL_RCC_OscConfig+0x688>)
 8001a66:	495b      	ldr	r1, [pc, #364]	@ (8001bd4 <HAL_RCC_OscConfig+0x690>)
 8001a68:	400a      	ands	r2, r1
 8001a6a:	651a      	str	r2, [r3, #80]	@ 0x50
 8001a6c:	4b57      	ldr	r3, [pc, #348]	@ (8001bcc <HAL_RCC_OscConfig+0x688>)
 8001a6e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001a70:	4b56      	ldr	r3, [pc, #344]	@ (8001bcc <HAL_RCC_OscConfig+0x688>)
 8001a72:	495a      	ldr	r1, [pc, #360]	@ (8001bdc <HAL_RCC_OscConfig+0x698>)
 8001a74:	400a      	ands	r2, r1
 8001a76:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d015      	beq.n	8001aac <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a80:	f7ff fa2e 	bl	8000ee0 <HAL_GetTick>
 8001a84:	0003      	movs	r3, r0
 8001a86:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a88:	e009      	b.n	8001a9e <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a8a:	f7ff fa29 	bl	8000ee0 <HAL_GetTick>
 8001a8e:	0002      	movs	r2, r0
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	4a52      	ldr	r2, [pc, #328]	@ (8001be0 <HAL_RCC_OscConfig+0x69c>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e11b      	b.n	8001cd6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a9e:	4b4b      	ldr	r3, [pc, #300]	@ (8001bcc <HAL_RCC_OscConfig+0x688>)
 8001aa0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001aa2:	2380      	movs	r3, #128	@ 0x80
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	d0ef      	beq.n	8001a8a <HAL_RCC_OscConfig+0x546>
 8001aaa:	e014      	b.n	8001ad6 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aac:	f7ff fa18 	bl	8000ee0 <HAL_GetTick>
 8001ab0:	0003      	movs	r3, r0
 8001ab2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001ab4:	e009      	b.n	8001aca <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ab6:	f7ff fa13 	bl	8000ee0 <HAL_GetTick>
 8001aba:	0002      	movs	r2, r0
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	4a47      	ldr	r2, [pc, #284]	@ (8001be0 <HAL_RCC_OscConfig+0x69c>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e105      	b.n	8001cd6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001aca:	4b40      	ldr	r3, [pc, #256]	@ (8001bcc <HAL_RCC_OscConfig+0x688>)
 8001acc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001ace:	2380      	movs	r3, #128	@ 0x80
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	d1ef      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ad6:	2323      	movs	r3, #35	@ 0x23
 8001ad8:	18fb      	adds	r3, r7, r3
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d105      	bne.n	8001aec <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ae0:	4b3a      	ldr	r3, [pc, #232]	@ (8001bcc <HAL_RCC_OscConfig+0x688>)
 8001ae2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001ae4:	4b39      	ldr	r3, [pc, #228]	@ (8001bcc <HAL_RCC_OscConfig+0x688>)
 8001ae6:	493f      	ldr	r1, [pc, #252]	@ (8001be4 <HAL_RCC_OscConfig+0x6a0>)
 8001ae8:	400a      	ands	r2, r1
 8001aea:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2220      	movs	r2, #32
 8001af2:	4013      	ands	r3, r2
 8001af4:	d049      	beq.n	8001b8a <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d026      	beq.n	8001b4c <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001afe:	4b33      	ldr	r3, [pc, #204]	@ (8001bcc <HAL_RCC_OscConfig+0x688>)
 8001b00:	689a      	ldr	r2, [r3, #8]
 8001b02:	4b32      	ldr	r3, [pc, #200]	@ (8001bcc <HAL_RCC_OscConfig+0x688>)
 8001b04:	2101      	movs	r1, #1
 8001b06:	430a      	orrs	r2, r1
 8001b08:	609a      	str	r2, [r3, #8]
 8001b0a:	4b30      	ldr	r3, [pc, #192]	@ (8001bcc <HAL_RCC_OscConfig+0x688>)
 8001b0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b0e:	4b2f      	ldr	r3, [pc, #188]	@ (8001bcc <HAL_RCC_OscConfig+0x688>)
 8001b10:	2101      	movs	r1, #1
 8001b12:	430a      	orrs	r2, r1
 8001b14:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b16:	4b34      	ldr	r3, [pc, #208]	@ (8001be8 <HAL_RCC_OscConfig+0x6a4>)
 8001b18:	6a1a      	ldr	r2, [r3, #32]
 8001b1a:	4b33      	ldr	r3, [pc, #204]	@ (8001be8 <HAL_RCC_OscConfig+0x6a4>)
 8001b1c:	2180      	movs	r1, #128	@ 0x80
 8001b1e:	0189      	lsls	r1, r1, #6
 8001b20:	430a      	orrs	r2, r1
 8001b22:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b24:	f7ff f9dc 	bl	8000ee0 <HAL_GetTick>
 8001b28:	0003      	movs	r3, r0
 8001b2a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001b2c:	e008      	b.n	8001b40 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b2e:	f7ff f9d7 	bl	8000ee0 <HAL_GetTick>
 8001b32:	0002      	movs	r2, r0
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d901      	bls.n	8001b40 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e0ca      	b.n	8001cd6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001b40:	4b22      	ldr	r3, [pc, #136]	@ (8001bcc <HAL_RCC_OscConfig+0x688>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	2202      	movs	r2, #2
 8001b46:	4013      	ands	r3, r2
 8001b48:	d0f1      	beq.n	8001b2e <HAL_RCC_OscConfig+0x5ea>
 8001b4a:	e01e      	b.n	8001b8a <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001b4c:	4b1f      	ldr	r3, [pc, #124]	@ (8001bcc <HAL_RCC_OscConfig+0x688>)
 8001b4e:	689a      	ldr	r2, [r3, #8]
 8001b50:	4b1e      	ldr	r3, [pc, #120]	@ (8001bcc <HAL_RCC_OscConfig+0x688>)
 8001b52:	2101      	movs	r1, #1
 8001b54:	438a      	bics	r2, r1
 8001b56:	609a      	str	r2, [r3, #8]
 8001b58:	4b23      	ldr	r3, [pc, #140]	@ (8001be8 <HAL_RCC_OscConfig+0x6a4>)
 8001b5a:	6a1a      	ldr	r2, [r3, #32]
 8001b5c:	4b22      	ldr	r3, [pc, #136]	@ (8001be8 <HAL_RCC_OscConfig+0x6a4>)
 8001b5e:	4923      	ldr	r1, [pc, #140]	@ (8001bec <HAL_RCC_OscConfig+0x6a8>)
 8001b60:	400a      	ands	r2, r1
 8001b62:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b64:	f7ff f9bc 	bl	8000ee0 <HAL_GetTick>
 8001b68:	0003      	movs	r3, r0
 8001b6a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001b6c:	e008      	b.n	8001b80 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b6e:	f7ff f9b7 	bl	8000ee0 <HAL_GetTick>
 8001b72:	0002      	movs	r2, r0
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e0aa      	b.n	8001cd6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001b80:	4b12      	ldr	r3, [pc, #72]	@ (8001bcc <HAL_RCC_OscConfig+0x688>)
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	2202      	movs	r2, #2
 8001b86:	4013      	ands	r3, r2
 8001b88:	d1f1      	bne.n	8001b6e <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d100      	bne.n	8001b94 <HAL_RCC_OscConfig+0x650>
 8001b92:	e09f      	b.n	8001cd4 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	2b0c      	cmp	r3, #12
 8001b98:	d100      	bne.n	8001b9c <HAL_RCC_OscConfig+0x658>
 8001b9a:	e078      	b.n	8001c8e <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d159      	bne.n	8001c58 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ba4:	4b09      	ldr	r3, [pc, #36]	@ (8001bcc <HAL_RCC_OscConfig+0x688>)
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	4b08      	ldr	r3, [pc, #32]	@ (8001bcc <HAL_RCC_OscConfig+0x688>)
 8001baa:	4911      	ldr	r1, [pc, #68]	@ (8001bf0 <HAL_RCC_OscConfig+0x6ac>)
 8001bac:	400a      	ands	r2, r1
 8001bae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb0:	f7ff f996 	bl	8000ee0 <HAL_GetTick>
 8001bb4:	0003      	movs	r3, r0
 8001bb6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001bb8:	e01c      	b.n	8001bf4 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bba:	f7ff f991 	bl	8000ee0 <HAL_GetTick>
 8001bbe:	0002      	movs	r2, r0
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d915      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e084      	b.n	8001cd6 <HAL_RCC_OscConfig+0x792>
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	ffff1fff 	.word	0xffff1fff
 8001bd4:	fffffeff 	.word	0xfffffeff
 8001bd8:	40007000 	.word	0x40007000
 8001bdc:	fffffbff 	.word	0xfffffbff
 8001be0:	00001388 	.word	0x00001388
 8001be4:	efffffff 	.word	0xefffffff
 8001be8:	40010000 	.word	0x40010000
 8001bec:	ffffdfff 	.word	0xffffdfff
 8001bf0:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001bf4:	4b3a      	ldr	r3, [pc, #232]	@ (8001ce0 <HAL_RCC_OscConfig+0x79c>)
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	2380      	movs	r3, #128	@ 0x80
 8001bfa:	049b      	lsls	r3, r3, #18
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	d1dc      	bne.n	8001bba <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c00:	4b37      	ldr	r3, [pc, #220]	@ (8001ce0 <HAL_RCC_OscConfig+0x79c>)
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	4a37      	ldr	r2, [pc, #220]	@ (8001ce4 <HAL_RCC_OscConfig+0x7a0>)
 8001c06:	4013      	ands	r3, r2
 8001c08:	0019      	movs	r1, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c12:	431a      	orrs	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c18:	431a      	orrs	r2, r3
 8001c1a:	4b31      	ldr	r3, [pc, #196]	@ (8001ce0 <HAL_RCC_OscConfig+0x79c>)
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c20:	4b2f      	ldr	r3, [pc, #188]	@ (8001ce0 <HAL_RCC_OscConfig+0x79c>)
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	4b2e      	ldr	r3, [pc, #184]	@ (8001ce0 <HAL_RCC_OscConfig+0x79c>)
 8001c26:	2180      	movs	r1, #128	@ 0x80
 8001c28:	0449      	lsls	r1, r1, #17
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c2e:	f7ff f957 	bl	8000ee0 <HAL_GetTick>
 8001c32:	0003      	movs	r3, r0
 8001c34:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c38:	f7ff f952 	bl	8000ee0 <HAL_GetTick>
 8001c3c:	0002      	movs	r2, r0
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e045      	b.n	8001cd6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001c4a:	4b25      	ldr	r3, [pc, #148]	@ (8001ce0 <HAL_RCC_OscConfig+0x79c>)
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	2380      	movs	r3, #128	@ 0x80
 8001c50:	049b      	lsls	r3, r3, #18
 8001c52:	4013      	ands	r3, r2
 8001c54:	d0f0      	beq.n	8001c38 <HAL_RCC_OscConfig+0x6f4>
 8001c56:	e03d      	b.n	8001cd4 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c58:	4b21      	ldr	r3, [pc, #132]	@ (8001ce0 <HAL_RCC_OscConfig+0x79c>)
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	4b20      	ldr	r3, [pc, #128]	@ (8001ce0 <HAL_RCC_OscConfig+0x79c>)
 8001c5e:	4922      	ldr	r1, [pc, #136]	@ (8001ce8 <HAL_RCC_OscConfig+0x7a4>)
 8001c60:	400a      	ands	r2, r1
 8001c62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c64:	f7ff f93c 	bl	8000ee0 <HAL_GetTick>
 8001c68:	0003      	movs	r3, r0
 8001c6a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001c6c:	e008      	b.n	8001c80 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c6e:	f7ff f937 	bl	8000ee0 <HAL_GetTick>
 8001c72:	0002      	movs	r2, r0
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d901      	bls.n	8001c80 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e02a      	b.n	8001cd6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001c80:	4b17      	ldr	r3, [pc, #92]	@ (8001ce0 <HAL_RCC_OscConfig+0x79c>)
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	2380      	movs	r3, #128	@ 0x80
 8001c86:	049b      	lsls	r3, r3, #18
 8001c88:	4013      	ands	r3, r2
 8001c8a:	d1f0      	bne.n	8001c6e <HAL_RCC_OscConfig+0x72a>
 8001c8c:	e022      	b.n	8001cd4 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d101      	bne.n	8001c9a <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e01d      	b.n	8001cd6 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c9a:	4b11      	ldr	r3, [pc, #68]	@ (8001ce0 <HAL_RCC_OscConfig+0x79c>)
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	2380      	movs	r3, #128	@ 0x80
 8001ca4:	025b      	lsls	r3, r3, #9
 8001ca6:	401a      	ands	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d10f      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	23f0      	movs	r3, #240	@ 0xf0
 8001cb4:	039b      	lsls	r3, r3, #14
 8001cb6:	401a      	ands	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d107      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	23c0      	movs	r3, #192	@ 0xc0
 8001cc4:	041b      	lsls	r3, r3, #16
 8001cc6:	401a      	ands	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d001      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e000      	b.n	8001cd6 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	0018      	movs	r0, r3
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	b00a      	add	sp, #40	@ 0x28
 8001cdc:	bdb0      	pop	{r4, r5, r7, pc}
 8001cde:	46c0      	nop			@ (mov r8, r8)
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	ff02ffff 	.word	0xff02ffff
 8001ce8:	feffffff 	.word	0xfeffffff

08001cec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cec:	b5b0      	push	{r4, r5, r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d101      	bne.n	8001d00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e128      	b.n	8001f52 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d00:	4b96      	ldr	r3, [pc, #600]	@ (8001f5c <HAL_RCC_ClockConfig+0x270>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2201      	movs	r2, #1
 8001d06:	4013      	ands	r3, r2
 8001d08:	683a      	ldr	r2, [r7, #0]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d91e      	bls.n	8001d4c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d0e:	4b93      	ldr	r3, [pc, #588]	@ (8001f5c <HAL_RCC_ClockConfig+0x270>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2201      	movs	r2, #1
 8001d14:	4393      	bics	r3, r2
 8001d16:	0019      	movs	r1, r3
 8001d18:	4b90      	ldr	r3, [pc, #576]	@ (8001f5c <HAL_RCC_ClockConfig+0x270>)
 8001d1a:	683a      	ldr	r2, [r7, #0]
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d20:	f7ff f8de 	bl	8000ee0 <HAL_GetTick>
 8001d24:	0003      	movs	r3, r0
 8001d26:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d28:	e009      	b.n	8001d3e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d2a:	f7ff f8d9 	bl	8000ee0 <HAL_GetTick>
 8001d2e:	0002      	movs	r2, r0
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	4a8a      	ldr	r2, [pc, #552]	@ (8001f60 <HAL_RCC_ClockConfig+0x274>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e109      	b.n	8001f52 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d3e:	4b87      	ldr	r3, [pc, #540]	@ (8001f5c <HAL_RCC_ClockConfig+0x270>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2201      	movs	r2, #1
 8001d44:	4013      	ands	r3, r2
 8001d46:	683a      	ldr	r2, [r7, #0]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d1ee      	bne.n	8001d2a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2202      	movs	r2, #2
 8001d52:	4013      	ands	r3, r2
 8001d54:	d009      	beq.n	8001d6a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d56:	4b83      	ldr	r3, [pc, #524]	@ (8001f64 <HAL_RCC_ClockConfig+0x278>)
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	22f0      	movs	r2, #240	@ 0xf0
 8001d5c:	4393      	bics	r3, r2
 8001d5e:	0019      	movs	r1, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689a      	ldr	r2, [r3, #8]
 8001d64:	4b7f      	ldr	r3, [pc, #508]	@ (8001f64 <HAL_RCC_ClockConfig+0x278>)
 8001d66:	430a      	orrs	r2, r1
 8001d68:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	4013      	ands	r3, r2
 8001d72:	d100      	bne.n	8001d76 <HAL_RCC_ClockConfig+0x8a>
 8001d74:	e089      	b.n	8001e8a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d107      	bne.n	8001d8e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d7e:	4b79      	ldr	r3, [pc, #484]	@ (8001f64 <HAL_RCC_ClockConfig+0x278>)
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	2380      	movs	r3, #128	@ 0x80
 8001d84:	029b      	lsls	r3, r3, #10
 8001d86:	4013      	ands	r3, r2
 8001d88:	d120      	bne.n	8001dcc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e0e1      	b.n	8001f52 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	2b03      	cmp	r3, #3
 8001d94:	d107      	bne.n	8001da6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d96:	4b73      	ldr	r3, [pc, #460]	@ (8001f64 <HAL_RCC_ClockConfig+0x278>)
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	2380      	movs	r3, #128	@ 0x80
 8001d9c:	049b      	lsls	r3, r3, #18
 8001d9e:	4013      	ands	r3, r2
 8001da0:	d114      	bne.n	8001dcc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e0d5      	b.n	8001f52 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d106      	bne.n	8001dbc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001dae:	4b6d      	ldr	r3, [pc, #436]	@ (8001f64 <HAL_RCC_ClockConfig+0x278>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2204      	movs	r2, #4
 8001db4:	4013      	ands	r3, r2
 8001db6:	d109      	bne.n	8001dcc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e0ca      	b.n	8001f52 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001dbc:	4b69      	ldr	r3, [pc, #420]	@ (8001f64 <HAL_RCC_ClockConfig+0x278>)
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	2380      	movs	r3, #128	@ 0x80
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	d101      	bne.n	8001dcc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e0c2      	b.n	8001f52 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dcc:	4b65      	ldr	r3, [pc, #404]	@ (8001f64 <HAL_RCC_ClockConfig+0x278>)
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	2203      	movs	r2, #3
 8001dd2:	4393      	bics	r3, r2
 8001dd4:	0019      	movs	r1, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685a      	ldr	r2, [r3, #4]
 8001dda:	4b62      	ldr	r3, [pc, #392]	@ (8001f64 <HAL_RCC_ClockConfig+0x278>)
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001de0:	f7ff f87e 	bl	8000ee0 <HAL_GetTick>
 8001de4:	0003      	movs	r3, r0
 8001de6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d111      	bne.n	8001e14 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001df0:	e009      	b.n	8001e06 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001df2:	f7ff f875 	bl	8000ee0 <HAL_GetTick>
 8001df6:	0002      	movs	r2, r0
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	4a58      	ldr	r2, [pc, #352]	@ (8001f60 <HAL_RCC_ClockConfig+0x274>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e0a5      	b.n	8001f52 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e06:	4b57      	ldr	r3, [pc, #348]	@ (8001f64 <HAL_RCC_ClockConfig+0x278>)
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	220c      	movs	r2, #12
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	2b08      	cmp	r3, #8
 8001e10:	d1ef      	bne.n	8001df2 <HAL_RCC_ClockConfig+0x106>
 8001e12:	e03a      	b.n	8001e8a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	2b03      	cmp	r3, #3
 8001e1a:	d111      	bne.n	8001e40 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e1c:	e009      	b.n	8001e32 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e1e:	f7ff f85f 	bl	8000ee0 <HAL_GetTick>
 8001e22:	0002      	movs	r2, r0
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	4a4d      	ldr	r2, [pc, #308]	@ (8001f60 <HAL_RCC_ClockConfig+0x274>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e08f      	b.n	8001f52 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e32:	4b4c      	ldr	r3, [pc, #304]	@ (8001f64 <HAL_RCC_ClockConfig+0x278>)
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	220c      	movs	r2, #12
 8001e38:	4013      	ands	r3, r2
 8001e3a:	2b0c      	cmp	r3, #12
 8001e3c:	d1ef      	bne.n	8001e1e <HAL_RCC_ClockConfig+0x132>
 8001e3e:	e024      	b.n	8001e8a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d11b      	bne.n	8001e80 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e48:	e009      	b.n	8001e5e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e4a:	f7ff f849 	bl	8000ee0 <HAL_GetTick>
 8001e4e:	0002      	movs	r2, r0
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	4a42      	ldr	r2, [pc, #264]	@ (8001f60 <HAL_RCC_ClockConfig+0x274>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e079      	b.n	8001f52 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e5e:	4b41      	ldr	r3, [pc, #260]	@ (8001f64 <HAL_RCC_ClockConfig+0x278>)
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	220c      	movs	r2, #12
 8001e64:	4013      	ands	r3, r2
 8001e66:	2b04      	cmp	r3, #4
 8001e68:	d1ef      	bne.n	8001e4a <HAL_RCC_ClockConfig+0x15e>
 8001e6a:	e00e      	b.n	8001e8a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e6c:	f7ff f838 	bl	8000ee0 <HAL_GetTick>
 8001e70:	0002      	movs	r2, r0
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	4a3a      	ldr	r2, [pc, #232]	@ (8001f60 <HAL_RCC_ClockConfig+0x274>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e068      	b.n	8001f52 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001e80:	4b38      	ldr	r3, [pc, #224]	@ (8001f64 <HAL_RCC_ClockConfig+0x278>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	220c      	movs	r2, #12
 8001e86:	4013      	ands	r3, r2
 8001e88:	d1f0      	bne.n	8001e6c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e8a:	4b34      	ldr	r3, [pc, #208]	@ (8001f5c <HAL_RCC_ClockConfig+0x270>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	4013      	ands	r3, r2
 8001e92:	683a      	ldr	r2, [r7, #0]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d21e      	bcs.n	8001ed6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e98:	4b30      	ldr	r3, [pc, #192]	@ (8001f5c <HAL_RCC_ClockConfig+0x270>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	4393      	bics	r3, r2
 8001ea0:	0019      	movs	r1, r3
 8001ea2:	4b2e      	ldr	r3, [pc, #184]	@ (8001f5c <HAL_RCC_ClockConfig+0x270>)
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001eaa:	f7ff f819 	bl	8000ee0 <HAL_GetTick>
 8001eae:	0003      	movs	r3, r0
 8001eb0:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eb2:	e009      	b.n	8001ec8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eb4:	f7ff f814 	bl	8000ee0 <HAL_GetTick>
 8001eb8:	0002      	movs	r2, r0
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	4a28      	ldr	r2, [pc, #160]	@ (8001f60 <HAL_RCC_ClockConfig+0x274>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d901      	bls.n	8001ec8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e044      	b.n	8001f52 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ec8:	4b24      	ldr	r3, [pc, #144]	@ (8001f5c <HAL_RCC_ClockConfig+0x270>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2201      	movs	r2, #1
 8001ece:	4013      	ands	r3, r2
 8001ed0:	683a      	ldr	r2, [r7, #0]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d1ee      	bne.n	8001eb4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2204      	movs	r2, #4
 8001edc:	4013      	ands	r3, r2
 8001ede:	d009      	beq.n	8001ef4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ee0:	4b20      	ldr	r3, [pc, #128]	@ (8001f64 <HAL_RCC_ClockConfig+0x278>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	4a20      	ldr	r2, [pc, #128]	@ (8001f68 <HAL_RCC_ClockConfig+0x27c>)
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	0019      	movs	r1, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	68da      	ldr	r2, [r3, #12]
 8001eee:	4b1d      	ldr	r3, [pc, #116]	@ (8001f64 <HAL_RCC_ClockConfig+0x278>)
 8001ef0:	430a      	orrs	r2, r1
 8001ef2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2208      	movs	r2, #8
 8001efa:	4013      	ands	r3, r2
 8001efc:	d00a      	beq.n	8001f14 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001efe:	4b19      	ldr	r3, [pc, #100]	@ (8001f64 <HAL_RCC_ClockConfig+0x278>)
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	4a1a      	ldr	r2, [pc, #104]	@ (8001f6c <HAL_RCC_ClockConfig+0x280>)
 8001f04:	4013      	ands	r3, r2
 8001f06:	0019      	movs	r1, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	691b      	ldr	r3, [r3, #16]
 8001f0c:	00da      	lsls	r2, r3, #3
 8001f0e:	4b15      	ldr	r3, [pc, #84]	@ (8001f64 <HAL_RCC_ClockConfig+0x278>)
 8001f10:	430a      	orrs	r2, r1
 8001f12:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f14:	f000 f832 	bl	8001f7c <HAL_RCC_GetSysClockFreq>
 8001f18:	0001      	movs	r1, r0
 8001f1a:	4b12      	ldr	r3, [pc, #72]	@ (8001f64 <HAL_RCC_ClockConfig+0x278>)
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	091b      	lsrs	r3, r3, #4
 8001f20:	220f      	movs	r2, #15
 8001f22:	4013      	ands	r3, r2
 8001f24:	4a12      	ldr	r2, [pc, #72]	@ (8001f70 <HAL_RCC_ClockConfig+0x284>)
 8001f26:	5cd3      	ldrb	r3, [r2, r3]
 8001f28:	000a      	movs	r2, r1
 8001f2a:	40da      	lsrs	r2, r3
 8001f2c:	4b11      	ldr	r3, [pc, #68]	@ (8001f74 <HAL_RCC_ClockConfig+0x288>)
 8001f2e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f30:	4b11      	ldr	r3, [pc, #68]	@ (8001f78 <HAL_RCC_ClockConfig+0x28c>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	250b      	movs	r5, #11
 8001f36:	197c      	adds	r4, r7, r5
 8001f38:	0018      	movs	r0, r3
 8001f3a:	f7fe ff8b 	bl	8000e54 <HAL_InitTick>
 8001f3e:	0003      	movs	r3, r0
 8001f40:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001f42:	197b      	adds	r3, r7, r5
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d002      	beq.n	8001f50 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001f4a:	197b      	adds	r3, r7, r5
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	e000      	b.n	8001f52 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	0018      	movs	r0, r3
 8001f54:	46bd      	mov	sp, r7
 8001f56:	b004      	add	sp, #16
 8001f58:	bdb0      	pop	{r4, r5, r7, pc}
 8001f5a:	46c0      	nop			@ (mov r8, r8)
 8001f5c:	40022000 	.word	0x40022000
 8001f60:	00001388 	.word	0x00001388
 8001f64:	40021000 	.word	0x40021000
 8001f68:	fffff8ff 	.word	0xfffff8ff
 8001f6c:	ffffc7ff 	.word	0xffffc7ff
 8001f70:	0800498c 	.word	0x0800498c
 8001f74:	20000000 	.word	0x20000000
 8001f78:	20000004 	.word	0x20000004

08001f7c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001f82:	4b3c      	ldr	r3, [pc, #240]	@ (8002074 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	220c      	movs	r2, #12
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	2b0c      	cmp	r3, #12
 8001f90:	d013      	beq.n	8001fba <HAL_RCC_GetSysClockFreq+0x3e>
 8001f92:	d85c      	bhi.n	800204e <HAL_RCC_GetSysClockFreq+0xd2>
 8001f94:	2b04      	cmp	r3, #4
 8001f96:	d002      	beq.n	8001f9e <HAL_RCC_GetSysClockFreq+0x22>
 8001f98:	2b08      	cmp	r3, #8
 8001f9a:	d00b      	beq.n	8001fb4 <HAL_RCC_GetSysClockFreq+0x38>
 8001f9c:	e057      	b.n	800204e <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001f9e:	4b35      	ldr	r3, [pc, #212]	@ (8002074 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2210      	movs	r2, #16
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	d002      	beq.n	8001fae <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001fa8:	4b33      	ldr	r3, [pc, #204]	@ (8002078 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001faa:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001fac:	e05d      	b.n	800206a <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 8001fae:	4b33      	ldr	r3, [pc, #204]	@ (800207c <HAL_RCC_GetSysClockFreq+0x100>)
 8001fb0:	613b      	str	r3, [r7, #16]
      break;
 8001fb2:	e05a      	b.n	800206a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fb4:	4b32      	ldr	r3, [pc, #200]	@ (8002080 <HAL_RCC_GetSysClockFreq+0x104>)
 8001fb6:	613b      	str	r3, [r7, #16]
      break;
 8001fb8:	e057      	b.n	800206a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	0c9b      	lsrs	r3, r3, #18
 8001fbe:	220f      	movs	r2, #15
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	4a30      	ldr	r2, [pc, #192]	@ (8002084 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fc4:	5cd3      	ldrb	r3, [r2, r3]
 8001fc6:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	0d9b      	lsrs	r3, r3, #22
 8001fcc:	2203      	movs	r2, #3
 8001fce:	4013      	ands	r3, r2
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fd4:	4b27      	ldr	r3, [pc, #156]	@ (8002074 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fd6:	68da      	ldr	r2, [r3, #12]
 8001fd8:	2380      	movs	r3, #128	@ 0x80
 8001fda:	025b      	lsls	r3, r3, #9
 8001fdc:	4013      	ands	r3, r2
 8001fde:	d00f      	beq.n	8002000 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8001fe0:	68b9      	ldr	r1, [r7, #8]
 8001fe2:	000a      	movs	r2, r1
 8001fe4:	0152      	lsls	r2, r2, #5
 8001fe6:	1a52      	subs	r2, r2, r1
 8001fe8:	0193      	lsls	r3, r2, #6
 8001fea:	1a9b      	subs	r3, r3, r2
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	185b      	adds	r3, r3, r1
 8001ff0:	025b      	lsls	r3, r3, #9
 8001ff2:	6879      	ldr	r1, [r7, #4]
 8001ff4:	0018      	movs	r0, r3
 8001ff6:	f7fe f887 	bl	8000108 <__udivsi3>
 8001ffa:	0003      	movs	r3, r0
 8001ffc:	617b      	str	r3, [r7, #20]
 8001ffe:	e023      	b.n	8002048 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002000:	4b1c      	ldr	r3, [pc, #112]	@ (8002074 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2210      	movs	r2, #16
 8002006:	4013      	ands	r3, r2
 8002008:	d00f      	beq.n	800202a <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 800200a:	68b9      	ldr	r1, [r7, #8]
 800200c:	000a      	movs	r2, r1
 800200e:	0152      	lsls	r2, r2, #5
 8002010:	1a52      	subs	r2, r2, r1
 8002012:	0193      	lsls	r3, r2, #6
 8002014:	1a9b      	subs	r3, r3, r2
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	185b      	adds	r3, r3, r1
 800201a:	021b      	lsls	r3, r3, #8
 800201c:	6879      	ldr	r1, [r7, #4]
 800201e:	0018      	movs	r0, r3
 8002020:	f7fe f872 	bl	8000108 <__udivsi3>
 8002024:	0003      	movs	r3, r0
 8002026:	617b      	str	r3, [r7, #20]
 8002028:	e00e      	b.n	8002048 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 800202a:	68b9      	ldr	r1, [r7, #8]
 800202c:	000a      	movs	r2, r1
 800202e:	0152      	lsls	r2, r2, #5
 8002030:	1a52      	subs	r2, r2, r1
 8002032:	0193      	lsls	r3, r2, #6
 8002034:	1a9b      	subs	r3, r3, r2
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	185b      	adds	r3, r3, r1
 800203a:	029b      	lsls	r3, r3, #10
 800203c:	6879      	ldr	r1, [r7, #4]
 800203e:	0018      	movs	r0, r3
 8002040:	f7fe f862 	bl	8000108 <__udivsi3>
 8002044:	0003      	movs	r3, r0
 8002046:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	613b      	str	r3, [r7, #16]
      break;
 800204c:	e00d      	b.n	800206a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800204e:	4b09      	ldr	r3, [pc, #36]	@ (8002074 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	0b5b      	lsrs	r3, r3, #13
 8002054:	2207      	movs	r2, #7
 8002056:	4013      	ands	r3, r2
 8002058:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	3301      	adds	r3, #1
 800205e:	2280      	movs	r2, #128	@ 0x80
 8002060:	0212      	lsls	r2, r2, #8
 8002062:	409a      	lsls	r2, r3
 8002064:	0013      	movs	r3, r2
 8002066:	613b      	str	r3, [r7, #16]
      break;
 8002068:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800206a:	693b      	ldr	r3, [r7, #16]
}
 800206c:	0018      	movs	r0, r3
 800206e:	46bd      	mov	sp, r7
 8002070:	b006      	add	sp, #24
 8002072:	bd80      	pop	{r7, pc}
 8002074:	40021000 	.word	0x40021000
 8002078:	003d0900 	.word	0x003d0900
 800207c:	00f42400 	.word	0x00f42400
 8002080:	007a1200 	.word	0x007a1200
 8002084:	080049a4 	.word	0x080049a4

08002088 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800208c:	4b02      	ldr	r3, [pc, #8]	@ (8002098 <HAL_RCC_GetHCLKFreq+0x10>)
 800208e:	681b      	ldr	r3, [r3, #0]
}
 8002090:	0018      	movs	r0, r3
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	46c0      	nop			@ (mov r8, r8)
 8002098:	20000000 	.word	0x20000000

0800209c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020a0:	f7ff fff2 	bl	8002088 <HAL_RCC_GetHCLKFreq>
 80020a4:	0001      	movs	r1, r0
 80020a6:	4b06      	ldr	r3, [pc, #24]	@ (80020c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	0a1b      	lsrs	r3, r3, #8
 80020ac:	2207      	movs	r2, #7
 80020ae:	4013      	ands	r3, r2
 80020b0:	4a04      	ldr	r2, [pc, #16]	@ (80020c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80020b2:	5cd3      	ldrb	r3, [r2, r3]
 80020b4:	40d9      	lsrs	r1, r3
 80020b6:	000b      	movs	r3, r1
}
 80020b8:	0018      	movs	r0, r3
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	46c0      	nop			@ (mov r8, r8)
 80020c0:	40021000 	.word	0x40021000
 80020c4:	0800499c 	.word	0x0800499c

080020c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020cc:	f7ff ffdc 	bl	8002088 <HAL_RCC_GetHCLKFreq>
 80020d0:	0001      	movs	r1, r0
 80020d2:	4b06      	ldr	r3, [pc, #24]	@ (80020ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	0adb      	lsrs	r3, r3, #11
 80020d8:	2207      	movs	r2, #7
 80020da:	4013      	ands	r3, r2
 80020dc:	4a04      	ldr	r2, [pc, #16]	@ (80020f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80020de:	5cd3      	ldrb	r3, [r2, r3]
 80020e0:	40d9      	lsrs	r1, r3
 80020e2:	000b      	movs	r3, r1
}
 80020e4:	0018      	movs	r0, r3
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	46c0      	nop			@ (mov r8, r8)
 80020ec:	40021000 	.word	0x40021000
 80020f0:	0800499c 	.word	0x0800499c

080020f4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80020fc:	2017      	movs	r0, #23
 80020fe:	183b      	adds	r3, r7, r0
 8002100:	2200      	movs	r2, #0
 8002102:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2220      	movs	r2, #32
 800210a:	4013      	ands	r3, r2
 800210c:	d100      	bne.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800210e:	e0c7      	b.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002110:	4b9b      	ldr	r3, [pc, #620]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002112:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002114:	2380      	movs	r3, #128	@ 0x80
 8002116:	055b      	lsls	r3, r3, #21
 8002118:	4013      	ands	r3, r2
 800211a:	d109      	bne.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800211c:	4b98      	ldr	r3, [pc, #608]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800211e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002120:	4b97      	ldr	r3, [pc, #604]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002122:	2180      	movs	r1, #128	@ 0x80
 8002124:	0549      	lsls	r1, r1, #21
 8002126:	430a      	orrs	r2, r1
 8002128:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800212a:	183b      	adds	r3, r7, r0
 800212c:	2201      	movs	r2, #1
 800212e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002130:	4b94      	ldr	r3, [pc, #592]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	2380      	movs	r3, #128	@ 0x80
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	4013      	ands	r3, r2
 800213a:	d11a      	bne.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800213c:	4b91      	ldr	r3, [pc, #580]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	4b90      	ldr	r3, [pc, #576]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8002142:	2180      	movs	r1, #128	@ 0x80
 8002144:	0049      	lsls	r1, r1, #1
 8002146:	430a      	orrs	r2, r1
 8002148:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800214a:	f7fe fec9 	bl	8000ee0 <HAL_GetTick>
 800214e:	0003      	movs	r3, r0
 8002150:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002152:	e008      	b.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002154:	f7fe fec4 	bl	8000ee0 <HAL_GetTick>
 8002158:	0002      	movs	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b64      	cmp	r3, #100	@ 0x64
 8002160:	d901      	bls.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e107      	b.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002166:	4b87      	ldr	r3, [pc, #540]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	2380      	movs	r3, #128	@ 0x80
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	4013      	ands	r3, r2
 8002170:	d0f0      	beq.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002172:	4b83      	ldr	r3, [pc, #524]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	23c0      	movs	r3, #192	@ 0xc0
 8002178:	039b      	lsls	r3, r3, #14
 800217a:	4013      	ands	r3, r2
 800217c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685a      	ldr	r2, [r3, #4]
 8002182:	23c0      	movs	r3, #192	@ 0xc0
 8002184:	039b      	lsls	r3, r3, #14
 8002186:	4013      	ands	r3, r2
 8002188:	68fa      	ldr	r2, [r7, #12]
 800218a:	429a      	cmp	r2, r3
 800218c:	d013      	beq.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685a      	ldr	r2, [r3, #4]
 8002192:	23c0      	movs	r3, #192	@ 0xc0
 8002194:	029b      	lsls	r3, r3, #10
 8002196:	401a      	ands	r2, r3
 8002198:	23c0      	movs	r3, #192	@ 0xc0
 800219a:	029b      	lsls	r3, r3, #10
 800219c:	429a      	cmp	r2, r3
 800219e:	d10a      	bne.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80021a0:	4b77      	ldr	r3, [pc, #476]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	2380      	movs	r3, #128	@ 0x80
 80021a6:	029b      	lsls	r3, r3, #10
 80021a8:	401a      	ands	r2, r3
 80021aa:	2380      	movs	r3, #128	@ 0x80
 80021ac:	029b      	lsls	r3, r3, #10
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d101      	bne.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e0df      	b.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80021b6:	4b72      	ldr	r3, [pc, #456]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80021b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80021ba:	23c0      	movs	r3, #192	@ 0xc0
 80021bc:	029b      	lsls	r3, r3, #10
 80021be:	4013      	ands	r3, r2
 80021c0:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d03b      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685a      	ldr	r2, [r3, #4]
 80021cc:	23c0      	movs	r3, #192	@ 0xc0
 80021ce:	029b      	lsls	r3, r3, #10
 80021d0:	4013      	ands	r3, r2
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d033      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2220      	movs	r2, #32
 80021de:	4013      	ands	r3, r2
 80021e0:	d02e      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80021e2:	4b67      	ldr	r3, [pc, #412]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80021e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021e6:	4a68      	ldr	r2, [pc, #416]	@ (8002388 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80021e8:	4013      	ands	r3, r2
 80021ea:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80021ec:	4b64      	ldr	r3, [pc, #400]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80021ee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80021f0:	4b63      	ldr	r3, [pc, #396]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80021f2:	2180      	movs	r1, #128	@ 0x80
 80021f4:	0309      	lsls	r1, r1, #12
 80021f6:	430a      	orrs	r2, r1
 80021f8:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80021fa:	4b61      	ldr	r3, [pc, #388]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80021fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80021fe:	4b60      	ldr	r3, [pc, #384]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002200:	4962      	ldr	r1, [pc, #392]	@ (800238c <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8002202:	400a      	ands	r2, r1
 8002204:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002206:	4b5e      	ldr	r3, [pc, #376]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002208:	68fa      	ldr	r2, [r7, #12]
 800220a:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800220c:	68fa      	ldr	r2, [r7, #12]
 800220e:	2380      	movs	r3, #128	@ 0x80
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	4013      	ands	r3, r2
 8002214:	d014      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002216:	f7fe fe63 	bl	8000ee0 <HAL_GetTick>
 800221a:	0003      	movs	r3, r0
 800221c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800221e:	e009      	b.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002220:	f7fe fe5e 	bl	8000ee0 <HAL_GetTick>
 8002224:	0002      	movs	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	4a59      	ldr	r2, [pc, #356]	@ (8002390 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d901      	bls.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e0a0      	b.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002234:	4b52      	ldr	r3, [pc, #328]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002236:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002238:	2380      	movs	r3, #128	@ 0x80
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	4013      	ands	r3, r2
 800223e:	d0ef      	beq.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2220      	movs	r2, #32
 8002246:	4013      	ands	r3, r2
 8002248:	d01f      	beq.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685a      	ldr	r2, [r3, #4]
 800224e:	23c0      	movs	r3, #192	@ 0xc0
 8002250:	029b      	lsls	r3, r3, #10
 8002252:	401a      	ands	r2, r3
 8002254:	23c0      	movs	r3, #192	@ 0xc0
 8002256:	029b      	lsls	r3, r3, #10
 8002258:	429a      	cmp	r2, r3
 800225a:	d10c      	bne.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x182>
 800225c:	4b48      	ldr	r3, [pc, #288]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a4c      	ldr	r2, [pc, #304]	@ (8002394 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002262:	4013      	ands	r3, r2
 8002264:	0019      	movs	r1, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685a      	ldr	r2, [r3, #4]
 800226a:	23c0      	movs	r3, #192	@ 0xc0
 800226c:	039b      	lsls	r3, r3, #14
 800226e:	401a      	ands	r2, r3
 8002270:	4b43      	ldr	r3, [pc, #268]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002272:	430a      	orrs	r2, r1
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	4b42      	ldr	r3, [pc, #264]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002278:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685a      	ldr	r2, [r3, #4]
 800227e:	23c0      	movs	r3, #192	@ 0xc0
 8002280:	029b      	lsls	r3, r3, #10
 8002282:	401a      	ands	r2, r3
 8002284:	4b3e      	ldr	r3, [pc, #248]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002286:	430a      	orrs	r2, r1
 8002288:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800228a:	2317      	movs	r3, #23
 800228c:	18fb      	adds	r3, r7, r3
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d105      	bne.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002294:	4b3a      	ldr	r3, [pc, #232]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002296:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002298:	4b39      	ldr	r3, [pc, #228]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800229a:	493f      	ldr	r1, [pc, #252]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800229c:	400a      	ands	r2, r1
 800229e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2201      	movs	r2, #1
 80022a6:	4013      	ands	r3, r2
 80022a8:	d009      	beq.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022aa:	4b35      	ldr	r3, [pc, #212]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80022ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ae:	2203      	movs	r2, #3
 80022b0:	4393      	bics	r3, r2
 80022b2:	0019      	movs	r1, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689a      	ldr	r2, [r3, #8]
 80022b8:	4b31      	ldr	r3, [pc, #196]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80022ba:	430a      	orrs	r2, r1
 80022bc:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2202      	movs	r2, #2
 80022c4:	4013      	ands	r3, r2
 80022c6:	d009      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022c8:	4b2d      	ldr	r3, [pc, #180]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80022ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022cc:	220c      	movs	r2, #12
 80022ce:	4393      	bics	r3, r2
 80022d0:	0019      	movs	r1, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	68da      	ldr	r2, [r3, #12]
 80022d6:	4b2a      	ldr	r3, [pc, #168]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80022d8:	430a      	orrs	r2, r1
 80022da:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2204      	movs	r2, #4
 80022e2:	4013      	ands	r3, r2
 80022e4:	d009      	beq.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022e6:	4b26      	ldr	r3, [pc, #152]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80022e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ea:	4a2c      	ldr	r2, [pc, #176]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80022ec:	4013      	ands	r3, r2
 80022ee:	0019      	movs	r1, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	691a      	ldr	r2, [r3, #16]
 80022f4:	4b22      	ldr	r3, [pc, #136]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80022f6:	430a      	orrs	r2, r1
 80022f8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2208      	movs	r2, #8
 8002300:	4013      	ands	r3, r2
 8002302:	d009      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002304:	4b1e      	ldr	r3, [pc, #120]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002306:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002308:	4a25      	ldr	r2, [pc, #148]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800230a:	4013      	ands	r3, r2
 800230c:	0019      	movs	r1, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	695a      	ldr	r2, [r3, #20]
 8002312:	4b1b      	ldr	r3, [pc, #108]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002314:	430a      	orrs	r2, r1
 8002316:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	2380      	movs	r3, #128	@ 0x80
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	4013      	ands	r3, r2
 8002322:	d009      	beq.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002324:	4b16      	ldr	r3, [pc, #88]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002326:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002328:	4a17      	ldr	r2, [pc, #92]	@ (8002388 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800232a:	4013      	ands	r3, r2
 800232c:	0019      	movs	r1, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	699a      	ldr	r2, [r3, #24]
 8002332:	4b13      	ldr	r3, [pc, #76]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002334:	430a      	orrs	r2, r1
 8002336:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2240      	movs	r2, #64	@ 0x40
 800233e:	4013      	ands	r3, r2
 8002340:	d009      	beq.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002342:	4b0f      	ldr	r3, [pc, #60]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002344:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002346:	4a17      	ldr	r2, [pc, #92]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8002348:	4013      	ands	r3, r2
 800234a:	0019      	movs	r1, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a1a      	ldr	r2, [r3, #32]
 8002350:	4b0b      	ldr	r3, [pc, #44]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002352:	430a      	orrs	r2, r1
 8002354:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2280      	movs	r2, #128	@ 0x80
 800235c:	4013      	ands	r3, r2
 800235e:	d009      	beq.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002360:	4b07      	ldr	r3, [pc, #28]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002362:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002364:	4a10      	ldr	r2, [pc, #64]	@ (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8002366:	4013      	ands	r3, r2
 8002368:	0019      	movs	r1, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	69da      	ldr	r2, [r3, #28]
 800236e:	4b04      	ldr	r3, [pc, #16]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002370:	430a      	orrs	r2, r1
 8002372:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	0018      	movs	r0, r3
 8002378:	46bd      	mov	sp, r7
 800237a:	b006      	add	sp, #24
 800237c:	bd80      	pop	{r7, pc}
 800237e:	46c0      	nop			@ (mov r8, r8)
 8002380:	40021000 	.word	0x40021000
 8002384:	40007000 	.word	0x40007000
 8002388:	fffcffff 	.word	0xfffcffff
 800238c:	fff7ffff 	.word	0xfff7ffff
 8002390:	00001388 	.word	0x00001388
 8002394:	ffcfffff 	.word	0xffcfffff
 8002398:	efffffff 	.word	0xefffffff
 800239c:	fffff3ff 	.word	0xfffff3ff
 80023a0:	ffffcfff 	.word	0xffffcfff
 80023a4:	fbffffff 	.word	0xfbffffff
 80023a8:	fff3ffff 	.word	0xfff3ffff

080023ac <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80023ac:	b5b0      	push	{r4, r5, r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80023b4:	230f      	movs	r3, #15
 80023b6:	18fb      	adds	r3, r7, r3
 80023b8:	2201      	movs	r2, #1
 80023ba:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d101      	bne.n	80023c6 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e088      	b.n	80024d8 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2221      	movs	r2, #33	@ 0x21
 80023ca:	5c9b      	ldrb	r3, [r3, r2]
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d107      	bne.n	80023e2 <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2220      	movs	r2, #32
 80023d6:	2100      	movs	r1, #0
 80023d8:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	0018      	movs	r0, r3
 80023de:	f7fe fb61 	bl	8000aa4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2221      	movs	r2, #33	@ 0x21
 80023e6:	2102      	movs	r1, #2
 80023e8:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	2210      	movs	r2, #16
 80023f2:	4013      	ands	r3, r2
 80023f4:	2b10      	cmp	r3, #16
 80023f6:	d05f      	beq.n	80024b8 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	22ca      	movs	r2, #202	@ 0xca
 80023fe:	625a      	str	r2, [r3, #36]	@ 0x24
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2253      	movs	r2, #83	@ 0x53
 8002406:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002408:	250f      	movs	r5, #15
 800240a:	197c      	adds	r4, r7, r5
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	0018      	movs	r0, r3
 8002410:	f000 fb86 	bl	8002b20 <RTC_EnterInitMode>
 8002414:	0003      	movs	r3, r0
 8002416:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8002418:	0028      	movs	r0, r5
 800241a:	183b      	adds	r3, r7, r0
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d12c      	bne.n	800247c <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	689a      	ldr	r2, [r3, #8]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	492c      	ldr	r1, [pc, #176]	@ (80024e0 <HAL_RTC_Init+0x134>)
 800242e:	400a      	ands	r2, r1
 8002430:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	6899      	ldr	r1, [r3, #8]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685a      	ldr	r2, [r3, #4]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	691b      	ldr	r3, [r3, #16]
 8002440:	431a      	orrs	r2, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	431a      	orrs	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	430a      	orrs	r2, r1
 800244e:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	68d2      	ldr	r2, [r2, #12]
 8002458:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	6919      	ldr	r1, [r3, #16]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	041a      	lsls	r2, r3, #16
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	430a      	orrs	r2, r1
 800246c:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800246e:	183c      	adds	r4, r7, r0
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	0018      	movs	r0, r3
 8002474:	f000 fb98 	bl	8002ba8 <RTC_ExitInitMode>
 8002478:	0003      	movs	r3, r0
 800247a:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 800247c:	230f      	movs	r3, #15
 800247e:	18fb      	adds	r3, r7, r3
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d113      	bne.n	80024ae <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2103      	movs	r1, #3
 8002492:	438a      	bics	r2, r1
 8002494:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	69da      	ldr	r2, [r3, #28]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	695b      	ldr	r3, [r3, #20]
 80024a4:	431a      	orrs	r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	430a      	orrs	r2, r1
 80024ac:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	22ff      	movs	r2, #255	@ 0xff
 80024b4:	625a      	str	r2, [r3, #36]	@ 0x24
 80024b6:	e003      	b.n	80024c0 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80024b8:	230f      	movs	r3, #15
 80024ba:	18fb      	adds	r3, r7, r3
 80024bc:	2200      	movs	r2, #0
 80024be:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 80024c0:	230f      	movs	r3, #15
 80024c2:	18fb      	adds	r3, r7, r3
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d103      	bne.n	80024d2 <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2221      	movs	r2, #33	@ 0x21
 80024ce:	2101      	movs	r1, #1
 80024d0:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80024d2:	230f      	movs	r3, #15
 80024d4:	18fb      	adds	r3, r7, r3
 80024d6:	781b      	ldrb	r3, [r3, #0]
}
 80024d8:	0018      	movs	r0, r3
 80024da:	46bd      	mov	sp, r7
 80024dc:	b004      	add	sp, #16
 80024de:	bdb0      	pop	{r4, r5, r7, pc}
 80024e0:	ff8fffbf 	.word	0xff8fffbf

080024e4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80024e4:	b5b0      	push	{r4, r5, r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80024f0:	2300      	movs	r3, #0
 80024f2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2220      	movs	r2, #32
 80024f8:	5c9b      	ldrb	r3, [r3, r2]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d101      	bne.n	8002502 <HAL_RTC_SetTime+0x1e>
 80024fe:	2302      	movs	r3, #2
 8002500:	e092      	b.n	8002628 <HAL_RTC_SetTime+0x144>
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2220      	movs	r2, #32
 8002506:	2101      	movs	r1, #1
 8002508:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2221      	movs	r2, #33	@ 0x21
 800250e:	2102      	movs	r1, #2
 8002510:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d125      	bne.n	8002564 <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	2240      	movs	r2, #64	@ 0x40
 8002520:	4013      	ands	r3, r2
 8002522:	d102      	bne.n	800252a <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	2200      	movs	r2, #0
 8002528:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	0018      	movs	r0, r3
 8002530:	f000 fb64 	bl	8002bfc <RTC_ByteToBcd2>
 8002534:	0003      	movs	r3, r0
 8002536:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	785b      	ldrb	r3, [r3, #1]
 800253c:	0018      	movs	r0, r3
 800253e:	f000 fb5d 	bl	8002bfc <RTC_ByteToBcd2>
 8002542:	0003      	movs	r3, r0
 8002544:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002546:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	789b      	ldrb	r3, [r3, #2]
 800254c:	0018      	movs	r0, r3
 800254e:	f000 fb55 	bl	8002bfc <RTC_ByteToBcd2>
 8002552:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002554:	0022      	movs	r2, r4
 8002556:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	78db      	ldrb	r3, [r3, #3]
 800255c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800255e:	4313      	orrs	r3, r2
 8002560:	617b      	str	r3, [r7, #20]
 8002562:	e017      	b.n	8002594 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	2240      	movs	r2, #64	@ 0x40
 800256c:	4013      	ands	r3, r2
 800256e:	d102      	bne.n	8002576 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	2200      	movs	r2, #0
 8002574:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	785b      	ldrb	r3, [r3, #1]
 8002580:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002582:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8002584:	68ba      	ldr	r2, [r7, #8]
 8002586:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002588:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	78db      	ldrb	r3, [r3, #3]
 800258e:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002590:	4313      	orrs	r3, r2
 8002592:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	22ca      	movs	r2, #202	@ 0xca
 800259a:	625a      	str	r2, [r3, #36]	@ 0x24
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2253      	movs	r2, #83	@ 0x53
 80025a2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80025a4:	2513      	movs	r5, #19
 80025a6:	197c      	adds	r4, r7, r5
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	0018      	movs	r0, r3
 80025ac:	f000 fab8 	bl	8002b20 <RTC_EnterInitMode>
 80025b0:	0003      	movs	r3, r0
 80025b2:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80025b4:	0028      	movs	r0, r5
 80025b6:	183b      	adds	r3, r7, r0
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d120      	bne.n	8002600 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	697a      	ldr	r2, [r7, #20]
 80025c4:	491a      	ldr	r1, [pc, #104]	@ (8002630 <HAL_RTC_SetTime+0x14c>)
 80025c6:	400a      	ands	r2, r1
 80025c8:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	689a      	ldr	r2, [r3, #8]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4917      	ldr	r1, [pc, #92]	@ (8002634 <HAL_RTC_SetTime+0x150>)
 80025d6:	400a      	ands	r2, r1
 80025d8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	6899      	ldr	r1, [r3, #8]
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	68da      	ldr	r2, [r3, #12]
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	431a      	orrs	r2, r3
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	430a      	orrs	r2, r1
 80025f0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80025f2:	183c      	adds	r4, r7, r0
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	0018      	movs	r0, r3
 80025f8:	f000 fad6 	bl	8002ba8 <RTC_ExitInitMode>
 80025fc:	0003      	movs	r3, r0
 80025fe:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8002600:	2313      	movs	r3, #19
 8002602:	18fb      	adds	r3, r7, r3
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d103      	bne.n	8002612 <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2221      	movs	r2, #33	@ 0x21
 800260e:	2101      	movs	r1, #1
 8002610:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	22ff      	movs	r2, #255	@ 0xff
 8002618:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2220      	movs	r2, #32
 800261e:	2100      	movs	r1, #0
 8002620:	5499      	strb	r1, [r3, r2]

  return status;
 8002622:	2313      	movs	r3, #19
 8002624:	18fb      	adds	r3, r7, r3
 8002626:	781b      	ldrb	r3, [r3, #0]
}
 8002628:	0018      	movs	r0, r3
 800262a:	46bd      	mov	sp, r7
 800262c:	b006      	add	sp, #24
 800262e:	bdb0      	pop	{r4, r5, r7, pc}
 8002630:	007f7f7f 	.word	0x007f7f7f
 8002634:	fffbffff 	.word	0xfffbffff

08002638 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002638:	b5b0      	push	{r4, r5, r7, lr}
 800263a:	b086      	sub	sp, #24
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002644:	2300      	movs	r3, #0
 8002646:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2220      	movs	r2, #32
 800264c:	5c9b      	ldrb	r3, [r3, r2]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d101      	bne.n	8002656 <HAL_RTC_SetDate+0x1e>
 8002652:	2302      	movs	r3, #2
 8002654:	e07e      	b.n	8002754 <HAL_RTC_SetDate+0x11c>
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2220      	movs	r2, #32
 800265a:	2101      	movs	r1, #1
 800265c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2221      	movs	r2, #33	@ 0x21
 8002662:	2102      	movs	r1, #2
 8002664:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d10e      	bne.n	800268a <HAL_RTC_SetDate+0x52>
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	785b      	ldrb	r3, [r3, #1]
 8002670:	001a      	movs	r2, r3
 8002672:	2310      	movs	r3, #16
 8002674:	4013      	ands	r3, r2
 8002676:	d008      	beq.n	800268a <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	785b      	ldrb	r3, [r3, #1]
 800267c:	2210      	movs	r2, #16
 800267e:	4393      	bics	r3, r2
 8002680:	b2db      	uxtb	r3, r3
 8002682:	330a      	adds	r3, #10
 8002684:	b2da      	uxtb	r2, r3
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d11c      	bne.n	80026ca <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	78db      	ldrb	r3, [r3, #3]
 8002694:	0018      	movs	r0, r3
 8002696:	f000 fab1 	bl	8002bfc <RTC_ByteToBcd2>
 800269a:	0003      	movs	r3, r0
 800269c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	785b      	ldrb	r3, [r3, #1]
 80026a2:	0018      	movs	r0, r3
 80026a4:	f000 faaa 	bl	8002bfc <RTC_ByteToBcd2>
 80026a8:	0003      	movs	r3, r0
 80026aa:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80026ac:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	789b      	ldrb	r3, [r3, #2]
 80026b2:	0018      	movs	r0, r3
 80026b4:	f000 faa2 	bl	8002bfc <RTC_ByteToBcd2>
 80026b8:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80026ba:	0022      	movs	r2, r4
 80026bc:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80026c4:	4313      	orrs	r3, r2
 80026c6:	617b      	str	r3, [r7, #20]
 80026c8:	e00e      	b.n	80026e8 <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	78db      	ldrb	r3, [r3, #3]
 80026ce:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	785b      	ldrb	r3, [r3, #1]
 80026d4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80026d6:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80026d8:	68ba      	ldr	r2, [r7, #8]
 80026da:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80026dc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80026e4:	4313      	orrs	r3, r2
 80026e6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	22ca      	movs	r2, #202	@ 0xca
 80026ee:	625a      	str	r2, [r3, #36]	@ 0x24
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2253      	movs	r2, #83	@ 0x53
 80026f6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80026f8:	2513      	movs	r5, #19
 80026fa:	197c      	adds	r4, r7, r5
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	0018      	movs	r0, r3
 8002700:	f000 fa0e 	bl	8002b20 <RTC_EnterInitMode>
 8002704:	0003      	movs	r3, r0
 8002706:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8002708:	0028      	movs	r0, r5
 800270a:	183b      	adds	r3, r7, r0
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d10c      	bne.n	800272c <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	697a      	ldr	r2, [r7, #20]
 8002718:	4910      	ldr	r1, [pc, #64]	@ (800275c <HAL_RTC_SetDate+0x124>)
 800271a:	400a      	ands	r2, r1
 800271c:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800271e:	183c      	adds	r4, r7, r0
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	0018      	movs	r0, r3
 8002724:	f000 fa40 	bl	8002ba8 <RTC_ExitInitMode>
 8002728:	0003      	movs	r3, r0
 800272a:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 800272c:	2313      	movs	r3, #19
 800272e:	18fb      	adds	r3, r7, r3
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d103      	bne.n	800273e <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2221      	movs	r2, #33	@ 0x21
 800273a:	2101      	movs	r1, #1
 800273c:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	22ff      	movs	r2, #255	@ 0xff
 8002744:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2220      	movs	r2, #32
 800274a:	2100      	movs	r1, #0
 800274c:	5499      	strb	r1, [r3, r2]

  return status;
 800274e:	2313      	movs	r3, #19
 8002750:	18fb      	adds	r3, r7, r3
 8002752:	781b      	ldrb	r3, [r3, #0]
}
 8002754:	0018      	movs	r0, r3
 8002756:	46bd      	mov	sp, r7
 8002758:	b006      	add	sp, #24
 800275a:	bdb0      	pop	{r4, r5, r7, pc}
 800275c:	00ffff3f 	.word	0x00ffff3f

08002760 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002760:	b590      	push	{r4, r7, lr}
 8002762:	b089      	sub	sp, #36	@ 0x24
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800276c:	4ba7      	ldr	r3, [pc, #668]	@ (8002a0c <HAL_RTC_SetAlarm_IT+0x2ac>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	22fa      	movs	r2, #250	@ 0xfa
 8002772:	01d1      	lsls	r1, r2, #7
 8002774:	0018      	movs	r0, r3
 8002776:	f7fd fcc7 	bl	8000108 <__udivsi3>
 800277a:	0003      	movs	r3, r0
 800277c:	001a      	movs	r2, r3
 800277e:	0013      	movs	r3, r2
 8002780:	015b      	lsls	r3, r3, #5
 8002782:	1a9b      	subs	r3, r3, r2
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	189b      	adds	r3, r3, r2
 8002788:	00db      	lsls	r3, r3, #3
 800278a:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 800278c:	2300      	movs	r3, #0
 800278e:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8002790:	2300      	movs	r3, #0
 8002792:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2220      	movs	r2, #32
 8002798:	5c9b      	ldrb	r3, [r3, r2]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d101      	bne.n	80027a2 <HAL_RTC_SetAlarm_IT+0x42>
 800279e:	2302      	movs	r3, #2
 80027a0:	e130      	b.n	8002a04 <HAL_RTC_SetAlarm_IT+0x2a4>
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2220      	movs	r2, #32
 80027a6:	2101      	movs	r1, #1
 80027a8:	5499      	strb	r1, [r3, r2]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2221      	movs	r2, #33	@ 0x21
 80027ae:	2102      	movs	r1, #2
 80027b0:	5499      	strb	r1, [r3, r2]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d136      	bne.n	8002826 <HAL_RTC_SetAlarm_IT+0xc6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	2240      	movs	r2, #64	@ 0x40
 80027c0:	4013      	ands	r3, r2
 80027c2:	d102      	bne.n	80027ca <HAL_RTC_SetAlarm_IT+0x6a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	2200      	movs	r2, #0
 80027c8:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	0018      	movs	r0, r3
 80027d0:	f000 fa14 	bl	8002bfc <RTC_ByteToBcd2>
 80027d4:	0003      	movs	r3, r0
 80027d6:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	785b      	ldrb	r3, [r3, #1]
 80027dc:	0018      	movs	r0, r3
 80027de:	f000 fa0d 	bl	8002bfc <RTC_ByteToBcd2>
 80027e2:	0003      	movs	r3, r0
 80027e4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80027e6:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	789b      	ldrb	r3, [r3, #2]
 80027ec:	0018      	movs	r0, r3
 80027ee:	f000 fa05 	bl	8002bfc <RTC_ByteToBcd2>
 80027f2:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80027f4:	0022      	movs	r2, r4
 80027f6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	78db      	ldrb	r3, [r3, #3]
 80027fc:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80027fe:	431a      	orrs	r2, r3
 8002800:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	2220      	movs	r2, #32
 8002806:	5c9b      	ldrb	r3, [r3, r2]
 8002808:	0018      	movs	r0, r3
 800280a:	f000 f9f7 	bl	8002bfc <RTC_ByteToBcd2>
 800280e:	0003      	movs	r3, r0
 8002810:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 8002812:	0022      	movs	r2, r4
 8002814:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800281a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8002820:	4313      	orrs	r3, r2
 8002822:	61fb      	str	r3, [r7, #28]
 8002824:	e022      	b.n	800286c <HAL_RTC_SetAlarm_IT+0x10c>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	2240      	movs	r2, #64	@ 0x40
 800282e:	4013      	ands	r3, r2
 8002830:	d102      	bne.n	8002838 <HAL_RTC_SetAlarm_IT+0xd8>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	2200      	movs	r2, #0
 8002836:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	785b      	ldrb	r3, [r3, #1]
 8002842:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002844:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8002846:	68ba      	ldr	r2, [r7, #8]
 8002848:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800284a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	78db      	ldrb	r3, [r3, #3]
 8002850:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8002852:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	2120      	movs	r1, #32
 8002858:	5c5b      	ldrb	r3, [r3, r1]
 800285a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 800285c:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8002862:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002868:	4313      	orrs	r3, r2
 800286a:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8002874:	4313      	orrs	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	22ca      	movs	r2, #202	@ 0xca
 800287e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2253      	movs	r2, #83	@ 0x53
 8002886:	625a      	str	r2, [r3, #36]	@ 0x24

  if (sAlarm->Alarm == RTC_ALARM_A)
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800288c:	2380      	movs	r3, #128	@ 0x80
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	429a      	cmp	r2, r3
 8002892:	d146      	bne.n	8002922 <HAL_RTC_SetAlarm_IT+0x1c2>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	689a      	ldr	r2, [r3, #8]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	495c      	ldr	r1, [pc, #368]	@ (8002a10 <HAL_RTC_SetAlarm_IT+0x2b0>)
 80028a0:	400a      	ands	r2, r1
 80028a2:	609a      	str	r2, [r3, #8]

    /* Clear Alarm A flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	22ff      	movs	r2, #255	@ 0xff
 80028ac:	401a      	ands	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4958      	ldr	r1, [pc, #352]	@ (8002a14 <HAL_RTC_SetAlarm_IT+0x2b4>)
 80028b4:	430a      	orrs	r2, r1
 80028b6:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	3b01      	subs	r3, #1
 80028bc:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d10d      	bne.n	80028e0 <HAL_RTC_SetAlarm_IT+0x180>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	22ff      	movs	r2, #255	@ 0xff
 80028ca:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2221      	movs	r2, #33	@ 0x21
 80028d0:	2103      	movs	r1, #3
 80028d2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2220      	movs	r2, #32
 80028d8:	2100      	movs	r1, #0
 80028da:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e091      	b.n	8002a04 <HAL_RTC_SetAlarm_IT+0x2a4>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	2201      	movs	r2, #1
 80028e8:	4013      	ands	r3, r2
 80028ea:	d0e5      	beq.n	80028b8 <HAL_RTC_SetAlarm_IT+0x158>

  /* Configure Alarm A register */
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	69fa      	ldr	r2, [r7, #28]
 80028f2:	61da      	str	r2, [r3, #28]
    /* Configure Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable Alarm A */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	689a      	ldr	r2, [r3, #8]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2180      	movs	r1, #128	@ 0x80
 8002908:	0049      	lsls	r1, r1, #1
 800290a:	430a      	orrs	r2, r1
 800290c:	609a      	str	r2, [r3, #8]
    /* Enable Alarm A interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	689a      	ldr	r2, [r3, #8]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2180      	movs	r1, #128	@ 0x80
 800291a:	0149      	lsls	r1, r1, #5
 800291c:	430a      	orrs	r2, r1
 800291e:	609a      	str	r2, [r3, #8]
 8002920:	e055      	b.n	80029ce <HAL_RTC_SetAlarm_IT+0x26e>
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	689a      	ldr	r2, [r3, #8]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	493a      	ldr	r1, [pc, #232]	@ (8002a18 <HAL_RTC_SetAlarm_IT+0x2b8>)
 800292e:	400a      	ands	r2, r1
 8002930:	609a      	str	r2, [r3, #8]

    /* Clear Alarm B flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	22ff      	movs	r2, #255	@ 0xff
 800293a:	401a      	ands	r2, r3
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4936      	ldr	r1, [pc, #216]	@ (8002a1c <HAL_RTC_SetAlarm_IT+0x2bc>)
 8002942:	430a      	orrs	r2, r1
 8002944:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8002946:	4b31      	ldr	r3, [pc, #196]	@ (8002a0c <HAL_RTC_SetAlarm_IT+0x2ac>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	22fa      	movs	r2, #250	@ 0xfa
 800294c:	01d1      	lsls	r1, r2, #7
 800294e:	0018      	movs	r0, r3
 8002950:	f7fd fbda 	bl	8000108 <__udivsi3>
 8002954:	0003      	movs	r3, r0
 8002956:	001a      	movs	r2, r3
 8002958:	0013      	movs	r3, r2
 800295a:	015b      	lsls	r3, r3, #5
 800295c:	1a9b      	subs	r3, r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	189b      	adds	r3, r3, r2
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	3b01      	subs	r3, #1
 800296a:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d10d      	bne.n	800298e <HAL_RTC_SetAlarm_IT+0x22e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	22ff      	movs	r2, #255	@ 0xff
 8002978:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2221      	movs	r2, #33	@ 0x21
 800297e:	2103      	movs	r1, #3
 8002980:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2220      	movs	r2, #32
 8002986:	2100      	movs	r1, #0
 8002988:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e03a      	b.n	8002a04 <HAL_RTC_SetAlarm_IT+0x2a4>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	2202      	movs	r2, #2
 8002996:	4013      	ands	r3, r2
 8002998:	d0e5      	beq.n	8002966 <HAL_RTC_SetAlarm_IT+0x206>

    /* Configure Alarm B register */
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	69fa      	ldr	r2, [r7, #28]
 80029a0:	621a      	str	r2, [r3, #32]
    /* Configure Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Enable Alarm B */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	689a      	ldr	r2, [r3, #8]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2180      	movs	r1, #128	@ 0x80
 80029b6:	0089      	lsls	r1, r1, #2
 80029b8:	430a      	orrs	r2, r1
 80029ba:	609a      	str	r2, [r3, #8]
    /* Enable Alarm B interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	689a      	ldr	r2, [r3, #8]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2180      	movs	r1, #128	@ 0x80
 80029c8:	0189      	lsls	r1, r1, #6
 80029ca:	430a      	orrs	r2, r1
 80029cc:	609a      	str	r2, [r3, #8]
  }

  /* Enable and configure the EXTI line associated to the RTC Alarm interrupt */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80029ce:	4b14      	ldr	r3, [pc, #80]	@ (8002a20 <HAL_RTC_SetAlarm_IT+0x2c0>)
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	4b13      	ldr	r3, [pc, #76]	@ (8002a20 <HAL_RTC_SetAlarm_IT+0x2c0>)
 80029d4:	2180      	movs	r1, #128	@ 0x80
 80029d6:	0289      	lsls	r1, r1, #10
 80029d8:	430a      	orrs	r2, r1
 80029da:	601a      	str	r2, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80029dc:	4b10      	ldr	r3, [pc, #64]	@ (8002a20 <HAL_RTC_SetAlarm_IT+0x2c0>)
 80029de:	689a      	ldr	r2, [r3, #8]
 80029e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002a20 <HAL_RTC_SetAlarm_IT+0x2c0>)
 80029e2:	2180      	movs	r1, #128	@ 0x80
 80029e4:	0289      	lsls	r1, r1, #10
 80029e6:	430a      	orrs	r2, r1
 80029e8:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	22ff      	movs	r2, #255	@ 0xff
 80029f0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2221      	movs	r2, #33	@ 0x21
 80029f6:	2101      	movs	r1, #1
 80029f8:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2220      	movs	r2, #32
 80029fe:	2100      	movs	r1, #0
 8002a00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	0018      	movs	r0, r3
 8002a06:	46bd      	mov	sp, r7
 8002a08:	b009      	add	sp, #36	@ 0x24
 8002a0a:	bd90      	pop	{r4, r7, pc}
 8002a0c:	20000000 	.word	0x20000000
 8002a10:	fffffeff 	.word	0xfffffeff
 8002a14:	fffffe7f 	.word	0xfffffe7f
 8002a18:	fffffdff 	.word	0xfffffdff
 8002a1c:	fffffd7f 	.word	0xfffffd7f
 8002a20:	40010400 	.word	0x40010400

08002a24 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI flag associated to the RTC Alarm interrupt */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002a2c:	4b21      	ldr	r3, [pc, #132]	@ (8002ab4 <HAL_RTC_AlarmIRQHandler+0x90>)
 8002a2e:	2280      	movs	r2, #128	@ 0x80
 8002a30:	0292      	lsls	r2, r2, #10
 8002a32:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	689a      	ldr	r2, [r3, #8]
 8002a3a:	2380      	movs	r3, #128	@ 0x80
 8002a3c:	015b      	lsls	r3, r3, #5
 8002a3e:	4013      	ands	r3, r2
 8002a40:	d014      	beq.n	8002a6c <HAL_RTC_AlarmIRQHandler+0x48>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68da      	ldr	r2, [r3, #12]
 8002a48:	2380      	movs	r3, #128	@ 0x80
 8002a4a:	005b      	lsls	r3, r3, #1
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	d00d      	beq.n	8002a6c <HAL_RTC_AlarmIRQHandler+0x48>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	22ff      	movs	r2, #255	@ 0xff
 8002a58:	401a      	ands	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4916      	ldr	r1, [pc, #88]	@ (8002ab8 <HAL_RTC_AlarmIRQHandler+0x94>)
 8002a60:	430a      	orrs	r2, r1
 8002a62:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	0018      	movs	r0, r3
 8002a68:	f000 f82a 	bl	8002ac0 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	689a      	ldr	r2, [r3, #8]
 8002a72:	2380      	movs	r3, #128	@ 0x80
 8002a74:	019b      	lsls	r3, r3, #6
 8002a76:	4013      	ands	r3, r2
 8002a78:	d014      	beq.n	8002aa4 <HAL_RTC_AlarmIRQHandler+0x80>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68da      	ldr	r2, [r3, #12]
 8002a80:	2380      	movs	r3, #128	@ 0x80
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	4013      	ands	r3, r2
 8002a86:	d00d      	beq.n	8002aa4 <HAL_RTC_AlarmIRQHandler+0x80>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	22ff      	movs	r2, #255	@ 0xff
 8002a90:	401a      	ands	r2, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4909      	ldr	r1, [pc, #36]	@ (8002abc <HAL_RTC_AlarmIRQHandler+0x98>)
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	0018      	movs	r0, r3
 8002aa0:	f000 f8cd 	bl	8002c3e <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2221      	movs	r2, #33	@ 0x21
 8002aa8:	2101      	movs	r1, #1
 8002aaa:	5499      	strb	r1, [r3, r2]
}
 8002aac:	46c0      	nop			@ (mov r8, r8)
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	b002      	add	sp, #8
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	40010400 	.word	0x40010400
 8002ab8:	fffffe7f 	.word	0xfffffe7f
 8002abc:	fffffd7f 	.word	0xfffffd7f

08002ac0 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8002ac8:	46c0      	nop			@ (mov r8, r8)
 8002aca:	46bd      	mov	sp, r7
 8002acc:	b002      	add	sp, #8
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a0e      	ldr	r2, [pc, #56]	@ (8002b1c <HAL_RTC_WaitForSynchro+0x4c>)
 8002ae2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ae4:	f7fe f9fc 	bl	8000ee0 <HAL_GetTick>
 8002ae8:	0003      	movs	r3, r0
 8002aea:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002aec:	e00a      	b.n	8002b04 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002aee:	f7fe f9f7 	bl	8000ee0 <HAL_GetTick>
 8002af2:	0002      	movs	r2, r0
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	1ad2      	subs	r2, r2, r3
 8002af8:	23fa      	movs	r3, #250	@ 0xfa
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d901      	bls.n	8002b04 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e006      	b.n	8002b12 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	2220      	movs	r2, #32
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	d0ee      	beq.n	8002aee <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	0018      	movs	r0, r3
 8002b14:	46bd      	mov	sp, r7
 8002b16:	b004      	add	sp, #16
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	46c0      	nop			@ (mov r8, r8)
 8002b1c:	0001ff5f 	.word	0x0001ff5f

08002b20 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002b2c:	230f      	movs	r3, #15
 8002b2e:	18fb      	adds	r3, r7, r3
 8002b30:	2200      	movs	r2, #0
 8002b32:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	2240      	movs	r2, #64	@ 0x40
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	d12c      	bne.n	8002b9a <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	68da      	ldr	r2, [r3, #12]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2180      	movs	r1, #128	@ 0x80
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002b50:	f7fe f9c6 	bl	8000ee0 <HAL_GetTick>
 8002b54:	0003      	movs	r3, r0
 8002b56:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002b58:	e014      	b.n	8002b84 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002b5a:	f7fe f9c1 	bl	8000ee0 <HAL_GetTick>
 8002b5e:	0002      	movs	r2, r0
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	1ad2      	subs	r2, r2, r3
 8002b64:	200f      	movs	r0, #15
 8002b66:	183b      	adds	r3, r7, r0
 8002b68:	1839      	adds	r1, r7, r0
 8002b6a:	7809      	ldrb	r1, [r1, #0]
 8002b6c:	7019      	strb	r1, [r3, #0]
 8002b6e:	23fa      	movs	r3, #250	@ 0xfa
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d906      	bls.n	8002b84 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2221      	movs	r2, #33	@ 0x21
 8002b7a:	2104      	movs	r1, #4
 8002b7c:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8002b7e:	183b      	adds	r3, r7, r0
 8002b80:	2201      	movs	r2, #1
 8002b82:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	2240      	movs	r2, #64	@ 0x40
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	d104      	bne.n	8002b9a <RTC_EnterInitMode+0x7a>
 8002b90:	230f      	movs	r3, #15
 8002b92:	18fb      	adds	r3, r7, r3
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d1df      	bne.n	8002b5a <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8002b9a:	230f      	movs	r3, #15
 8002b9c:	18fb      	adds	r3, r7, r3
 8002b9e:	781b      	ldrb	r3, [r3, #0]
}
 8002ba0:	0018      	movs	r0, r3
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	b004      	add	sp, #16
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002ba8:	b590      	push	{r4, r7, lr}
 8002baa:	b085      	sub	sp, #20
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bb0:	240f      	movs	r4, #15
 8002bb2:	193b      	adds	r3, r7, r4
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68da      	ldr	r2, [r3, #12]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2180      	movs	r1, #128	@ 0x80
 8002bc4:	438a      	bics	r2, r1
 8002bc6:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	2220      	movs	r2, #32
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	d10c      	bne.n	8002bee <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	0018      	movs	r0, r3
 8002bd8:	f7ff ff7a 	bl	8002ad0 <HAL_RTC_WaitForSynchro>
 8002bdc:	1e03      	subs	r3, r0, #0
 8002bde:	d006      	beq.n	8002bee <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2221      	movs	r2, #33	@ 0x21
 8002be4:	2104      	movs	r1, #4
 8002be6:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8002be8:	193b      	adds	r3, r7, r4
 8002bea:	2201      	movs	r2, #1
 8002bec:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8002bee:	230f      	movs	r3, #15
 8002bf0:	18fb      	adds	r3, r7, r3
 8002bf2:	781b      	ldrb	r3, [r3, #0]
}
 8002bf4:	0018      	movs	r0, r3
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	b005      	add	sp, #20
 8002bfa:	bd90      	pop	{r4, r7, pc}

08002bfc <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	0002      	movs	r2, r0
 8002c04:	1dfb      	adds	r3, r7, #7
 8002c06:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8002c0c:	e007      	b.n	8002c1e <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	3301      	adds	r3, #1
 8002c12:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8002c14:	1dfb      	adds	r3, r7, #7
 8002c16:	1dfa      	adds	r2, r7, #7
 8002c18:	7812      	ldrb	r2, [r2, #0]
 8002c1a:	3a0a      	subs	r2, #10
 8002c1c:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 8002c1e:	1dfb      	adds	r3, r7, #7
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	2b09      	cmp	r3, #9
 8002c24:	d8f3      	bhi.n	8002c0e <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	011b      	lsls	r3, r3, #4
 8002c2c:	b2da      	uxtb	r2, r3
 8002c2e:	1dfb      	adds	r3, r7, #7
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	b2db      	uxtb	r3, r3
}
 8002c36:	0018      	movs	r0, r3
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	b004      	add	sp, #16
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b082      	sub	sp, #8
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8002c46:	46c0      	nop			@ (mov r8, r8)
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	b002      	add	sp, #8
 8002c4c:	bd80      	pop	{r7, pc}
	...

08002c50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d101      	bne.n	8002c62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e083      	b.n	8002d6a <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d109      	bne.n	8002c7e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685a      	ldr	r2, [r3, #4]
 8002c6e:	2382      	movs	r3, #130	@ 0x82
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d009      	beq.n	8002c8a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	61da      	str	r2, [r3, #28]
 8002c7c:	e005      	b.n	8002c8a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2251      	movs	r2, #81	@ 0x51
 8002c94:	5c9b      	ldrb	r3, [r3, r2]
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d107      	bne.n	8002cac <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2250      	movs	r2, #80	@ 0x50
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	0018      	movs	r0, r3
 8002ca8:	f7fd ff1c 	bl	8000ae4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2251      	movs	r2, #81	@ 0x51
 8002cb0:	2102      	movs	r1, #2
 8002cb2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2140      	movs	r1, #64	@ 0x40
 8002cc0:	438a      	bics	r2, r1
 8002cc2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685a      	ldr	r2, [r3, #4]
 8002cc8:	2382      	movs	r3, #130	@ 0x82
 8002cca:	005b      	lsls	r3, r3, #1
 8002ccc:	401a      	ands	r2, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6899      	ldr	r1, [r3, #8]
 8002cd2:	2384      	movs	r3, #132	@ 0x84
 8002cd4:	021b      	lsls	r3, r3, #8
 8002cd6:	400b      	ands	r3, r1
 8002cd8:	431a      	orrs	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	68d9      	ldr	r1, [r3, #12]
 8002cde:	2380      	movs	r3, #128	@ 0x80
 8002ce0:	011b      	lsls	r3, r3, #4
 8002ce2:	400b      	ands	r3, r1
 8002ce4:	431a      	orrs	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	2102      	movs	r1, #2
 8002cec:	400b      	ands	r3, r1
 8002cee:	431a      	orrs	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	695b      	ldr	r3, [r3, #20]
 8002cf4:	2101      	movs	r1, #1
 8002cf6:	400b      	ands	r3, r1
 8002cf8:	431a      	orrs	r2, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6999      	ldr	r1, [r3, #24]
 8002cfe:	2380      	movs	r3, #128	@ 0x80
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	400b      	ands	r3, r1
 8002d04:	431a      	orrs	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	69db      	ldr	r3, [r3, #28]
 8002d0a:	2138      	movs	r1, #56	@ 0x38
 8002d0c:	400b      	ands	r3, r1
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a1b      	ldr	r3, [r3, #32]
 8002d14:	2180      	movs	r1, #128	@ 0x80
 8002d16:	400b      	ands	r3, r1
 8002d18:	431a      	orrs	r2, r3
 8002d1a:	0011      	movs	r1, r2
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d20:	2380      	movs	r3, #128	@ 0x80
 8002d22:	019b      	lsls	r3, r3, #6
 8002d24:	401a      	ands	r2, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	0c1b      	lsrs	r3, r3, #16
 8002d34:	2204      	movs	r2, #4
 8002d36:	4013      	ands	r3, r2
 8002d38:	0019      	movs	r1, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d3e:	2210      	movs	r2, #16
 8002d40:	401a      	ands	r2, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	430a      	orrs	r2, r1
 8002d48:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	69da      	ldr	r2, [r3, #28]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4907      	ldr	r1, [pc, #28]	@ (8002d74 <HAL_SPI_Init+0x124>)
 8002d56:	400a      	ands	r2, r1
 8002d58:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2251      	movs	r2, #81	@ 0x51
 8002d64:	2101      	movs	r1, #1
 8002d66:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	0018      	movs	r0, r3
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	b002      	add	sp, #8
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	46c0      	nop			@ (mov r8, r8)
 8002d74:	fffff7ff 	.word	0xfffff7ff

08002d78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d101      	bne.n	8002d8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e032      	b.n	8002df0 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2239      	movs	r2, #57	@ 0x39
 8002d8e:	5c9b      	ldrb	r3, [r3, r2]
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d107      	bne.n	8002da6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2238      	movs	r2, #56	@ 0x38
 8002d9a:	2100      	movs	r1, #0
 8002d9c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	0018      	movs	r0, r3
 8002da2:	f7fd ff05 	bl	8000bb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2239      	movs	r2, #57	@ 0x39
 8002daa:	2102      	movs	r1, #2
 8002dac:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	3304      	adds	r3, #4
 8002db6:	0019      	movs	r1, r3
 8002db8:	0010      	movs	r0, r2
 8002dba:	f000 fa89 	bl	80032d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	223e      	movs	r2, #62	@ 0x3e
 8002dc2:	2101      	movs	r1, #1
 8002dc4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	223a      	movs	r2, #58	@ 0x3a
 8002dca:	2101      	movs	r1, #1
 8002dcc:	5499      	strb	r1, [r3, r2]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	223b      	movs	r2, #59	@ 0x3b
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	5499      	strb	r1, [r3, r2]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	223c      	movs	r2, #60	@ 0x3c
 8002dda:	2101      	movs	r1, #1
 8002ddc:	5499      	strb	r1, [r3, r2]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	223d      	movs	r2, #61	@ 0x3d
 8002de2:	2101      	movs	r1, #1
 8002de4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2239      	movs	r2, #57	@ 0x39
 8002dea:	2101      	movs	r1, #1
 8002dec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	0018      	movs	r0, r3
 8002df2:	46bd      	mov	sp, r7
 8002df4:	b002      	add	sp, #8
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e032      	b.n	8002e70 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2239      	movs	r2, #57	@ 0x39
 8002e0e:	5c9b      	ldrb	r3, [r3, r2]
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d107      	bne.n	8002e26 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2238      	movs	r2, #56	@ 0x38
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	0018      	movs	r0, r3
 8002e22:	f7fd fedb 	bl	8000bdc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2239      	movs	r2, #57	@ 0x39
 8002e2a:	2102      	movs	r1, #2
 8002e2c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	3304      	adds	r3, #4
 8002e36:	0019      	movs	r1, r3
 8002e38:	0010      	movs	r0, r2
 8002e3a:	f000 fa49 	bl	80032d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	223e      	movs	r2, #62	@ 0x3e
 8002e42:	2101      	movs	r1, #1
 8002e44:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	223a      	movs	r2, #58	@ 0x3a
 8002e4a:	2101      	movs	r1, #1
 8002e4c:	5499      	strb	r1, [r3, r2]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	223b      	movs	r2, #59	@ 0x3b
 8002e52:	2101      	movs	r1, #1
 8002e54:	5499      	strb	r1, [r3, r2]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	223c      	movs	r2, #60	@ 0x3c
 8002e5a:	2101      	movs	r1, #1
 8002e5c:	5499      	strb	r1, [r3, r2]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	223d      	movs	r2, #61	@ 0x3d
 8002e62:	2101      	movs	r1, #1
 8002e64:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2239      	movs	r2, #57	@ 0x39
 8002e6a:	2101      	movs	r1, #1
 8002e6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	0018      	movs	r0, r3
 8002e72:	46bd      	mov	sp, r7
 8002e74:	b002      	add	sp, #8
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d108      	bne.n	8002e9a <HAL_TIM_PWM_Start+0x22>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	223a      	movs	r2, #58	@ 0x3a
 8002e8c:	5c9b      	ldrb	r3, [r3, r2]
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	3b01      	subs	r3, #1
 8002e92:	1e5a      	subs	r2, r3, #1
 8002e94:	4193      	sbcs	r3, r2
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	e01f      	b.n	8002eda <HAL_TIM_PWM_Start+0x62>
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	2b04      	cmp	r3, #4
 8002e9e:	d108      	bne.n	8002eb2 <HAL_TIM_PWM_Start+0x3a>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	223b      	movs	r2, #59	@ 0x3b
 8002ea4:	5c9b      	ldrb	r3, [r3, r2]
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	1e5a      	subs	r2, r3, #1
 8002eac:	4193      	sbcs	r3, r2
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	e013      	b.n	8002eda <HAL_TIM_PWM_Start+0x62>
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	2b08      	cmp	r3, #8
 8002eb6:	d108      	bne.n	8002eca <HAL_TIM_PWM_Start+0x52>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	223c      	movs	r2, #60	@ 0x3c
 8002ebc:	5c9b      	ldrb	r3, [r3, r2]
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	3b01      	subs	r3, #1
 8002ec2:	1e5a      	subs	r2, r3, #1
 8002ec4:	4193      	sbcs	r3, r2
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	e007      	b.n	8002eda <HAL_TIM_PWM_Start+0x62>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	223d      	movs	r2, #61	@ 0x3d
 8002ece:	5c9b      	ldrb	r3, [r3, r2]
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	1e5a      	subs	r2, r3, #1
 8002ed6:	4193      	sbcs	r3, r2
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e052      	b.n	8002f88 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d104      	bne.n	8002ef2 <HAL_TIM_PWM_Start+0x7a>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	223a      	movs	r2, #58	@ 0x3a
 8002eec:	2102      	movs	r1, #2
 8002eee:	5499      	strb	r1, [r3, r2]
 8002ef0:	e013      	b.n	8002f1a <HAL_TIM_PWM_Start+0xa2>
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	2b04      	cmp	r3, #4
 8002ef6:	d104      	bne.n	8002f02 <HAL_TIM_PWM_Start+0x8a>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	223b      	movs	r2, #59	@ 0x3b
 8002efc:	2102      	movs	r1, #2
 8002efe:	5499      	strb	r1, [r3, r2]
 8002f00:	e00b      	b.n	8002f1a <HAL_TIM_PWM_Start+0xa2>
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	2b08      	cmp	r3, #8
 8002f06:	d104      	bne.n	8002f12 <HAL_TIM_PWM_Start+0x9a>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	223c      	movs	r2, #60	@ 0x3c
 8002f0c:	2102      	movs	r1, #2
 8002f0e:	5499      	strb	r1, [r3, r2]
 8002f10:	e003      	b.n	8002f1a <HAL_TIM_PWM_Start+0xa2>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	223d      	movs	r2, #61	@ 0x3d
 8002f16:	2102      	movs	r1, #2
 8002f18:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	6839      	ldr	r1, [r7, #0]
 8002f20:	2201      	movs	r2, #1
 8002f22:	0018      	movs	r0, r3
 8002f24:	f000 fbd6 	bl	80036d4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	2380      	movs	r3, #128	@ 0x80
 8002f2e:	05db      	lsls	r3, r3, #23
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d00e      	beq.n	8002f52 <HAL_TIM_PWM_Start+0xda>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a15      	ldr	r2, [pc, #84]	@ (8002f90 <HAL_TIM_PWM_Start+0x118>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d009      	beq.n	8002f52 <HAL_TIM_PWM_Start+0xda>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a14      	ldr	r2, [pc, #80]	@ (8002f94 <HAL_TIM_PWM_Start+0x11c>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d004      	beq.n	8002f52 <HAL_TIM_PWM_Start+0xda>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a12      	ldr	r2, [pc, #72]	@ (8002f98 <HAL_TIM_PWM_Start+0x120>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d111      	bne.n	8002f76 <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	2207      	movs	r2, #7
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2b06      	cmp	r3, #6
 8002f62:	d010      	beq.n	8002f86 <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2101      	movs	r1, #1
 8002f70:	430a      	orrs	r2, r1
 8002f72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f74:	e007      	b.n	8002f86 <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2101      	movs	r1, #1
 8002f82:	430a      	orrs	r2, r1
 8002f84:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	0018      	movs	r0, r3
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	b004      	add	sp, #16
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	40000400 	.word	0x40000400
 8002f94:	40010800 	.word	0x40010800
 8002f98:	40011400 	.word	0x40011400

08002f9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b086      	sub	sp, #24
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fa8:	2317      	movs	r3, #23
 8002faa:	18fb      	adds	r3, r7, r3
 8002fac:	2200      	movs	r2, #0
 8002fae:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2238      	movs	r2, #56	@ 0x38
 8002fb4:	5c9b      	ldrb	r3, [r3, r2]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d101      	bne.n	8002fbe <HAL_TIM_PWM_ConfigChannel+0x22>
 8002fba:	2302      	movs	r3, #2
 8002fbc:	e0ad      	b.n	800311a <HAL_TIM_PWM_ConfigChannel+0x17e>
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2238      	movs	r2, #56	@ 0x38
 8002fc2:	2101      	movs	r1, #1
 8002fc4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2b0c      	cmp	r3, #12
 8002fca:	d100      	bne.n	8002fce <HAL_TIM_PWM_ConfigChannel+0x32>
 8002fcc:	e076      	b.n	80030bc <HAL_TIM_PWM_ConfigChannel+0x120>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2b0c      	cmp	r3, #12
 8002fd2:	d900      	bls.n	8002fd6 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002fd4:	e095      	b.n	8003102 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2b08      	cmp	r3, #8
 8002fda:	d04e      	beq.n	800307a <HAL_TIM_PWM_ConfigChannel+0xde>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2b08      	cmp	r3, #8
 8002fe0:	d900      	bls.n	8002fe4 <HAL_TIM_PWM_ConfigChannel+0x48>
 8002fe2:	e08e      	b.n	8003102 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d003      	beq.n	8002ff2 <HAL_TIM_PWM_ConfigChannel+0x56>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2b04      	cmp	r3, #4
 8002fee:	d021      	beq.n	8003034 <HAL_TIM_PWM_ConfigChannel+0x98>
 8002ff0:	e087      	b.n	8003102 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68ba      	ldr	r2, [r7, #8]
 8002ff8:	0011      	movs	r1, r2
 8002ffa:	0018      	movs	r0, r3
 8002ffc:	f000 f9cc 	bl	8003398 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	699a      	ldr	r2, [r3, #24]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2108      	movs	r1, #8
 800300c:	430a      	orrs	r2, r1
 800300e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	699a      	ldr	r2, [r3, #24]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2104      	movs	r1, #4
 800301c:	438a      	bics	r2, r1
 800301e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	6999      	ldr	r1, [r3, #24]
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	68da      	ldr	r2, [r3, #12]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	430a      	orrs	r2, r1
 8003030:	619a      	str	r2, [r3, #24]
      break;
 8003032:	e06b      	b.n	800310c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68ba      	ldr	r2, [r7, #8]
 800303a:	0011      	movs	r1, r2
 800303c:	0018      	movs	r0, r3
 800303e:	f000 f9e7 	bl	8003410 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	699a      	ldr	r2, [r3, #24]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2180      	movs	r1, #128	@ 0x80
 800304e:	0109      	lsls	r1, r1, #4
 8003050:	430a      	orrs	r2, r1
 8003052:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	699a      	ldr	r2, [r3, #24]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4931      	ldr	r1, [pc, #196]	@ (8003124 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003060:	400a      	ands	r2, r1
 8003062:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	6999      	ldr	r1, [r3, #24]
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	021a      	lsls	r2, r3, #8
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	430a      	orrs	r2, r1
 8003076:	619a      	str	r2, [r3, #24]
      break;
 8003078:	e048      	b.n	800310c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	68ba      	ldr	r2, [r7, #8]
 8003080:	0011      	movs	r1, r2
 8003082:	0018      	movs	r0, r3
 8003084:	f000 fa06 	bl	8003494 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	69da      	ldr	r2, [r3, #28]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2108      	movs	r1, #8
 8003094:	430a      	orrs	r2, r1
 8003096:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	69da      	ldr	r2, [r3, #28]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2104      	movs	r1, #4
 80030a4:	438a      	bics	r2, r1
 80030a6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	69d9      	ldr	r1, [r3, #28]
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	68da      	ldr	r2, [r3, #12]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	430a      	orrs	r2, r1
 80030b8:	61da      	str	r2, [r3, #28]
      break;
 80030ba:	e027      	b.n	800310c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	68ba      	ldr	r2, [r7, #8]
 80030c2:	0011      	movs	r1, r2
 80030c4:	0018      	movs	r0, r3
 80030c6:	f000 fa25 	bl	8003514 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	69da      	ldr	r2, [r3, #28]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2180      	movs	r1, #128	@ 0x80
 80030d6:	0109      	lsls	r1, r1, #4
 80030d8:	430a      	orrs	r2, r1
 80030da:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	69da      	ldr	r2, [r3, #28]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	490f      	ldr	r1, [pc, #60]	@ (8003124 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80030e8:	400a      	ands	r2, r1
 80030ea:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	69d9      	ldr	r1, [r3, #28]
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	021a      	lsls	r2, r3, #8
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	430a      	orrs	r2, r1
 80030fe:	61da      	str	r2, [r3, #28]
      break;
 8003100:	e004      	b.n	800310c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8003102:	2317      	movs	r3, #23
 8003104:	18fb      	adds	r3, r7, r3
 8003106:	2201      	movs	r2, #1
 8003108:	701a      	strb	r2, [r3, #0]
      break;
 800310a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2238      	movs	r2, #56	@ 0x38
 8003110:	2100      	movs	r1, #0
 8003112:	5499      	strb	r1, [r3, r2]

  return status;
 8003114:	2317      	movs	r3, #23
 8003116:	18fb      	adds	r3, r7, r3
 8003118:	781b      	ldrb	r3, [r3, #0]
}
 800311a:	0018      	movs	r0, r3
 800311c:	46bd      	mov	sp, r7
 800311e:	b006      	add	sp, #24
 8003120:	bd80      	pop	{r7, pc}
 8003122:	46c0      	nop			@ (mov r8, r8)
 8003124:	fffffbff 	.word	0xfffffbff

08003128 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003132:	230f      	movs	r3, #15
 8003134:	18fb      	adds	r3, r7, r3
 8003136:	2200      	movs	r2, #0
 8003138:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2238      	movs	r2, #56	@ 0x38
 800313e:	5c9b      	ldrb	r3, [r3, r2]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d101      	bne.n	8003148 <HAL_TIM_ConfigClockSource+0x20>
 8003144:	2302      	movs	r3, #2
 8003146:	e0bc      	b.n	80032c2 <HAL_TIM_ConfigClockSource+0x19a>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2238      	movs	r2, #56	@ 0x38
 800314c:	2101      	movs	r1, #1
 800314e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2239      	movs	r2, #57	@ 0x39
 8003154:	2102      	movs	r1, #2
 8003156:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	2277      	movs	r2, #119	@ 0x77
 8003164:	4393      	bics	r3, r2
 8003166:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	4a58      	ldr	r2, [pc, #352]	@ (80032cc <HAL_TIM_ConfigClockSource+0x1a4>)
 800316c:	4013      	ands	r3, r2
 800316e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68ba      	ldr	r2, [r7, #8]
 8003176:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2280      	movs	r2, #128	@ 0x80
 800317e:	0192      	lsls	r2, r2, #6
 8003180:	4293      	cmp	r3, r2
 8003182:	d040      	beq.n	8003206 <HAL_TIM_ConfigClockSource+0xde>
 8003184:	2280      	movs	r2, #128	@ 0x80
 8003186:	0192      	lsls	r2, r2, #6
 8003188:	4293      	cmp	r3, r2
 800318a:	d900      	bls.n	800318e <HAL_TIM_ConfigClockSource+0x66>
 800318c:	e088      	b.n	80032a0 <HAL_TIM_ConfigClockSource+0x178>
 800318e:	2280      	movs	r2, #128	@ 0x80
 8003190:	0152      	lsls	r2, r2, #5
 8003192:	4293      	cmp	r3, r2
 8003194:	d100      	bne.n	8003198 <HAL_TIM_ConfigClockSource+0x70>
 8003196:	e088      	b.n	80032aa <HAL_TIM_ConfigClockSource+0x182>
 8003198:	2280      	movs	r2, #128	@ 0x80
 800319a:	0152      	lsls	r2, r2, #5
 800319c:	4293      	cmp	r3, r2
 800319e:	d900      	bls.n	80031a2 <HAL_TIM_ConfigClockSource+0x7a>
 80031a0:	e07e      	b.n	80032a0 <HAL_TIM_ConfigClockSource+0x178>
 80031a2:	2b70      	cmp	r3, #112	@ 0x70
 80031a4:	d018      	beq.n	80031d8 <HAL_TIM_ConfigClockSource+0xb0>
 80031a6:	d900      	bls.n	80031aa <HAL_TIM_ConfigClockSource+0x82>
 80031a8:	e07a      	b.n	80032a0 <HAL_TIM_ConfigClockSource+0x178>
 80031aa:	2b60      	cmp	r3, #96	@ 0x60
 80031ac:	d04f      	beq.n	800324e <HAL_TIM_ConfigClockSource+0x126>
 80031ae:	d900      	bls.n	80031b2 <HAL_TIM_ConfigClockSource+0x8a>
 80031b0:	e076      	b.n	80032a0 <HAL_TIM_ConfigClockSource+0x178>
 80031b2:	2b50      	cmp	r3, #80	@ 0x50
 80031b4:	d03b      	beq.n	800322e <HAL_TIM_ConfigClockSource+0x106>
 80031b6:	d900      	bls.n	80031ba <HAL_TIM_ConfigClockSource+0x92>
 80031b8:	e072      	b.n	80032a0 <HAL_TIM_ConfigClockSource+0x178>
 80031ba:	2b40      	cmp	r3, #64	@ 0x40
 80031bc:	d057      	beq.n	800326e <HAL_TIM_ConfigClockSource+0x146>
 80031be:	d900      	bls.n	80031c2 <HAL_TIM_ConfigClockSource+0x9a>
 80031c0:	e06e      	b.n	80032a0 <HAL_TIM_ConfigClockSource+0x178>
 80031c2:	2b30      	cmp	r3, #48	@ 0x30
 80031c4:	d063      	beq.n	800328e <HAL_TIM_ConfigClockSource+0x166>
 80031c6:	d86b      	bhi.n	80032a0 <HAL_TIM_ConfigClockSource+0x178>
 80031c8:	2b20      	cmp	r3, #32
 80031ca:	d060      	beq.n	800328e <HAL_TIM_ConfigClockSource+0x166>
 80031cc:	d868      	bhi.n	80032a0 <HAL_TIM_ConfigClockSource+0x178>
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d05d      	beq.n	800328e <HAL_TIM_ConfigClockSource+0x166>
 80031d2:	2b10      	cmp	r3, #16
 80031d4:	d05b      	beq.n	800328e <HAL_TIM_ConfigClockSource+0x166>
 80031d6:	e063      	b.n	80032a0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80031e8:	f000 fa54 	bl	8003694 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	2277      	movs	r2, #119	@ 0x77
 80031f8:	4313      	orrs	r3, r2
 80031fa:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	68ba      	ldr	r2, [r7, #8]
 8003202:	609a      	str	r2, [r3, #8]
      break;
 8003204:	e052      	b.n	80032ac <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003216:	f000 fa3d 	bl	8003694 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	689a      	ldr	r2, [r3, #8]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2180      	movs	r1, #128	@ 0x80
 8003226:	01c9      	lsls	r1, r1, #7
 8003228:	430a      	orrs	r2, r1
 800322a:	609a      	str	r2, [r3, #8]
      break;
 800322c:	e03e      	b.n	80032ac <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800323a:	001a      	movs	r2, r3
 800323c:	f000 f9b0 	bl	80035a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2150      	movs	r1, #80	@ 0x50
 8003246:	0018      	movs	r0, r3
 8003248:	f000 fa0a 	bl	8003660 <TIM_ITRx_SetConfig>
      break;
 800324c:	e02e      	b.n	80032ac <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800325a:	001a      	movs	r2, r3
 800325c:	f000 f9ce 	bl	80035fc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2160      	movs	r1, #96	@ 0x60
 8003266:	0018      	movs	r0, r3
 8003268:	f000 f9fa 	bl	8003660 <TIM_ITRx_SetConfig>
      break;
 800326c:	e01e      	b.n	80032ac <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800327a:	001a      	movs	r2, r3
 800327c:	f000 f990 	bl	80035a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2140      	movs	r1, #64	@ 0x40
 8003286:	0018      	movs	r0, r3
 8003288:	f000 f9ea 	bl	8003660 <TIM_ITRx_SetConfig>
      break;
 800328c:	e00e      	b.n	80032ac <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	0019      	movs	r1, r3
 8003298:	0010      	movs	r0, r2
 800329a:	f000 f9e1 	bl	8003660 <TIM_ITRx_SetConfig>
      break;
 800329e:	e005      	b.n	80032ac <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80032a0:	230f      	movs	r3, #15
 80032a2:	18fb      	adds	r3, r7, r3
 80032a4:	2201      	movs	r2, #1
 80032a6:	701a      	strb	r2, [r3, #0]
      break;
 80032a8:	e000      	b.n	80032ac <HAL_TIM_ConfigClockSource+0x184>
      break;
 80032aa:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2239      	movs	r2, #57	@ 0x39
 80032b0:	2101      	movs	r1, #1
 80032b2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2238      	movs	r2, #56	@ 0x38
 80032b8:	2100      	movs	r1, #0
 80032ba:	5499      	strb	r1, [r3, r2]

  return status;
 80032bc:	230f      	movs	r3, #15
 80032be:	18fb      	adds	r3, r7, r3
 80032c0:	781b      	ldrb	r3, [r3, #0]
}
 80032c2:	0018      	movs	r0, r3
 80032c4:	46bd      	mov	sp, r7
 80032c6:	b004      	add	sp, #16
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	46c0      	nop			@ (mov r8, r8)
 80032cc:	ffff00ff 	.word	0xffff00ff

080032d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	2380      	movs	r3, #128	@ 0x80
 80032e4:	05db      	lsls	r3, r3, #23
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d00b      	beq.n	8003302 <TIM_Base_SetConfig+0x32>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a26      	ldr	r2, [pc, #152]	@ (8003388 <TIM_Base_SetConfig+0xb8>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d007      	beq.n	8003302 <TIM_Base_SetConfig+0x32>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a25      	ldr	r2, [pc, #148]	@ (800338c <TIM_Base_SetConfig+0xbc>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d003      	beq.n	8003302 <TIM_Base_SetConfig+0x32>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a24      	ldr	r2, [pc, #144]	@ (8003390 <TIM_Base_SetConfig+0xc0>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d108      	bne.n	8003314 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2270      	movs	r2, #112	@ 0x70
 8003306:	4393      	bics	r3, r2
 8003308:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	4313      	orrs	r3, r2
 8003312:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	2380      	movs	r3, #128	@ 0x80
 8003318:	05db      	lsls	r3, r3, #23
 800331a:	429a      	cmp	r2, r3
 800331c:	d00b      	beq.n	8003336 <TIM_Base_SetConfig+0x66>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a19      	ldr	r2, [pc, #100]	@ (8003388 <TIM_Base_SetConfig+0xb8>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d007      	beq.n	8003336 <TIM_Base_SetConfig+0x66>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a18      	ldr	r2, [pc, #96]	@ (800338c <TIM_Base_SetConfig+0xbc>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d003      	beq.n	8003336 <TIM_Base_SetConfig+0x66>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a17      	ldr	r2, [pc, #92]	@ (8003390 <TIM_Base_SetConfig+0xc0>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d108      	bne.n	8003348 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	4a16      	ldr	r2, [pc, #88]	@ (8003394 <TIM_Base_SetConfig+0xc4>)
 800333a:	4013      	ands	r3, r2
 800333c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	4313      	orrs	r3, r2
 8003346:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2280      	movs	r2, #128	@ 0x80
 800334c:	4393      	bics	r3, r2
 800334e:	001a      	movs	r2, r3
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	691b      	ldr	r3, [r3, #16]
 8003354:	4313      	orrs	r3, r2
 8003356:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	689a      	ldr	r2, [r3, #8]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2204      	movs	r2, #4
 800336e:	431a      	orrs	r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	601a      	str	r2, [r3, #0]
}
 8003380:	46c0      	nop			@ (mov r8, r8)
 8003382:	46bd      	mov	sp, r7
 8003384:	b004      	add	sp, #16
 8003386:	bd80      	pop	{r7, pc}
 8003388:	40000400 	.word	0x40000400
 800338c:	40010800 	.word	0x40010800
 8003390:	40011400 	.word	0x40011400
 8003394:	fffffcff 	.word	0xfffffcff

08003398 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b086      	sub	sp, #24
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a1b      	ldr	r3, [r3, #32]
 80033a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a1b      	ldr	r3, [r3, #32]
 80033ac:	2201      	movs	r2, #1
 80033ae:	4393      	bics	r3, r2
 80033b0:	001a      	movs	r2, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2270      	movs	r2, #112	@ 0x70
 80033c6:	4393      	bics	r3, r2
 80033c8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2203      	movs	r2, #3
 80033ce:	4393      	bics	r3, r2
 80033d0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	4313      	orrs	r3, r2
 80033da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	2202      	movs	r2, #2
 80033e0:	4393      	bics	r3, r2
 80033e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	697a      	ldr	r2, [r7, #20]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685a      	ldr	r2, [r3, #4]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	697a      	ldr	r2, [r7, #20]
 8003406:	621a      	str	r2, [r3, #32]
}
 8003408:	46c0      	nop			@ (mov r8, r8)
 800340a:	46bd      	mov	sp, r7
 800340c:	b006      	add	sp, #24
 800340e:	bd80      	pop	{r7, pc}

08003410 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b086      	sub	sp, #24
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a1b      	ldr	r3, [r3, #32]
 800341e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	2210      	movs	r2, #16
 8003426:	4393      	bics	r3, r2
 8003428:	001a      	movs	r2, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	4a13      	ldr	r2, [pc, #76]	@ (800348c <TIM_OC2_SetConfig+0x7c>)
 800343e:	4013      	ands	r3, r2
 8003440:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	4a12      	ldr	r2, [pc, #72]	@ (8003490 <TIM_OC2_SetConfig+0x80>)
 8003446:	4013      	ands	r3, r2
 8003448:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	021b      	lsls	r3, r3, #8
 8003450:	68fa      	ldr	r2, [r7, #12]
 8003452:	4313      	orrs	r3, r2
 8003454:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	2220      	movs	r2, #32
 800345a:	4393      	bics	r3, r2
 800345c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	011b      	lsls	r3, r3, #4
 8003464:	697a      	ldr	r2, [r7, #20]
 8003466:	4313      	orrs	r3, r2
 8003468:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	693a      	ldr	r2, [r7, #16]
 800346e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	685a      	ldr	r2, [r3, #4]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	697a      	ldr	r2, [r7, #20]
 8003482:	621a      	str	r2, [r3, #32]
}
 8003484:	46c0      	nop			@ (mov r8, r8)
 8003486:	46bd      	mov	sp, r7
 8003488:	b006      	add	sp, #24
 800348a:	bd80      	pop	{r7, pc}
 800348c:	ffff8fff 	.word	0xffff8fff
 8003490:	fffffcff 	.word	0xfffffcff

08003494 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b086      	sub	sp, #24
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a1b      	ldr	r3, [r3, #32]
 80034a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a1b      	ldr	r3, [r3, #32]
 80034a8:	4a18      	ldr	r2, [pc, #96]	@ (800350c <TIM_OC3_SetConfig+0x78>)
 80034aa:	401a      	ands	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	69db      	ldr	r3, [r3, #28]
 80034ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2270      	movs	r2, #112	@ 0x70
 80034c0:	4393      	bics	r3, r2
 80034c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2203      	movs	r2, #3
 80034c8:	4393      	bics	r3, r2
 80034ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	4a0d      	ldr	r2, [pc, #52]	@ (8003510 <TIM_OC3_SetConfig+0x7c>)
 80034da:	4013      	ands	r3, r2
 80034dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	021b      	lsls	r3, r3, #8
 80034e4:	697a      	ldr	r2, [r7, #20]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	693a      	ldr	r2, [r7, #16]
 80034ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	685a      	ldr	r2, [r3, #4]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	697a      	ldr	r2, [r7, #20]
 8003502:	621a      	str	r2, [r3, #32]
}
 8003504:	46c0      	nop			@ (mov r8, r8)
 8003506:	46bd      	mov	sp, r7
 8003508:	b006      	add	sp, #24
 800350a:	bd80      	pop	{r7, pc}
 800350c:	fffffeff 	.word	0xfffffeff
 8003510:	fffffdff 	.word	0xfffffdff

08003514 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b086      	sub	sp, #24
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a1b      	ldr	r3, [r3, #32]
 8003522:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	4a19      	ldr	r2, [pc, #100]	@ (8003590 <TIM_OC4_SetConfig+0x7c>)
 800352a:	401a      	ands	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	69db      	ldr	r3, [r3, #28]
 800353a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	4a15      	ldr	r2, [pc, #84]	@ (8003594 <TIM_OC4_SetConfig+0x80>)
 8003540:	4013      	ands	r3, r2
 8003542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	4a14      	ldr	r2, [pc, #80]	@ (8003598 <TIM_OC4_SetConfig+0x84>)
 8003548:	4013      	ands	r3, r2
 800354a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	021b      	lsls	r3, r3, #8
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	4313      	orrs	r3, r2
 8003556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	4a10      	ldr	r2, [pc, #64]	@ (800359c <TIM_OC4_SetConfig+0x88>)
 800355c:	4013      	ands	r3, r2
 800355e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	031b      	lsls	r3, r3, #12
 8003566:	697a      	ldr	r2, [r7, #20]
 8003568:	4313      	orrs	r3, r2
 800356a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	693a      	ldr	r2, [r7, #16]
 8003570:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685a      	ldr	r2, [r3, #4]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	697a      	ldr	r2, [r7, #20]
 8003584:	621a      	str	r2, [r3, #32]
}
 8003586:	46c0      	nop			@ (mov r8, r8)
 8003588:	46bd      	mov	sp, r7
 800358a:	b006      	add	sp, #24
 800358c:	bd80      	pop	{r7, pc}
 800358e:	46c0      	nop			@ (mov r8, r8)
 8003590:	ffffefff 	.word	0xffffefff
 8003594:	ffff8fff 	.word	0xffff8fff
 8003598:	fffffcff 	.word	0xfffffcff
 800359c:	ffffdfff 	.word	0xffffdfff

080035a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b086      	sub	sp, #24
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6a1b      	ldr	r3, [r3, #32]
 80035b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6a1b      	ldr	r3, [r3, #32]
 80035b6:	2201      	movs	r2, #1
 80035b8:	4393      	bics	r3, r2
 80035ba:	001a      	movs	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	22f0      	movs	r2, #240	@ 0xf0
 80035ca:	4393      	bics	r3, r2
 80035cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	011b      	lsls	r3, r3, #4
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	220a      	movs	r2, #10
 80035dc:	4393      	bics	r3, r2
 80035de:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035e0:	697a      	ldr	r2, [r7, #20]
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	693a      	ldr	r2, [r7, #16]
 80035ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	697a      	ldr	r2, [r7, #20]
 80035f2:	621a      	str	r2, [r3, #32]
}
 80035f4:	46c0      	nop			@ (mov r8, r8)
 80035f6:	46bd      	mov	sp, r7
 80035f8:	b006      	add	sp, #24
 80035fa:	bd80      	pop	{r7, pc}

080035fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b086      	sub	sp, #24
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6a1b      	ldr	r3, [r3, #32]
 800360c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6a1b      	ldr	r3, [r3, #32]
 8003612:	2210      	movs	r2, #16
 8003614:	4393      	bics	r3, r2
 8003616:	001a      	movs	r2, r3
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	699b      	ldr	r3, [r3, #24]
 8003620:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	4a0d      	ldr	r2, [pc, #52]	@ (800365c <TIM_TI2_ConfigInputStage+0x60>)
 8003626:	4013      	ands	r3, r2
 8003628:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	031b      	lsls	r3, r3, #12
 800362e:	693a      	ldr	r2, [r7, #16]
 8003630:	4313      	orrs	r3, r2
 8003632:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	22a0      	movs	r2, #160	@ 0xa0
 8003638:	4393      	bics	r3, r2
 800363a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	011b      	lsls	r3, r3, #4
 8003640:	697a      	ldr	r2, [r7, #20]
 8003642:	4313      	orrs	r3, r2
 8003644:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	693a      	ldr	r2, [r7, #16]
 800364a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	621a      	str	r2, [r3, #32]
}
 8003652:	46c0      	nop			@ (mov r8, r8)
 8003654:	46bd      	mov	sp, r7
 8003656:	b006      	add	sp, #24
 8003658:	bd80      	pop	{r7, pc}
 800365a:	46c0      	nop			@ (mov r8, r8)
 800365c:	ffff0fff 	.word	0xffff0fff

08003660 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2270      	movs	r2, #112	@ 0x70
 8003674:	4393      	bics	r3, r2
 8003676:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003678:	683a      	ldr	r2, [r7, #0]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	4313      	orrs	r3, r2
 800367e:	2207      	movs	r2, #7
 8003680:	4313      	orrs	r3, r2
 8003682:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	68fa      	ldr	r2, [r7, #12]
 8003688:	609a      	str	r2, [r3, #8]
}
 800368a:	46c0      	nop			@ (mov r8, r8)
 800368c:	46bd      	mov	sp, r7
 800368e:	b004      	add	sp, #16
 8003690:	bd80      	pop	{r7, pc}
	...

08003694 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b086      	sub	sp, #24
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
 80036a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	4a09      	ldr	r2, [pc, #36]	@ (80036d0 <TIM_ETR_SetConfig+0x3c>)
 80036ac:	4013      	ands	r3, r2
 80036ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	021a      	lsls	r2, r3, #8
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	431a      	orrs	r2, r3
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	697a      	ldr	r2, [r7, #20]
 80036be:	4313      	orrs	r3, r2
 80036c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	697a      	ldr	r2, [r7, #20]
 80036c6:	609a      	str	r2, [r3, #8]
}
 80036c8:	46c0      	nop			@ (mov r8, r8)
 80036ca:	46bd      	mov	sp, r7
 80036cc:	b006      	add	sp, #24
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	ffff00ff 	.word	0xffff00ff

080036d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b086      	sub	sp, #24
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	221f      	movs	r2, #31
 80036e4:	4013      	ands	r3, r2
 80036e6:	2201      	movs	r2, #1
 80036e8:	409a      	lsls	r2, r3
 80036ea:	0013      	movs	r3, r2
 80036ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6a1b      	ldr	r3, [r3, #32]
 80036f2:	697a      	ldr	r2, [r7, #20]
 80036f4:	43d2      	mvns	r2, r2
 80036f6:	401a      	ands	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6a1a      	ldr	r2, [r3, #32]
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	211f      	movs	r1, #31
 8003704:	400b      	ands	r3, r1
 8003706:	6879      	ldr	r1, [r7, #4]
 8003708:	4099      	lsls	r1, r3
 800370a:	000b      	movs	r3, r1
 800370c:	431a      	orrs	r2, r3
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	621a      	str	r2, [r3, #32]
}
 8003712:	46c0      	nop			@ (mov r8, r8)
 8003714:	46bd      	mov	sp, r7
 8003716:	b006      	add	sp, #24
 8003718:	bd80      	pop	{r7, pc}
	...

0800371c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2238      	movs	r2, #56	@ 0x38
 800372a:	5c9b      	ldrb	r3, [r3, r2]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d101      	bne.n	8003734 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003730:	2302      	movs	r3, #2
 8003732:	e047      	b.n	80037c4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2238      	movs	r2, #56	@ 0x38
 8003738:	2101      	movs	r1, #1
 800373a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2239      	movs	r2, #57	@ 0x39
 8003740:	2102      	movs	r1, #2
 8003742:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2270      	movs	r2, #112	@ 0x70
 8003758:	4393      	bics	r3, r2
 800375a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68fa      	ldr	r2, [r7, #12]
 8003762:	4313      	orrs	r3, r2
 8003764:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	68fa      	ldr	r2, [r7, #12]
 800376c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	2380      	movs	r3, #128	@ 0x80
 8003774:	05db      	lsls	r3, r3, #23
 8003776:	429a      	cmp	r2, r3
 8003778:	d00e      	beq.n	8003798 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a13      	ldr	r2, [pc, #76]	@ (80037cc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d009      	beq.n	8003798 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a11      	ldr	r2, [pc, #68]	@ (80037d0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d004      	beq.n	8003798 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a10      	ldr	r2, [pc, #64]	@ (80037d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d10c      	bne.n	80037b2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	2280      	movs	r2, #128	@ 0x80
 800379c:	4393      	bics	r3, r2
 800379e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	68ba      	ldr	r2, [r7, #8]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68ba      	ldr	r2, [r7, #8]
 80037b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2239      	movs	r2, #57	@ 0x39
 80037b6:	2101      	movs	r1, #1
 80037b8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2238      	movs	r2, #56	@ 0x38
 80037be:	2100      	movs	r1, #0
 80037c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	0018      	movs	r0, r3
 80037c6:	46bd      	mov	sp, r7
 80037c8:	b004      	add	sp, #16
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	40000400 	.word	0x40000400
 80037d0:	40010800 	.word	0x40010800
 80037d4:	40011400 	.word	0x40011400

080037d8 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2238      	movs	r2, #56	@ 0x38
 80037e6:	5c9b      	ldrb	r3, [r3, r2]
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d101      	bne.n	80037f0 <HAL_TIMEx_RemapConfig+0x18>
 80037ec:	2302      	movs	r3, #2
 80037ee:	e00c      	b.n	800380a <HAL_TIMEx_RemapConfig+0x32>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2238      	movs	r2, #56	@ 0x38
 80037f4:	2101      	movs	r1, #1
 80037f6:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	683a      	ldr	r2, [r7, #0]
 80037fe:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2238      	movs	r2, #56	@ 0x38
 8003804:	2100      	movs	r1, #0
 8003806:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	0018      	movs	r0, r3
 800380c:	46bd      	mov	sp, r7
 800380e:	b002      	add	sp, #8
 8003810:	bd80      	pop	{r7, pc}
	...

08003814 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d101      	bne.n	8003826 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e044      	b.n	80038b0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800382a:	2b00      	cmp	r3, #0
 800382c:	d107      	bne.n	800383e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2278      	movs	r2, #120	@ 0x78
 8003832:	2100      	movs	r1, #0
 8003834:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	0018      	movs	r0, r3
 800383a:	f7fd fa25 	bl	8000c88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2224      	movs	r2, #36	@ 0x24
 8003842:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2101      	movs	r1, #1
 8003850:	438a      	bics	r2, r1
 8003852:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003858:	2b00      	cmp	r3, #0
 800385a:	d003      	beq.n	8003864 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	0018      	movs	r0, r3
 8003860:	f000 fde6 	bl	8004430 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	0018      	movs	r0, r3
 8003868:	f000 fb44 	bl	8003ef4 <UART_SetConfig>
 800386c:	0003      	movs	r3, r0
 800386e:	2b01      	cmp	r3, #1
 8003870:	d101      	bne.n	8003876 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e01c      	b.n	80038b0 <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	685a      	ldr	r2, [r3, #4]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	490d      	ldr	r1, [pc, #52]	@ (80038b8 <HAL_UART_Init+0xa4>)
 8003882:	400a      	ands	r2, r1
 8003884:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	689a      	ldr	r2, [r3, #8]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	212a      	movs	r1, #42	@ 0x2a
 8003892:	438a      	bics	r2, r1
 8003894:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2101      	movs	r1, #1
 80038a2:	430a      	orrs	r2, r1
 80038a4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	0018      	movs	r0, r3
 80038aa:	f000 fe75 	bl	8004598 <UART_CheckIdleState>
 80038ae:	0003      	movs	r3, r0
}
 80038b0:	0018      	movs	r0, r3
 80038b2:	46bd      	mov	sp, r7
 80038b4:	b002      	add	sp, #8
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	ffffb7ff 	.word	0xffffb7ff

080038bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80038bc:	b590      	push	{r4, r7, lr}
 80038be:	b0ab      	sub	sp, #172	@ 0xac
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	69db      	ldr	r3, [r3, #28]
 80038ca:	22a4      	movs	r2, #164	@ 0xa4
 80038cc:	18b9      	adds	r1, r7, r2
 80038ce:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	20a0      	movs	r0, #160	@ 0xa0
 80038d8:	1839      	adds	r1, r7, r0
 80038da:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	219c      	movs	r1, #156	@ 0x9c
 80038e4:	1879      	adds	r1, r7, r1
 80038e6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80038e8:	0011      	movs	r1, r2
 80038ea:	18bb      	adds	r3, r7, r2
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a99      	ldr	r2, [pc, #612]	@ (8003b54 <HAL_UART_IRQHandler+0x298>)
 80038f0:	4013      	ands	r3, r2
 80038f2:	2298      	movs	r2, #152	@ 0x98
 80038f4:	18bc      	adds	r4, r7, r2
 80038f6:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80038f8:	18bb      	adds	r3, r7, r2
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d114      	bne.n	800392a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003900:	187b      	adds	r3, r7, r1
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2220      	movs	r2, #32
 8003906:	4013      	ands	r3, r2
 8003908:	d00f      	beq.n	800392a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800390a:	183b      	adds	r3, r7, r0
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2220      	movs	r2, #32
 8003910:	4013      	ands	r3, r2
 8003912:	d00a      	beq.n	800392a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003918:	2b00      	cmp	r3, #0
 800391a:	d100      	bne.n	800391e <HAL_UART_IRQHandler+0x62>
 800391c:	e2be      	b.n	8003e9c <HAL_UART_IRQHandler+0x5e0>
      {
        huart->RxISR(huart);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	0010      	movs	r0, r2
 8003926:	4798      	blx	r3
      }
      return;
 8003928:	e2b8      	b.n	8003e9c <HAL_UART_IRQHandler+0x5e0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800392a:	2398      	movs	r3, #152	@ 0x98
 800392c:	18fb      	adds	r3, r7, r3
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d100      	bne.n	8003936 <HAL_UART_IRQHandler+0x7a>
 8003934:	e114      	b.n	8003b60 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003936:	239c      	movs	r3, #156	@ 0x9c
 8003938:	18fb      	adds	r3, r7, r3
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2201      	movs	r2, #1
 800393e:	4013      	ands	r3, r2
 8003940:	d106      	bne.n	8003950 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003942:	23a0      	movs	r3, #160	@ 0xa0
 8003944:	18fb      	adds	r3, r7, r3
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a83      	ldr	r2, [pc, #524]	@ (8003b58 <HAL_UART_IRQHandler+0x29c>)
 800394a:	4013      	ands	r3, r2
 800394c:	d100      	bne.n	8003950 <HAL_UART_IRQHandler+0x94>
 800394e:	e107      	b.n	8003b60 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003950:	23a4      	movs	r3, #164	@ 0xa4
 8003952:	18fb      	adds	r3, r7, r3
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2201      	movs	r2, #1
 8003958:	4013      	ands	r3, r2
 800395a:	d012      	beq.n	8003982 <HAL_UART_IRQHandler+0xc6>
 800395c:	23a0      	movs	r3, #160	@ 0xa0
 800395e:	18fb      	adds	r3, r7, r3
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	2380      	movs	r3, #128	@ 0x80
 8003964:	005b      	lsls	r3, r3, #1
 8003966:	4013      	ands	r3, r2
 8003968:	d00b      	beq.n	8003982 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2201      	movs	r2, #1
 8003970:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2284      	movs	r2, #132	@ 0x84
 8003976:	589b      	ldr	r3, [r3, r2]
 8003978:	2201      	movs	r2, #1
 800397a:	431a      	orrs	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2184      	movs	r1, #132	@ 0x84
 8003980:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003982:	23a4      	movs	r3, #164	@ 0xa4
 8003984:	18fb      	adds	r3, r7, r3
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2202      	movs	r2, #2
 800398a:	4013      	ands	r3, r2
 800398c:	d011      	beq.n	80039b2 <HAL_UART_IRQHandler+0xf6>
 800398e:	239c      	movs	r3, #156	@ 0x9c
 8003990:	18fb      	adds	r3, r7, r3
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2201      	movs	r2, #1
 8003996:	4013      	ands	r3, r2
 8003998:	d00b      	beq.n	80039b2 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2202      	movs	r2, #2
 80039a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2284      	movs	r2, #132	@ 0x84
 80039a6:	589b      	ldr	r3, [r3, r2]
 80039a8:	2204      	movs	r2, #4
 80039aa:	431a      	orrs	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2184      	movs	r1, #132	@ 0x84
 80039b0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80039b2:	23a4      	movs	r3, #164	@ 0xa4
 80039b4:	18fb      	adds	r3, r7, r3
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2204      	movs	r2, #4
 80039ba:	4013      	ands	r3, r2
 80039bc:	d011      	beq.n	80039e2 <HAL_UART_IRQHandler+0x126>
 80039be:	239c      	movs	r3, #156	@ 0x9c
 80039c0:	18fb      	adds	r3, r7, r3
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2201      	movs	r2, #1
 80039c6:	4013      	ands	r3, r2
 80039c8:	d00b      	beq.n	80039e2 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2204      	movs	r2, #4
 80039d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2284      	movs	r2, #132	@ 0x84
 80039d6:	589b      	ldr	r3, [r3, r2]
 80039d8:	2202      	movs	r2, #2
 80039da:	431a      	orrs	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2184      	movs	r1, #132	@ 0x84
 80039e0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80039e2:	23a4      	movs	r3, #164	@ 0xa4
 80039e4:	18fb      	adds	r3, r7, r3
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2208      	movs	r2, #8
 80039ea:	4013      	ands	r3, r2
 80039ec:	d017      	beq.n	8003a1e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80039ee:	23a0      	movs	r3, #160	@ 0xa0
 80039f0:	18fb      	adds	r3, r7, r3
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2220      	movs	r2, #32
 80039f6:	4013      	ands	r3, r2
 80039f8:	d105      	bne.n	8003a06 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80039fa:	239c      	movs	r3, #156	@ 0x9c
 80039fc:	18fb      	adds	r3, r7, r3
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2201      	movs	r2, #1
 8003a02:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003a04:	d00b      	beq.n	8003a1e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2208      	movs	r2, #8
 8003a0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2284      	movs	r2, #132	@ 0x84
 8003a12:	589b      	ldr	r3, [r3, r2]
 8003a14:	2208      	movs	r2, #8
 8003a16:	431a      	orrs	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2184      	movs	r1, #132	@ 0x84
 8003a1c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003a1e:	23a4      	movs	r3, #164	@ 0xa4
 8003a20:	18fb      	adds	r3, r7, r3
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	2380      	movs	r3, #128	@ 0x80
 8003a26:	011b      	lsls	r3, r3, #4
 8003a28:	4013      	ands	r3, r2
 8003a2a:	d013      	beq.n	8003a54 <HAL_UART_IRQHandler+0x198>
 8003a2c:	23a0      	movs	r3, #160	@ 0xa0
 8003a2e:	18fb      	adds	r3, r7, r3
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	2380      	movs	r3, #128	@ 0x80
 8003a34:	04db      	lsls	r3, r3, #19
 8003a36:	4013      	ands	r3, r2
 8003a38:	d00c      	beq.n	8003a54 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2280      	movs	r2, #128	@ 0x80
 8003a40:	0112      	lsls	r2, r2, #4
 8003a42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2284      	movs	r2, #132	@ 0x84
 8003a48:	589b      	ldr	r3, [r3, r2]
 8003a4a:	2220      	movs	r2, #32
 8003a4c:	431a      	orrs	r2, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2184      	movs	r1, #132	@ 0x84
 8003a52:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2284      	movs	r2, #132	@ 0x84
 8003a58:	589b      	ldr	r3, [r3, r2]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d100      	bne.n	8003a60 <HAL_UART_IRQHandler+0x1a4>
 8003a5e:	e21f      	b.n	8003ea0 <HAL_UART_IRQHandler+0x5e4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003a60:	23a4      	movs	r3, #164	@ 0xa4
 8003a62:	18fb      	adds	r3, r7, r3
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2220      	movs	r2, #32
 8003a68:	4013      	ands	r3, r2
 8003a6a:	d00e      	beq.n	8003a8a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003a6c:	23a0      	movs	r3, #160	@ 0xa0
 8003a6e:	18fb      	adds	r3, r7, r3
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2220      	movs	r2, #32
 8003a74:	4013      	ands	r3, r2
 8003a76:	d008      	beq.n	8003a8a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d004      	beq.n	8003a8a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	0010      	movs	r0, r2
 8003a88:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2284      	movs	r2, #132	@ 0x84
 8003a8e:	589b      	ldr	r3, [r3, r2]
 8003a90:	2194      	movs	r1, #148	@ 0x94
 8003a92:	187a      	adds	r2, r7, r1
 8003a94:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	2240      	movs	r2, #64	@ 0x40
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	2b40      	cmp	r3, #64	@ 0x40
 8003aa2:	d004      	beq.n	8003aae <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003aa4:	187b      	adds	r3, r7, r1
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2228      	movs	r2, #40	@ 0x28
 8003aaa:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003aac:	d047      	beq.n	8003b3e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	0018      	movs	r0, r3
 8003ab2:	f000 fe89 	bl	80047c8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	2240      	movs	r2, #64	@ 0x40
 8003abe:	4013      	ands	r3, r2
 8003ac0:	2b40      	cmp	r3, #64	@ 0x40
 8003ac2:	d137      	bne.n	8003b34 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ac4:	f3ef 8310 	mrs	r3, PRIMASK
 8003ac8:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8003aca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003acc:	2090      	movs	r0, #144	@ 0x90
 8003ace:	183a      	adds	r2, r7, r0
 8003ad0:	6013      	str	r3, [r2, #0]
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	667b      	str	r3, [r7, #100]	@ 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ad6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ad8:	f383 8810 	msr	PRIMASK, r3
}
 8003adc:	46c0      	nop			@ (mov r8, r8)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	689a      	ldr	r2, [r3, #8]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2140      	movs	r1, #64	@ 0x40
 8003aea:	438a      	bics	r2, r1
 8003aec:	609a      	str	r2, [r3, #8]
 8003aee:	183b      	adds	r3, r7, r0
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003af4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003af6:	f383 8810 	msr	PRIMASK, r3
}
 8003afa:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d012      	beq.n	8003b2a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b08:	4a14      	ldr	r2, [pc, #80]	@ (8003b5c <HAL_UART_IRQHandler+0x2a0>)
 8003b0a:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b10:	0018      	movs	r0, r3
 8003b12:	f7fd fb0d 	bl	8001130 <HAL_DMA_Abort_IT>
 8003b16:	1e03      	subs	r3, r0, #0
 8003b18:	d01a      	beq.n	8003b50 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b24:	0018      	movs	r0, r3
 8003b26:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b28:	e012      	b.n	8003b50 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	0018      	movs	r0, r3
 8003b2e:	f000 f9cd 	bl	8003ecc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b32:	e00d      	b.n	8003b50 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	0018      	movs	r0, r3
 8003b38:	f000 f9c8 	bl	8003ecc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b3c:	e008      	b.n	8003b50 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	0018      	movs	r0, r3
 8003b42:	f000 f9c3 	bl	8003ecc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2284      	movs	r2, #132	@ 0x84
 8003b4a:	2100      	movs	r1, #0
 8003b4c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003b4e:	e1a7      	b.n	8003ea0 <HAL_UART_IRQHandler+0x5e4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b50:	46c0      	nop			@ (mov r8, r8)
    return;
 8003b52:	e1a5      	b.n	8003ea0 <HAL_UART_IRQHandler+0x5e4>
 8003b54:	0000080f 	.word	0x0000080f
 8003b58:	04000120 	.word	0x04000120
 8003b5c:	08004891 	.word	0x08004891

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d000      	beq.n	8003b6a <HAL_UART_IRQHandler+0x2ae>
 8003b68:	e159      	b.n	8003e1e <HAL_UART_IRQHandler+0x562>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003b6a:	23a4      	movs	r3, #164	@ 0xa4
 8003b6c:	18fb      	adds	r3, r7, r3
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2210      	movs	r2, #16
 8003b72:	4013      	ands	r3, r2
 8003b74:	d100      	bne.n	8003b78 <HAL_UART_IRQHandler+0x2bc>
 8003b76:	e152      	b.n	8003e1e <HAL_UART_IRQHandler+0x562>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003b78:	23a0      	movs	r3, #160	@ 0xa0
 8003b7a:	18fb      	adds	r3, r7, r3
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2210      	movs	r2, #16
 8003b80:	4013      	ands	r3, r2
 8003b82:	d100      	bne.n	8003b86 <HAL_UART_IRQHandler+0x2ca>
 8003b84:	e14b      	b.n	8003e1e <HAL_UART_IRQHandler+0x562>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2210      	movs	r2, #16
 8003b8c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	2240      	movs	r2, #64	@ 0x40
 8003b96:	4013      	ands	r3, r2
 8003b98:	2b40      	cmp	r3, #64	@ 0x40
 8003b9a:	d000      	beq.n	8003b9e <HAL_UART_IRQHandler+0x2e2>
 8003b9c:	e0bf      	b.n	8003d1e <HAL_UART_IRQHandler+0x462>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	685a      	ldr	r2, [r3, #4]
 8003ba6:	217e      	movs	r1, #126	@ 0x7e
 8003ba8:	187b      	adds	r3, r7, r1
 8003baa:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003bac:	187b      	adds	r3, r7, r1
 8003bae:	881b      	ldrh	r3, [r3, #0]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d100      	bne.n	8003bb6 <HAL_UART_IRQHandler+0x2fa>
 8003bb4:	e095      	b.n	8003ce2 <HAL_UART_IRQHandler+0x426>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2258      	movs	r2, #88	@ 0x58
 8003bba:	5a9b      	ldrh	r3, [r3, r2]
 8003bbc:	187a      	adds	r2, r7, r1
 8003bbe:	8812      	ldrh	r2, [r2, #0]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d300      	bcc.n	8003bc6 <HAL_UART_IRQHandler+0x30a>
 8003bc4:	e08d      	b.n	8003ce2 <HAL_UART_IRQHandler+0x426>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	187a      	adds	r2, r7, r1
 8003bca:	215a      	movs	r1, #90	@ 0x5a
 8003bcc:	8812      	ldrh	r2, [r2, #0]
 8003bce:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2220      	movs	r2, #32
 8003bda:	4013      	ands	r3, r2
 8003bdc:	d16f      	bne.n	8003cbe <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bde:	f3ef 8310 	mrs	r3, PRIMASK
 8003be2:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003be6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003be8:	2301      	movs	r3, #1
 8003bea:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bee:	f383 8810 	msr	PRIMASK, r3
}
 8003bf2:	46c0      	nop			@ (mov r8, r8)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	49ad      	ldr	r1, [pc, #692]	@ (8003eb4 <HAL_UART_IRQHandler+0x5f8>)
 8003c00:	400a      	ands	r2, r1
 8003c02:	601a      	str	r2, [r3, #0]
 8003c04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c06:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c0a:	f383 8810 	msr	PRIMASK, r3
}
 8003c0e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c10:	f3ef 8310 	mrs	r3, PRIMASK
 8003c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8003c16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c18:	677b      	str	r3, [r7, #116]	@ 0x74
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c20:	f383 8810 	msr	PRIMASK, r3
}
 8003c24:	46c0      	nop			@ (mov r8, r8)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	689a      	ldr	r2, [r3, #8]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2101      	movs	r1, #1
 8003c32:	438a      	bics	r2, r1
 8003c34:	609a      	str	r2, [r3, #8]
 8003c36:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c38:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c3c:	f383 8810 	msr	PRIMASK, r3
}
 8003c40:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c42:	f3ef 8310 	mrs	r3, PRIMASK
 8003c46:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8003c48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c4a:	673b      	str	r3, [r7, #112]	@ 0x70
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c52:	f383 8810 	msr	PRIMASK, r3
}
 8003c56:	46c0      	nop			@ (mov r8, r8)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	689a      	ldr	r2, [r3, #8]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2140      	movs	r1, #64	@ 0x40
 8003c64:	438a      	bics	r2, r1
 8003c66:	609a      	str	r2, [r3, #8]
 8003c68:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c6a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c6e:	f383 8810 	msr	PRIMASK, r3
}
 8003c72:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2280      	movs	r2, #128	@ 0x80
 8003c78:	2120      	movs	r1, #32
 8003c7a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c82:	f3ef 8310 	mrs	r3, PRIMASK
 8003c86:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8003c88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c90:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c92:	f383 8810 	msr	PRIMASK, r3
}
 8003c96:	46c0      	nop			@ (mov r8, r8)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2110      	movs	r1, #16
 8003ca4:	438a      	bics	r2, r1
 8003ca6:	601a      	str	r2, [r3, #0]
 8003ca8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003caa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003cae:	f383 8810 	msr	PRIMASK, r3
}
 8003cb2:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cb8:	0018      	movs	r0, r3
 8003cba:	f7fd f9f9 	bl	80010b0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2202      	movs	r2, #2
 8003cc2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2258      	movs	r2, #88	@ 0x58
 8003cc8:	5a9a      	ldrh	r2, [r3, r2]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	215a      	movs	r1, #90	@ 0x5a
 8003cce:	5a5b      	ldrh	r3, [r3, r1]
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	b29a      	uxth	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	0011      	movs	r1, r2
 8003cda:	0018      	movs	r0, r3
 8003cdc:	f000 f8fe 	bl	8003edc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003ce0:	e0e0      	b.n	8003ea4 <HAL_UART_IRQHandler+0x5e8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2258      	movs	r2, #88	@ 0x58
 8003ce6:	5a9b      	ldrh	r3, [r3, r2]
 8003ce8:	227e      	movs	r2, #126	@ 0x7e
 8003cea:	18ba      	adds	r2, r7, r2
 8003cec:	8812      	ldrh	r2, [r2, #0]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d000      	beq.n	8003cf4 <HAL_UART_IRQHandler+0x438>
 8003cf2:	e0d7      	b.n	8003ea4 <HAL_UART_IRQHandler+0x5e8>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2220      	movs	r2, #32
 8003cfe:	4013      	ands	r3, r2
 8003d00:	2b20      	cmp	r3, #32
 8003d02:	d000      	beq.n	8003d06 <HAL_UART_IRQHandler+0x44a>
 8003d04:	e0ce      	b.n	8003ea4 <HAL_UART_IRQHandler+0x5e8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2202      	movs	r2, #2
 8003d0a:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2258      	movs	r2, #88	@ 0x58
 8003d10:	5a9a      	ldrh	r2, [r3, r2]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	0011      	movs	r1, r2
 8003d16:	0018      	movs	r0, r3
 8003d18:	f000 f8e0 	bl	8003edc <HAL_UARTEx_RxEventCallback>
      return;
 8003d1c:	e0c2      	b.n	8003ea4 <HAL_UART_IRQHandler+0x5e8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2258      	movs	r2, #88	@ 0x58
 8003d22:	5a99      	ldrh	r1, [r3, r2]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	225a      	movs	r2, #90	@ 0x5a
 8003d28:	5a9b      	ldrh	r3, [r3, r2]
 8003d2a:	b29a      	uxth	r2, r3
 8003d2c:	208e      	movs	r0, #142	@ 0x8e
 8003d2e:	183b      	adds	r3, r7, r0
 8003d30:	1a8a      	subs	r2, r1, r2
 8003d32:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	225a      	movs	r2, #90	@ 0x5a
 8003d38:	5a9b      	ldrh	r3, [r3, r2]
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d100      	bne.n	8003d42 <HAL_UART_IRQHandler+0x486>
 8003d40:	e0b2      	b.n	8003ea8 <HAL_UART_IRQHandler+0x5ec>
          && (nb_rx_data > 0U))
 8003d42:	183b      	adds	r3, r7, r0
 8003d44:	881b      	ldrh	r3, [r3, #0]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d100      	bne.n	8003d4c <HAL_UART_IRQHandler+0x490>
 8003d4a:	e0ad      	b.n	8003ea8 <HAL_UART_IRQHandler+0x5ec>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d4c:	f3ef 8310 	mrs	r3, PRIMASK
 8003d50:	60fb      	str	r3, [r7, #12]
  return(result);
 8003d52:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d54:	2488      	movs	r4, #136	@ 0x88
 8003d56:	193a      	adds	r2, r7, r4
 8003d58:	6013      	str	r3, [r2, #0]
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	f383 8810 	msr	PRIMASK, r3
}
 8003d64:	46c0      	nop			@ (mov r8, r8)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4951      	ldr	r1, [pc, #324]	@ (8003eb8 <HAL_UART_IRQHandler+0x5fc>)
 8003d72:	400a      	ands	r2, r1
 8003d74:	601a      	str	r2, [r3, #0]
 8003d76:	193b      	adds	r3, r7, r4
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	f383 8810 	msr	PRIMASK, r3
}
 8003d82:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d84:	f3ef 8310 	mrs	r3, PRIMASK
 8003d88:	61bb      	str	r3, [r7, #24]
  return(result);
 8003d8a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d8c:	2484      	movs	r4, #132	@ 0x84
 8003d8e:	193a      	adds	r2, r7, r4
 8003d90:	6013      	str	r3, [r2, #0]
 8003d92:	2301      	movs	r3, #1
 8003d94:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	f383 8810 	msr	PRIMASK, r3
}
 8003d9c:	46c0      	nop			@ (mov r8, r8)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	689a      	ldr	r2, [r3, #8]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2101      	movs	r1, #1
 8003daa:	438a      	bics	r2, r1
 8003dac:	609a      	str	r2, [r3, #8]
 8003dae:	193b      	adds	r3, r7, r4
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003db4:	6a3b      	ldr	r3, [r7, #32]
 8003db6:	f383 8810 	msr	PRIMASK, r3
}
 8003dba:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2280      	movs	r2, #128	@ 0x80
 8003dc0:	2120      	movs	r1, #32
 8003dc2:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dd0:	f3ef 8310 	mrs	r3, PRIMASK
 8003dd4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dd8:	2480      	movs	r4, #128	@ 0x80
 8003dda:	193a      	adds	r2, r7, r4
 8003ddc:	6013      	str	r3, [r2, #0]
 8003dde:	2301      	movs	r3, #1
 8003de0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003de4:	f383 8810 	msr	PRIMASK, r3
}
 8003de8:	46c0      	nop			@ (mov r8, r8)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2110      	movs	r1, #16
 8003df6:	438a      	bics	r2, r1
 8003df8:	601a      	str	r2, [r3, #0]
 8003dfa:	193b      	adds	r3, r7, r4
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e02:	f383 8810 	msr	PRIMASK, r3
}
 8003e06:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2202      	movs	r2, #2
 8003e0c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e0e:	183b      	adds	r3, r7, r0
 8003e10:	881a      	ldrh	r2, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	0011      	movs	r1, r2
 8003e16:	0018      	movs	r0, r3
 8003e18:	f000 f860 	bl	8003edc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003e1c:	e044      	b.n	8003ea8 <HAL_UART_IRQHandler+0x5ec>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003e1e:	23a4      	movs	r3, #164	@ 0xa4
 8003e20:	18fb      	adds	r3, r7, r3
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	2380      	movs	r3, #128	@ 0x80
 8003e26:	035b      	lsls	r3, r3, #13
 8003e28:	4013      	ands	r3, r2
 8003e2a:	d010      	beq.n	8003e4e <HAL_UART_IRQHandler+0x592>
 8003e2c:	239c      	movs	r3, #156	@ 0x9c
 8003e2e:	18fb      	adds	r3, r7, r3
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	2380      	movs	r3, #128	@ 0x80
 8003e34:	03db      	lsls	r3, r3, #15
 8003e36:	4013      	ands	r3, r2
 8003e38:	d009      	beq.n	8003e4e <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2280      	movs	r2, #128	@ 0x80
 8003e40:	0352      	lsls	r2, r2, #13
 8003e42:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	0018      	movs	r0, r3
 8003e48:	f000 fd60 	bl	800490c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003e4c:	e02f      	b.n	8003eae <HAL_UART_IRQHandler+0x5f2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003e4e:	23a4      	movs	r3, #164	@ 0xa4
 8003e50:	18fb      	adds	r3, r7, r3
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2280      	movs	r2, #128	@ 0x80
 8003e56:	4013      	ands	r3, r2
 8003e58:	d00f      	beq.n	8003e7a <HAL_UART_IRQHandler+0x5be>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003e5a:	23a0      	movs	r3, #160	@ 0xa0
 8003e5c:	18fb      	adds	r3, r7, r3
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2280      	movs	r2, #128	@ 0x80
 8003e62:	4013      	ands	r3, r2
 8003e64:	d009      	beq.n	8003e7a <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d01e      	beq.n	8003eac <HAL_UART_IRQHandler+0x5f0>
    {
      huart->TxISR(huart);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	0010      	movs	r0, r2
 8003e76:	4798      	blx	r3
    }
    return;
 8003e78:	e018      	b.n	8003eac <HAL_UART_IRQHandler+0x5f0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003e7a:	23a4      	movs	r3, #164	@ 0xa4
 8003e7c:	18fb      	adds	r3, r7, r3
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2240      	movs	r2, #64	@ 0x40
 8003e82:	4013      	ands	r3, r2
 8003e84:	d013      	beq.n	8003eae <HAL_UART_IRQHandler+0x5f2>
 8003e86:	23a0      	movs	r3, #160	@ 0xa0
 8003e88:	18fb      	adds	r3, r7, r3
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2240      	movs	r2, #64	@ 0x40
 8003e8e:	4013      	ands	r3, r2
 8003e90:	d00d      	beq.n	8003eae <HAL_UART_IRQHandler+0x5f2>
  {
    UART_EndTransmit_IT(huart);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	0018      	movs	r0, r3
 8003e96:	f000 fd0e 	bl	80048b6 <UART_EndTransmit_IT>
    return;
 8003e9a:	e008      	b.n	8003eae <HAL_UART_IRQHandler+0x5f2>
      return;
 8003e9c:	46c0      	nop			@ (mov r8, r8)
 8003e9e:	e006      	b.n	8003eae <HAL_UART_IRQHandler+0x5f2>
    return;
 8003ea0:	46c0      	nop			@ (mov r8, r8)
 8003ea2:	e004      	b.n	8003eae <HAL_UART_IRQHandler+0x5f2>
      return;
 8003ea4:	46c0      	nop			@ (mov r8, r8)
 8003ea6:	e002      	b.n	8003eae <HAL_UART_IRQHandler+0x5f2>
      return;
 8003ea8:	46c0      	nop			@ (mov r8, r8)
 8003eaa:	e000      	b.n	8003eae <HAL_UART_IRQHandler+0x5f2>
    return;
 8003eac:	46c0      	nop			@ (mov r8, r8)
  }

}
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	b02b      	add	sp, #172	@ 0xac
 8003eb2:	bd90      	pop	{r4, r7, pc}
 8003eb4:	fffffeff 	.word	0xfffffeff
 8003eb8:	fffffedf 	.word	0xfffffedf

08003ebc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003ec4:	46c0      	nop			@ (mov r8, r8)
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	b002      	add	sp, #8
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003ed4:	46c0      	nop			@ (mov r8, r8)
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	b002      	add	sp, #8
 8003eda:	bd80      	pop	{r7, pc}

08003edc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	000a      	movs	r2, r1
 8003ee6:	1cbb      	adds	r3, r7, #2
 8003ee8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003eea:	46c0      	nop			@ (mov r8, r8)
 8003eec:	46bd      	mov	sp, r7
 8003eee:	b002      	add	sp, #8
 8003ef0:	bd80      	pop	{r7, pc}
	...

08003ef4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ef4:	b5b0      	push	{r4, r5, r7, lr}
 8003ef6:	b08e      	sub	sp, #56	@ 0x38
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003efc:	231a      	movs	r3, #26
 8003efe:	2218      	movs	r2, #24
 8003f00:	189b      	adds	r3, r3, r2
 8003f02:	19db      	adds	r3, r3, r7
 8003f04:	2200      	movs	r2, #0
 8003f06:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	689a      	ldr	r2, [r3, #8]
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	431a      	orrs	r2, r3
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	431a      	orrs	r2, r3
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	69db      	ldr	r3, [r3, #28]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4ac3      	ldr	r2, [pc, #780]	@ (8004234 <UART_SetConfig+0x340>)
 8003f28:	4013      	ands	r3, r2
 8003f2a:	0019      	movs	r1, r3
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003f32:	430a      	orrs	r2, r1
 8003f34:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	4abe      	ldr	r2, [pc, #760]	@ (8004238 <UART_SetConfig+0x344>)
 8003f3e:	4013      	ands	r3, r2
 8003f40:	0019      	movs	r1, r3
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	68da      	ldr	r2, [r3, #12]
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4ab8      	ldr	r2, [pc, #736]	@ (800423c <UART_SetConfig+0x348>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d004      	beq.n	8003f68 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	6a1b      	ldr	r3, [r3, #32]
 8003f62:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003f64:	4313      	orrs	r3, r2
 8003f66:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	4ab4      	ldr	r2, [pc, #720]	@ (8004240 <UART_SetConfig+0x34c>)
 8003f70:	4013      	ands	r3, r2
 8003f72:	0019      	movs	r1, r3
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003f7a:	430a      	orrs	r2, r1
 8003f7c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4ab0      	ldr	r2, [pc, #704]	@ (8004244 <UART_SetConfig+0x350>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d131      	bne.n	8003fec <UART_SetConfig+0xf8>
 8003f88:	4baf      	ldr	r3, [pc, #700]	@ (8004248 <UART_SetConfig+0x354>)
 8003f8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f8c:	2203      	movs	r2, #3
 8003f8e:	4013      	ands	r3, r2
 8003f90:	2b03      	cmp	r3, #3
 8003f92:	d01d      	beq.n	8003fd0 <UART_SetConfig+0xdc>
 8003f94:	d823      	bhi.n	8003fde <UART_SetConfig+0xea>
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d00c      	beq.n	8003fb4 <UART_SetConfig+0xc0>
 8003f9a:	d820      	bhi.n	8003fde <UART_SetConfig+0xea>
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d002      	beq.n	8003fa6 <UART_SetConfig+0xb2>
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d00e      	beq.n	8003fc2 <UART_SetConfig+0xce>
 8003fa4:	e01b      	b.n	8003fde <UART_SetConfig+0xea>
 8003fa6:	231b      	movs	r3, #27
 8003fa8:	2218      	movs	r2, #24
 8003faa:	189b      	adds	r3, r3, r2
 8003fac:	19db      	adds	r3, r3, r7
 8003fae:	2201      	movs	r2, #1
 8003fb0:	701a      	strb	r2, [r3, #0]
 8003fb2:	e0b4      	b.n	800411e <UART_SetConfig+0x22a>
 8003fb4:	231b      	movs	r3, #27
 8003fb6:	2218      	movs	r2, #24
 8003fb8:	189b      	adds	r3, r3, r2
 8003fba:	19db      	adds	r3, r3, r7
 8003fbc:	2202      	movs	r2, #2
 8003fbe:	701a      	strb	r2, [r3, #0]
 8003fc0:	e0ad      	b.n	800411e <UART_SetConfig+0x22a>
 8003fc2:	231b      	movs	r3, #27
 8003fc4:	2218      	movs	r2, #24
 8003fc6:	189b      	adds	r3, r3, r2
 8003fc8:	19db      	adds	r3, r3, r7
 8003fca:	2204      	movs	r2, #4
 8003fcc:	701a      	strb	r2, [r3, #0]
 8003fce:	e0a6      	b.n	800411e <UART_SetConfig+0x22a>
 8003fd0:	231b      	movs	r3, #27
 8003fd2:	2218      	movs	r2, #24
 8003fd4:	189b      	adds	r3, r3, r2
 8003fd6:	19db      	adds	r3, r3, r7
 8003fd8:	2208      	movs	r2, #8
 8003fda:	701a      	strb	r2, [r3, #0]
 8003fdc:	e09f      	b.n	800411e <UART_SetConfig+0x22a>
 8003fde:	231b      	movs	r3, #27
 8003fe0:	2218      	movs	r2, #24
 8003fe2:	189b      	adds	r3, r3, r2
 8003fe4:	19db      	adds	r3, r3, r7
 8003fe6:	2210      	movs	r2, #16
 8003fe8:	701a      	strb	r2, [r3, #0]
 8003fea:	e098      	b.n	800411e <UART_SetConfig+0x22a>
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a96      	ldr	r2, [pc, #600]	@ (800424c <UART_SetConfig+0x358>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d131      	bne.n	800405a <UART_SetConfig+0x166>
 8003ff6:	4b94      	ldr	r3, [pc, #592]	@ (8004248 <UART_SetConfig+0x354>)
 8003ff8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ffa:	220c      	movs	r2, #12
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	2b0c      	cmp	r3, #12
 8004000:	d01d      	beq.n	800403e <UART_SetConfig+0x14a>
 8004002:	d823      	bhi.n	800404c <UART_SetConfig+0x158>
 8004004:	2b08      	cmp	r3, #8
 8004006:	d00c      	beq.n	8004022 <UART_SetConfig+0x12e>
 8004008:	d820      	bhi.n	800404c <UART_SetConfig+0x158>
 800400a:	2b00      	cmp	r3, #0
 800400c:	d002      	beq.n	8004014 <UART_SetConfig+0x120>
 800400e:	2b04      	cmp	r3, #4
 8004010:	d00e      	beq.n	8004030 <UART_SetConfig+0x13c>
 8004012:	e01b      	b.n	800404c <UART_SetConfig+0x158>
 8004014:	231b      	movs	r3, #27
 8004016:	2218      	movs	r2, #24
 8004018:	189b      	adds	r3, r3, r2
 800401a:	19db      	adds	r3, r3, r7
 800401c:	2200      	movs	r2, #0
 800401e:	701a      	strb	r2, [r3, #0]
 8004020:	e07d      	b.n	800411e <UART_SetConfig+0x22a>
 8004022:	231b      	movs	r3, #27
 8004024:	2218      	movs	r2, #24
 8004026:	189b      	adds	r3, r3, r2
 8004028:	19db      	adds	r3, r3, r7
 800402a:	2202      	movs	r2, #2
 800402c:	701a      	strb	r2, [r3, #0]
 800402e:	e076      	b.n	800411e <UART_SetConfig+0x22a>
 8004030:	231b      	movs	r3, #27
 8004032:	2218      	movs	r2, #24
 8004034:	189b      	adds	r3, r3, r2
 8004036:	19db      	adds	r3, r3, r7
 8004038:	2204      	movs	r2, #4
 800403a:	701a      	strb	r2, [r3, #0]
 800403c:	e06f      	b.n	800411e <UART_SetConfig+0x22a>
 800403e:	231b      	movs	r3, #27
 8004040:	2218      	movs	r2, #24
 8004042:	189b      	adds	r3, r3, r2
 8004044:	19db      	adds	r3, r3, r7
 8004046:	2208      	movs	r2, #8
 8004048:	701a      	strb	r2, [r3, #0]
 800404a:	e068      	b.n	800411e <UART_SetConfig+0x22a>
 800404c:	231b      	movs	r3, #27
 800404e:	2218      	movs	r2, #24
 8004050:	189b      	adds	r3, r3, r2
 8004052:	19db      	adds	r3, r3, r7
 8004054:	2210      	movs	r2, #16
 8004056:	701a      	strb	r2, [r3, #0]
 8004058:	e061      	b.n	800411e <UART_SetConfig+0x22a>
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a7c      	ldr	r2, [pc, #496]	@ (8004250 <UART_SetConfig+0x35c>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d106      	bne.n	8004072 <UART_SetConfig+0x17e>
 8004064:	231b      	movs	r3, #27
 8004066:	2218      	movs	r2, #24
 8004068:	189b      	adds	r3, r3, r2
 800406a:	19db      	adds	r3, r3, r7
 800406c:	2200      	movs	r2, #0
 800406e:	701a      	strb	r2, [r3, #0]
 8004070:	e055      	b.n	800411e <UART_SetConfig+0x22a>
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a77      	ldr	r2, [pc, #476]	@ (8004254 <UART_SetConfig+0x360>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d106      	bne.n	800408a <UART_SetConfig+0x196>
 800407c:	231b      	movs	r3, #27
 800407e:	2218      	movs	r2, #24
 8004080:	189b      	adds	r3, r3, r2
 8004082:	19db      	adds	r3, r3, r7
 8004084:	2200      	movs	r2, #0
 8004086:	701a      	strb	r2, [r3, #0]
 8004088:	e049      	b.n	800411e <UART_SetConfig+0x22a>
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a6b      	ldr	r2, [pc, #428]	@ (800423c <UART_SetConfig+0x348>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d13e      	bne.n	8004112 <UART_SetConfig+0x21e>
 8004094:	4b6c      	ldr	r3, [pc, #432]	@ (8004248 <UART_SetConfig+0x354>)
 8004096:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004098:	23c0      	movs	r3, #192	@ 0xc0
 800409a:	011b      	lsls	r3, r3, #4
 800409c:	4013      	ands	r3, r2
 800409e:	22c0      	movs	r2, #192	@ 0xc0
 80040a0:	0112      	lsls	r2, r2, #4
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d027      	beq.n	80040f6 <UART_SetConfig+0x202>
 80040a6:	22c0      	movs	r2, #192	@ 0xc0
 80040a8:	0112      	lsls	r2, r2, #4
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d82a      	bhi.n	8004104 <UART_SetConfig+0x210>
 80040ae:	2280      	movs	r2, #128	@ 0x80
 80040b0:	0112      	lsls	r2, r2, #4
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d011      	beq.n	80040da <UART_SetConfig+0x1e6>
 80040b6:	2280      	movs	r2, #128	@ 0x80
 80040b8:	0112      	lsls	r2, r2, #4
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d822      	bhi.n	8004104 <UART_SetConfig+0x210>
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d004      	beq.n	80040cc <UART_SetConfig+0x1d8>
 80040c2:	2280      	movs	r2, #128	@ 0x80
 80040c4:	00d2      	lsls	r2, r2, #3
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d00e      	beq.n	80040e8 <UART_SetConfig+0x1f4>
 80040ca:	e01b      	b.n	8004104 <UART_SetConfig+0x210>
 80040cc:	231b      	movs	r3, #27
 80040ce:	2218      	movs	r2, #24
 80040d0:	189b      	adds	r3, r3, r2
 80040d2:	19db      	adds	r3, r3, r7
 80040d4:	2200      	movs	r2, #0
 80040d6:	701a      	strb	r2, [r3, #0]
 80040d8:	e021      	b.n	800411e <UART_SetConfig+0x22a>
 80040da:	231b      	movs	r3, #27
 80040dc:	2218      	movs	r2, #24
 80040de:	189b      	adds	r3, r3, r2
 80040e0:	19db      	adds	r3, r3, r7
 80040e2:	2202      	movs	r2, #2
 80040e4:	701a      	strb	r2, [r3, #0]
 80040e6:	e01a      	b.n	800411e <UART_SetConfig+0x22a>
 80040e8:	231b      	movs	r3, #27
 80040ea:	2218      	movs	r2, #24
 80040ec:	189b      	adds	r3, r3, r2
 80040ee:	19db      	adds	r3, r3, r7
 80040f0:	2204      	movs	r2, #4
 80040f2:	701a      	strb	r2, [r3, #0]
 80040f4:	e013      	b.n	800411e <UART_SetConfig+0x22a>
 80040f6:	231b      	movs	r3, #27
 80040f8:	2218      	movs	r2, #24
 80040fa:	189b      	adds	r3, r3, r2
 80040fc:	19db      	adds	r3, r3, r7
 80040fe:	2208      	movs	r2, #8
 8004100:	701a      	strb	r2, [r3, #0]
 8004102:	e00c      	b.n	800411e <UART_SetConfig+0x22a>
 8004104:	231b      	movs	r3, #27
 8004106:	2218      	movs	r2, #24
 8004108:	189b      	adds	r3, r3, r2
 800410a:	19db      	adds	r3, r3, r7
 800410c:	2210      	movs	r2, #16
 800410e:	701a      	strb	r2, [r3, #0]
 8004110:	e005      	b.n	800411e <UART_SetConfig+0x22a>
 8004112:	231b      	movs	r3, #27
 8004114:	2218      	movs	r2, #24
 8004116:	189b      	adds	r3, r3, r2
 8004118:	19db      	adds	r3, r3, r7
 800411a:	2210      	movs	r2, #16
 800411c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a46      	ldr	r2, [pc, #280]	@ (800423c <UART_SetConfig+0x348>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d000      	beq.n	800412a <UART_SetConfig+0x236>
 8004128:	e09a      	b.n	8004260 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800412a:	231b      	movs	r3, #27
 800412c:	2218      	movs	r2, #24
 800412e:	189b      	adds	r3, r3, r2
 8004130:	19db      	adds	r3, r3, r7
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	2b08      	cmp	r3, #8
 8004136:	d01d      	beq.n	8004174 <UART_SetConfig+0x280>
 8004138:	dc20      	bgt.n	800417c <UART_SetConfig+0x288>
 800413a:	2b04      	cmp	r3, #4
 800413c:	d015      	beq.n	800416a <UART_SetConfig+0x276>
 800413e:	dc1d      	bgt.n	800417c <UART_SetConfig+0x288>
 8004140:	2b00      	cmp	r3, #0
 8004142:	d002      	beq.n	800414a <UART_SetConfig+0x256>
 8004144:	2b02      	cmp	r3, #2
 8004146:	d005      	beq.n	8004154 <UART_SetConfig+0x260>
 8004148:	e018      	b.n	800417c <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800414a:	f7fd ffa7 	bl	800209c <HAL_RCC_GetPCLK1Freq>
 800414e:	0003      	movs	r3, r0
 8004150:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004152:	e01c      	b.n	800418e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004154:	4b3c      	ldr	r3, [pc, #240]	@ (8004248 <UART_SetConfig+0x354>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2210      	movs	r2, #16
 800415a:	4013      	ands	r3, r2
 800415c:	d002      	beq.n	8004164 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800415e:	4b3e      	ldr	r3, [pc, #248]	@ (8004258 <UART_SetConfig+0x364>)
 8004160:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004162:	e014      	b.n	800418e <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8004164:	4b3d      	ldr	r3, [pc, #244]	@ (800425c <UART_SetConfig+0x368>)
 8004166:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004168:	e011      	b.n	800418e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800416a:	f7fd ff07 	bl	8001f7c <HAL_RCC_GetSysClockFreq>
 800416e:	0003      	movs	r3, r0
 8004170:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004172:	e00c      	b.n	800418e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004174:	2380      	movs	r3, #128	@ 0x80
 8004176:	021b      	lsls	r3, r3, #8
 8004178:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800417a:	e008      	b.n	800418e <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 800417c:	2300      	movs	r3, #0
 800417e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8004180:	231a      	movs	r3, #26
 8004182:	2218      	movs	r2, #24
 8004184:	189b      	adds	r3, r3, r2
 8004186:	19db      	adds	r3, r3, r7
 8004188:	2201      	movs	r2, #1
 800418a:	701a      	strb	r2, [r3, #0]
        break;
 800418c:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800418e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004190:	2b00      	cmp	r3, #0
 8004192:	d100      	bne.n	8004196 <UART_SetConfig+0x2a2>
 8004194:	e133      	b.n	80043fe <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	685a      	ldr	r2, [r3, #4]
 800419a:	0013      	movs	r3, r2
 800419c:	005b      	lsls	r3, r3, #1
 800419e:	189b      	adds	r3, r3, r2
 80041a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d305      	bcc.n	80041b2 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80041ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d906      	bls.n	80041c0 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 80041b2:	231a      	movs	r3, #26
 80041b4:	2218      	movs	r2, #24
 80041b6:	189b      	adds	r3, r3, r2
 80041b8:	19db      	adds	r3, r3, r7
 80041ba:	2201      	movs	r2, #1
 80041bc:	701a      	strb	r2, [r3, #0]
 80041be:	e11e      	b.n	80043fe <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80041c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041c2:	613b      	str	r3, [r7, #16]
 80041c4:	2300      	movs	r3, #0
 80041c6:	617b      	str	r3, [r7, #20]
 80041c8:	6939      	ldr	r1, [r7, #16]
 80041ca:	697a      	ldr	r2, [r7, #20]
 80041cc:	000b      	movs	r3, r1
 80041ce:	0e1b      	lsrs	r3, r3, #24
 80041d0:	0010      	movs	r0, r2
 80041d2:	0205      	lsls	r5, r0, #8
 80041d4:	431d      	orrs	r5, r3
 80041d6:	000b      	movs	r3, r1
 80041d8:	021c      	lsls	r4, r3, #8
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	085b      	lsrs	r3, r3, #1
 80041e0:	60bb      	str	r3, [r7, #8]
 80041e2:	2300      	movs	r3, #0
 80041e4:	60fb      	str	r3, [r7, #12]
 80041e6:	68b8      	ldr	r0, [r7, #8]
 80041e8:	68f9      	ldr	r1, [r7, #12]
 80041ea:	1900      	adds	r0, r0, r4
 80041ec:	4169      	adcs	r1, r5
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	603b      	str	r3, [r7, #0]
 80041f4:	2300      	movs	r3, #0
 80041f6:	607b      	str	r3, [r7, #4]
 80041f8:	683a      	ldr	r2, [r7, #0]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f7fc f810 	bl	8000220 <__aeabi_uldivmod>
 8004200:	0002      	movs	r2, r0
 8004202:	000b      	movs	r3, r1
 8004204:	0013      	movs	r3, r2
 8004206:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004208:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800420a:	23c0      	movs	r3, #192	@ 0xc0
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	429a      	cmp	r2, r3
 8004210:	d309      	bcc.n	8004226 <UART_SetConfig+0x332>
 8004212:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004214:	2380      	movs	r3, #128	@ 0x80
 8004216:	035b      	lsls	r3, r3, #13
 8004218:	429a      	cmp	r2, r3
 800421a:	d204      	bcs.n	8004226 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004222:	60da      	str	r2, [r3, #12]
 8004224:	e0eb      	b.n	80043fe <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8004226:	231a      	movs	r3, #26
 8004228:	2218      	movs	r2, #24
 800422a:	189b      	adds	r3, r3, r2
 800422c:	19db      	adds	r3, r3, r7
 800422e:	2201      	movs	r2, #1
 8004230:	701a      	strb	r2, [r3, #0]
 8004232:	e0e4      	b.n	80043fe <UART_SetConfig+0x50a>
 8004234:	efff69f3 	.word	0xefff69f3
 8004238:	ffffcfff 	.word	0xffffcfff
 800423c:	40004800 	.word	0x40004800
 8004240:	fffff4ff 	.word	0xfffff4ff
 8004244:	40013800 	.word	0x40013800
 8004248:	40021000 	.word	0x40021000
 800424c:	40004400 	.word	0x40004400
 8004250:	40004c00 	.word	0x40004c00
 8004254:	40005000 	.word	0x40005000
 8004258:	003d0900 	.word	0x003d0900
 800425c:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	69da      	ldr	r2, [r3, #28]
 8004264:	2380      	movs	r3, #128	@ 0x80
 8004266:	021b      	lsls	r3, r3, #8
 8004268:	429a      	cmp	r2, r3
 800426a:	d000      	beq.n	800426e <UART_SetConfig+0x37a>
 800426c:	e070      	b.n	8004350 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 800426e:	231b      	movs	r3, #27
 8004270:	2218      	movs	r2, #24
 8004272:	189b      	adds	r3, r3, r2
 8004274:	19db      	adds	r3, r3, r7
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	2b08      	cmp	r3, #8
 800427a:	d822      	bhi.n	80042c2 <UART_SetConfig+0x3ce>
 800427c:	009a      	lsls	r2, r3, #2
 800427e:	4b67      	ldr	r3, [pc, #412]	@ (800441c <UART_SetConfig+0x528>)
 8004280:	18d3      	adds	r3, r2, r3
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004286:	f7fd ff09 	bl	800209c <HAL_RCC_GetPCLK1Freq>
 800428a:	0003      	movs	r3, r0
 800428c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800428e:	e021      	b.n	80042d4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004290:	f7fd ff1a 	bl	80020c8 <HAL_RCC_GetPCLK2Freq>
 8004294:	0003      	movs	r3, r0
 8004296:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004298:	e01c      	b.n	80042d4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800429a:	4b61      	ldr	r3, [pc, #388]	@ (8004420 <UART_SetConfig+0x52c>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2210      	movs	r2, #16
 80042a0:	4013      	ands	r3, r2
 80042a2:	d002      	beq.n	80042aa <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80042a4:	4b5f      	ldr	r3, [pc, #380]	@ (8004424 <UART_SetConfig+0x530>)
 80042a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80042a8:	e014      	b.n	80042d4 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 80042aa:	4b5f      	ldr	r3, [pc, #380]	@ (8004428 <UART_SetConfig+0x534>)
 80042ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80042ae:	e011      	b.n	80042d4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042b0:	f7fd fe64 	bl	8001f7c <HAL_RCC_GetSysClockFreq>
 80042b4:	0003      	movs	r3, r0
 80042b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80042b8:	e00c      	b.n	80042d4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042ba:	2380      	movs	r3, #128	@ 0x80
 80042bc:	021b      	lsls	r3, r3, #8
 80042be:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80042c0:	e008      	b.n	80042d4 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 80042c2:	2300      	movs	r3, #0
 80042c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80042c6:	231a      	movs	r3, #26
 80042c8:	2218      	movs	r2, #24
 80042ca:	189b      	adds	r3, r3, r2
 80042cc:	19db      	adds	r3, r3, r7
 80042ce:	2201      	movs	r2, #1
 80042d0:	701a      	strb	r2, [r3, #0]
        break;
 80042d2:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80042d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d100      	bne.n	80042dc <UART_SetConfig+0x3e8>
 80042da:	e090      	b.n	80043fe <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80042dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042de:	005a      	lsls	r2, r3, #1
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	085b      	lsrs	r3, r3, #1
 80042e6:	18d2      	adds	r2, r2, r3
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	0019      	movs	r1, r3
 80042ee:	0010      	movs	r0, r2
 80042f0:	f7fb ff0a 	bl	8000108 <__udivsi3>
 80042f4:	0003      	movs	r3, r0
 80042f6:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042fa:	2b0f      	cmp	r3, #15
 80042fc:	d921      	bls.n	8004342 <UART_SetConfig+0x44e>
 80042fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004300:	2380      	movs	r3, #128	@ 0x80
 8004302:	025b      	lsls	r3, r3, #9
 8004304:	429a      	cmp	r2, r3
 8004306:	d21c      	bcs.n	8004342 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800430a:	b29a      	uxth	r2, r3
 800430c:	200e      	movs	r0, #14
 800430e:	2418      	movs	r4, #24
 8004310:	1903      	adds	r3, r0, r4
 8004312:	19db      	adds	r3, r3, r7
 8004314:	210f      	movs	r1, #15
 8004316:	438a      	bics	r2, r1
 8004318:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800431a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800431c:	085b      	lsrs	r3, r3, #1
 800431e:	b29b      	uxth	r3, r3
 8004320:	2207      	movs	r2, #7
 8004322:	4013      	ands	r3, r2
 8004324:	b299      	uxth	r1, r3
 8004326:	1903      	adds	r3, r0, r4
 8004328:	19db      	adds	r3, r3, r7
 800432a:	1902      	adds	r2, r0, r4
 800432c:	19d2      	adds	r2, r2, r7
 800432e:	8812      	ldrh	r2, [r2, #0]
 8004330:	430a      	orrs	r2, r1
 8004332:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	1902      	adds	r2, r0, r4
 800433a:	19d2      	adds	r2, r2, r7
 800433c:	8812      	ldrh	r2, [r2, #0]
 800433e:	60da      	str	r2, [r3, #12]
 8004340:	e05d      	b.n	80043fe <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8004342:	231a      	movs	r3, #26
 8004344:	2218      	movs	r2, #24
 8004346:	189b      	adds	r3, r3, r2
 8004348:	19db      	adds	r3, r3, r7
 800434a:	2201      	movs	r2, #1
 800434c:	701a      	strb	r2, [r3, #0]
 800434e:	e056      	b.n	80043fe <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004350:	231b      	movs	r3, #27
 8004352:	2218      	movs	r2, #24
 8004354:	189b      	adds	r3, r3, r2
 8004356:	19db      	adds	r3, r3, r7
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	2b08      	cmp	r3, #8
 800435c:	d822      	bhi.n	80043a4 <UART_SetConfig+0x4b0>
 800435e:	009a      	lsls	r2, r3, #2
 8004360:	4b32      	ldr	r3, [pc, #200]	@ (800442c <UART_SetConfig+0x538>)
 8004362:	18d3      	adds	r3, r2, r3
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004368:	f7fd fe98 	bl	800209c <HAL_RCC_GetPCLK1Freq>
 800436c:	0003      	movs	r3, r0
 800436e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004370:	e021      	b.n	80043b6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004372:	f7fd fea9 	bl	80020c8 <HAL_RCC_GetPCLK2Freq>
 8004376:	0003      	movs	r3, r0
 8004378:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800437a:	e01c      	b.n	80043b6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800437c:	4b28      	ldr	r3, [pc, #160]	@ (8004420 <UART_SetConfig+0x52c>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2210      	movs	r2, #16
 8004382:	4013      	ands	r3, r2
 8004384:	d002      	beq.n	800438c <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004386:	4b27      	ldr	r3, [pc, #156]	@ (8004424 <UART_SetConfig+0x530>)
 8004388:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800438a:	e014      	b.n	80043b6 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 800438c:	4b26      	ldr	r3, [pc, #152]	@ (8004428 <UART_SetConfig+0x534>)
 800438e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004390:	e011      	b.n	80043b6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004392:	f7fd fdf3 	bl	8001f7c <HAL_RCC_GetSysClockFreq>
 8004396:	0003      	movs	r3, r0
 8004398:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800439a:	e00c      	b.n	80043b6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800439c:	2380      	movs	r3, #128	@ 0x80
 800439e:	021b      	lsls	r3, r3, #8
 80043a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80043a2:	e008      	b.n	80043b6 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 80043a4:	2300      	movs	r3, #0
 80043a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80043a8:	231a      	movs	r3, #26
 80043aa:	2218      	movs	r2, #24
 80043ac:	189b      	adds	r3, r3, r2
 80043ae:	19db      	adds	r3, r3, r7
 80043b0:	2201      	movs	r2, #1
 80043b2:	701a      	strb	r2, [r3, #0]
        break;
 80043b4:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80043b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d020      	beq.n	80043fe <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	085a      	lsrs	r2, r3, #1
 80043c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043c4:	18d2      	adds	r2, r2, r3
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	0019      	movs	r1, r3
 80043cc:	0010      	movs	r0, r2
 80043ce:	f7fb fe9b 	bl	8000108 <__udivsi3>
 80043d2:	0003      	movs	r3, r0
 80043d4:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043d8:	2b0f      	cmp	r3, #15
 80043da:	d90a      	bls.n	80043f2 <UART_SetConfig+0x4fe>
 80043dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80043de:	2380      	movs	r3, #128	@ 0x80
 80043e0:	025b      	lsls	r3, r3, #9
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d205      	bcs.n	80043f2 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80043e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	60da      	str	r2, [r3, #12]
 80043f0:	e005      	b.n	80043fe <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80043f2:	231a      	movs	r3, #26
 80043f4:	2218      	movs	r2, #24
 80043f6:	189b      	adds	r3, r3, r2
 80043f8:	19db      	adds	r3, r3, r7
 80043fa:	2201      	movs	r2, #1
 80043fc:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	2200      	movs	r2, #0
 8004402:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	2200      	movs	r2, #0
 8004408:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800440a:	231a      	movs	r3, #26
 800440c:	2218      	movs	r2, #24
 800440e:	189b      	adds	r3, r3, r2
 8004410:	19db      	adds	r3, r3, r7
 8004412:	781b      	ldrb	r3, [r3, #0]
}
 8004414:	0018      	movs	r0, r3
 8004416:	46bd      	mov	sp, r7
 8004418:	b00e      	add	sp, #56	@ 0x38
 800441a:	bdb0      	pop	{r4, r5, r7, pc}
 800441c:	080049b0 	.word	0x080049b0
 8004420:	40021000 	.word	0x40021000
 8004424:	003d0900 	.word	0x003d0900
 8004428:	00f42400 	.word	0x00f42400
 800442c:	080049d4 	.word	0x080049d4

08004430 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800443c:	2208      	movs	r2, #8
 800443e:	4013      	ands	r3, r2
 8004440:	d00b      	beq.n	800445a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	4a4a      	ldr	r2, [pc, #296]	@ (8004574 <UART_AdvFeatureConfig+0x144>)
 800444a:	4013      	ands	r3, r2
 800444c:	0019      	movs	r1, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	430a      	orrs	r2, r1
 8004458:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800445e:	2201      	movs	r2, #1
 8004460:	4013      	ands	r3, r2
 8004462:	d00b      	beq.n	800447c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	4a43      	ldr	r2, [pc, #268]	@ (8004578 <UART_AdvFeatureConfig+0x148>)
 800446c:	4013      	ands	r3, r2
 800446e:	0019      	movs	r1, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	430a      	orrs	r2, r1
 800447a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004480:	2202      	movs	r2, #2
 8004482:	4013      	ands	r3, r2
 8004484:	d00b      	beq.n	800449e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	4a3b      	ldr	r2, [pc, #236]	@ (800457c <UART_AdvFeatureConfig+0x14c>)
 800448e:	4013      	ands	r3, r2
 8004490:	0019      	movs	r1, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	430a      	orrs	r2, r1
 800449c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a2:	2204      	movs	r2, #4
 80044a4:	4013      	ands	r3, r2
 80044a6:	d00b      	beq.n	80044c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	4a34      	ldr	r2, [pc, #208]	@ (8004580 <UART_AdvFeatureConfig+0x150>)
 80044b0:	4013      	ands	r3, r2
 80044b2:	0019      	movs	r1, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	430a      	orrs	r2, r1
 80044be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c4:	2210      	movs	r2, #16
 80044c6:	4013      	ands	r3, r2
 80044c8:	d00b      	beq.n	80044e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	4a2c      	ldr	r2, [pc, #176]	@ (8004584 <UART_AdvFeatureConfig+0x154>)
 80044d2:	4013      	ands	r3, r2
 80044d4:	0019      	movs	r1, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	430a      	orrs	r2, r1
 80044e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e6:	2220      	movs	r2, #32
 80044e8:	4013      	ands	r3, r2
 80044ea:	d00b      	beq.n	8004504 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	4a25      	ldr	r2, [pc, #148]	@ (8004588 <UART_AdvFeatureConfig+0x158>)
 80044f4:	4013      	ands	r3, r2
 80044f6:	0019      	movs	r1, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	430a      	orrs	r2, r1
 8004502:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004508:	2240      	movs	r2, #64	@ 0x40
 800450a:	4013      	ands	r3, r2
 800450c:	d01d      	beq.n	800454a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	4a1d      	ldr	r2, [pc, #116]	@ (800458c <UART_AdvFeatureConfig+0x15c>)
 8004516:	4013      	ands	r3, r2
 8004518:	0019      	movs	r1, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	430a      	orrs	r2, r1
 8004524:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800452a:	2380      	movs	r3, #128	@ 0x80
 800452c:	035b      	lsls	r3, r3, #13
 800452e:	429a      	cmp	r2, r3
 8004530:	d10b      	bne.n	800454a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	4a15      	ldr	r2, [pc, #84]	@ (8004590 <UART_AdvFeatureConfig+0x160>)
 800453a:	4013      	ands	r3, r2
 800453c:	0019      	movs	r1, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	430a      	orrs	r2, r1
 8004548:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800454e:	2280      	movs	r2, #128	@ 0x80
 8004550:	4013      	ands	r3, r2
 8004552:	d00b      	beq.n	800456c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	4a0e      	ldr	r2, [pc, #56]	@ (8004594 <UART_AdvFeatureConfig+0x164>)
 800455c:	4013      	ands	r3, r2
 800455e:	0019      	movs	r1, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	430a      	orrs	r2, r1
 800456a:	605a      	str	r2, [r3, #4]
  }
}
 800456c:	46c0      	nop			@ (mov r8, r8)
 800456e:	46bd      	mov	sp, r7
 8004570:	b002      	add	sp, #8
 8004572:	bd80      	pop	{r7, pc}
 8004574:	ffff7fff 	.word	0xffff7fff
 8004578:	fffdffff 	.word	0xfffdffff
 800457c:	fffeffff 	.word	0xfffeffff
 8004580:	fffbffff 	.word	0xfffbffff
 8004584:	ffffefff 	.word	0xffffefff
 8004588:	ffffdfff 	.word	0xffffdfff
 800458c:	ffefffff 	.word	0xffefffff
 8004590:	ff9fffff 	.word	0xff9fffff
 8004594:	fff7ffff 	.word	0xfff7ffff

08004598 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b092      	sub	sp, #72	@ 0x48
 800459c:	af02      	add	r7, sp, #8
 800459e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2284      	movs	r2, #132	@ 0x84
 80045a4:	2100      	movs	r1, #0
 80045a6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80045a8:	f7fc fc9a 	bl	8000ee0 <HAL_GetTick>
 80045ac:	0003      	movs	r3, r0
 80045ae:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2208      	movs	r2, #8
 80045b8:	4013      	ands	r3, r2
 80045ba:	2b08      	cmp	r3, #8
 80045bc:	d12c      	bne.n	8004618 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045c0:	2280      	movs	r2, #128	@ 0x80
 80045c2:	0391      	lsls	r1, r2, #14
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	4a46      	ldr	r2, [pc, #280]	@ (80046e0 <UART_CheckIdleState+0x148>)
 80045c8:	9200      	str	r2, [sp, #0]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f000 f88c 	bl	80046e8 <UART_WaitOnFlagUntilTimeout>
 80045d0:	1e03      	subs	r3, r0, #0
 80045d2:	d021      	beq.n	8004618 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045d4:	f3ef 8310 	mrs	r3, PRIMASK
 80045d8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80045da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80045dc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80045de:	2301      	movs	r3, #1
 80045e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045e4:	f383 8810 	msr	PRIMASK, r3
}
 80045e8:	46c0      	nop			@ (mov r8, r8)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2180      	movs	r1, #128	@ 0x80
 80045f6:	438a      	bics	r2, r1
 80045f8:	601a      	str	r2, [r3, #0]
 80045fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004600:	f383 8810 	msr	PRIMASK, r3
}
 8004604:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2220      	movs	r2, #32
 800460a:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2278      	movs	r2, #120	@ 0x78
 8004610:	2100      	movs	r1, #0
 8004612:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004614:	2303      	movs	r3, #3
 8004616:	e05f      	b.n	80046d8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2204      	movs	r2, #4
 8004620:	4013      	ands	r3, r2
 8004622:	2b04      	cmp	r3, #4
 8004624:	d146      	bne.n	80046b4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004626:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004628:	2280      	movs	r2, #128	@ 0x80
 800462a:	03d1      	lsls	r1, r2, #15
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	4a2c      	ldr	r2, [pc, #176]	@ (80046e0 <UART_CheckIdleState+0x148>)
 8004630:	9200      	str	r2, [sp, #0]
 8004632:	2200      	movs	r2, #0
 8004634:	f000 f858 	bl	80046e8 <UART_WaitOnFlagUntilTimeout>
 8004638:	1e03      	subs	r3, r0, #0
 800463a:	d03b      	beq.n	80046b4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800463c:	f3ef 8310 	mrs	r3, PRIMASK
 8004640:	60fb      	str	r3, [r7, #12]
  return(result);
 8004642:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004644:	637b      	str	r3, [r7, #52]	@ 0x34
 8004646:	2301      	movs	r3, #1
 8004648:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	f383 8810 	msr	PRIMASK, r3
}
 8004650:	46c0      	nop			@ (mov r8, r8)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4921      	ldr	r1, [pc, #132]	@ (80046e4 <UART_CheckIdleState+0x14c>)
 800465e:	400a      	ands	r2, r1
 8004660:	601a      	str	r2, [r3, #0]
 8004662:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004664:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	f383 8810 	msr	PRIMASK, r3
}
 800466c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800466e:	f3ef 8310 	mrs	r3, PRIMASK
 8004672:	61bb      	str	r3, [r7, #24]
  return(result);
 8004674:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004676:	633b      	str	r3, [r7, #48]	@ 0x30
 8004678:	2301      	movs	r3, #1
 800467a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	f383 8810 	msr	PRIMASK, r3
}
 8004682:	46c0      	nop			@ (mov r8, r8)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	689a      	ldr	r2, [r3, #8]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2101      	movs	r1, #1
 8004690:	438a      	bics	r2, r1
 8004692:	609a      	str	r2, [r3, #8]
 8004694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004696:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004698:	6a3b      	ldr	r3, [r7, #32]
 800469a:	f383 8810 	msr	PRIMASK, r3
}
 800469e:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2280      	movs	r2, #128	@ 0x80
 80046a4:	2120      	movs	r1, #32
 80046a6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2278      	movs	r2, #120	@ 0x78
 80046ac:	2100      	movs	r1, #0
 80046ae:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e011      	b.n	80046d8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2220      	movs	r2, #32
 80046b8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2280      	movs	r2, #128	@ 0x80
 80046be:	2120      	movs	r1, #32
 80046c0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2278      	movs	r2, #120	@ 0x78
 80046d2:	2100      	movs	r1, #0
 80046d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	0018      	movs	r0, r3
 80046da:	46bd      	mov	sp, r7
 80046dc:	b010      	add	sp, #64	@ 0x40
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	01ffffff 	.word	0x01ffffff
 80046e4:	fffffedf 	.word	0xfffffedf

080046e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	603b      	str	r3, [r7, #0]
 80046f4:	1dfb      	adds	r3, r7, #7
 80046f6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046f8:	e051      	b.n	800479e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	3301      	adds	r3, #1
 80046fe:	d04e      	beq.n	800479e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004700:	f7fc fbee 	bl	8000ee0 <HAL_GetTick>
 8004704:	0002      	movs	r2, r0
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	69ba      	ldr	r2, [r7, #24]
 800470c:	429a      	cmp	r2, r3
 800470e:	d302      	bcc.n	8004716 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d101      	bne.n	800471a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e051      	b.n	80047be <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2204      	movs	r2, #4
 8004722:	4013      	ands	r3, r2
 8004724:	d03b      	beq.n	800479e <UART_WaitOnFlagUntilTimeout+0xb6>
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	2b80      	cmp	r3, #128	@ 0x80
 800472a:	d038      	beq.n	800479e <UART_WaitOnFlagUntilTimeout+0xb6>
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	2b40      	cmp	r3, #64	@ 0x40
 8004730:	d035      	beq.n	800479e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	69db      	ldr	r3, [r3, #28]
 8004738:	2208      	movs	r2, #8
 800473a:	4013      	ands	r3, r2
 800473c:	2b08      	cmp	r3, #8
 800473e:	d111      	bne.n	8004764 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2208      	movs	r2, #8
 8004746:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	0018      	movs	r0, r3
 800474c:	f000 f83c 	bl	80047c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2284      	movs	r2, #132	@ 0x84
 8004754:	2108      	movs	r1, #8
 8004756:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2278      	movs	r2, #120	@ 0x78
 800475c:	2100      	movs	r1, #0
 800475e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e02c      	b.n	80047be <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	69da      	ldr	r2, [r3, #28]
 800476a:	2380      	movs	r3, #128	@ 0x80
 800476c:	011b      	lsls	r3, r3, #4
 800476e:	401a      	ands	r2, r3
 8004770:	2380      	movs	r3, #128	@ 0x80
 8004772:	011b      	lsls	r3, r3, #4
 8004774:	429a      	cmp	r2, r3
 8004776:	d112      	bne.n	800479e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2280      	movs	r2, #128	@ 0x80
 800477e:	0112      	lsls	r2, r2, #4
 8004780:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	0018      	movs	r0, r3
 8004786:	f000 f81f 	bl	80047c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2284      	movs	r2, #132	@ 0x84
 800478e:	2120      	movs	r1, #32
 8004790:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2278      	movs	r2, #120	@ 0x78
 8004796:	2100      	movs	r1, #0
 8004798:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e00f      	b.n	80047be <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	69db      	ldr	r3, [r3, #28]
 80047a4:	68ba      	ldr	r2, [r7, #8]
 80047a6:	4013      	ands	r3, r2
 80047a8:	68ba      	ldr	r2, [r7, #8]
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	425a      	negs	r2, r3
 80047ae:	4153      	adcs	r3, r2
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	001a      	movs	r2, r3
 80047b4:	1dfb      	adds	r3, r7, #7
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d09e      	beq.n	80046fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	0018      	movs	r0, r3
 80047c0:	46bd      	mov	sp, r7
 80047c2:	b004      	add	sp, #16
 80047c4:	bd80      	pop	{r7, pc}
	...

080047c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b08e      	sub	sp, #56	@ 0x38
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047d0:	f3ef 8310 	mrs	r3, PRIMASK
 80047d4:	617b      	str	r3, [r7, #20]
  return(result);
 80047d6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80047da:	2301      	movs	r3, #1
 80047dc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	f383 8810 	msr	PRIMASK, r3
}
 80047e4:	46c0      	nop			@ (mov r8, r8)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4926      	ldr	r1, [pc, #152]	@ (800488c <UART_EndRxTransfer+0xc4>)
 80047f2:	400a      	ands	r2, r1
 80047f4:	601a      	str	r2, [r3, #0]
 80047f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	f383 8810 	msr	PRIMASK, r3
}
 8004800:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004802:	f3ef 8310 	mrs	r3, PRIMASK
 8004806:	623b      	str	r3, [r7, #32]
  return(result);
 8004808:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800480a:	633b      	str	r3, [r7, #48]	@ 0x30
 800480c:	2301      	movs	r3, #1
 800480e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004812:	f383 8810 	msr	PRIMASK, r3
}
 8004816:	46c0      	nop			@ (mov r8, r8)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	689a      	ldr	r2, [r3, #8]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2101      	movs	r1, #1
 8004824:	438a      	bics	r2, r1
 8004826:	609a      	str	r2, [r3, #8]
 8004828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800482a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800482c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800482e:	f383 8810 	msr	PRIMASK, r3
}
 8004832:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004838:	2b01      	cmp	r3, #1
 800483a:	d118      	bne.n	800486e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800483c:	f3ef 8310 	mrs	r3, PRIMASK
 8004840:	60bb      	str	r3, [r7, #8]
  return(result);
 8004842:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004844:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004846:	2301      	movs	r3, #1
 8004848:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f383 8810 	msr	PRIMASK, r3
}
 8004850:	46c0      	nop			@ (mov r8, r8)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2110      	movs	r1, #16
 800485e:	438a      	bics	r2, r1
 8004860:	601a      	str	r2, [r3, #0]
 8004862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004864:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	f383 8810 	msr	PRIMASK, r3
}
 800486c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2280      	movs	r2, #128	@ 0x80
 8004872:	2120      	movs	r1, #32
 8004874:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004882:	46c0      	nop			@ (mov r8, r8)
 8004884:	46bd      	mov	sp, r7
 8004886:	b00e      	add	sp, #56	@ 0x38
 8004888:	bd80      	pop	{r7, pc}
 800488a:	46c0      	nop			@ (mov r8, r8)
 800488c:	fffffedf 	.word	0xfffffedf

08004890 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800489c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	225a      	movs	r2, #90	@ 0x5a
 80048a2:	2100      	movs	r1, #0
 80048a4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	0018      	movs	r0, r3
 80048aa:	f7ff fb0f 	bl	8003ecc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048ae:	46c0      	nop			@ (mov r8, r8)
 80048b0:	46bd      	mov	sp, r7
 80048b2:	b004      	add	sp, #16
 80048b4:	bd80      	pop	{r7, pc}

080048b6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80048b6:	b580      	push	{r7, lr}
 80048b8:	b086      	sub	sp, #24
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048be:	f3ef 8310 	mrs	r3, PRIMASK
 80048c2:	60bb      	str	r3, [r7, #8]
  return(result);
 80048c4:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80048c6:	617b      	str	r3, [r7, #20]
 80048c8:	2301      	movs	r3, #1
 80048ca:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f383 8810 	msr	PRIMASK, r3
}
 80048d2:	46c0      	nop			@ (mov r8, r8)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2140      	movs	r1, #64	@ 0x40
 80048e0:	438a      	bics	r2, r1
 80048e2:	601a      	str	r2, [r3, #0]
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	f383 8810 	msr	PRIMASK, r3
}
 80048ee:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2220      	movs	r2, #32
 80048f4:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	0018      	movs	r0, r3
 8004900:	f7ff fadc 	bl	8003ebc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004904:	46c0      	nop			@ (mov r8, r8)
 8004906:	46bd      	mov	sp, r7
 8004908:	b006      	add	sp, #24
 800490a:	bd80      	pop	{r7, pc}

0800490c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004914:	46c0      	nop			@ (mov r8, r8)
 8004916:	46bd      	mov	sp, r7
 8004918:	b002      	add	sp, #8
 800491a:	bd80      	pop	{r7, pc}

0800491c <memset>:
 800491c:	0003      	movs	r3, r0
 800491e:	1882      	adds	r2, r0, r2
 8004920:	4293      	cmp	r3, r2
 8004922:	d100      	bne.n	8004926 <memset+0xa>
 8004924:	4770      	bx	lr
 8004926:	7019      	strb	r1, [r3, #0]
 8004928:	3301      	adds	r3, #1
 800492a:	e7f9      	b.n	8004920 <memset+0x4>

0800492c <__libc_init_array>:
 800492c:	b570      	push	{r4, r5, r6, lr}
 800492e:	2600      	movs	r6, #0
 8004930:	4c0c      	ldr	r4, [pc, #48]	@ (8004964 <__libc_init_array+0x38>)
 8004932:	4d0d      	ldr	r5, [pc, #52]	@ (8004968 <__libc_init_array+0x3c>)
 8004934:	1b64      	subs	r4, r4, r5
 8004936:	10a4      	asrs	r4, r4, #2
 8004938:	42a6      	cmp	r6, r4
 800493a:	d109      	bne.n	8004950 <__libc_init_array+0x24>
 800493c:	2600      	movs	r6, #0
 800493e:	f000 f819 	bl	8004974 <_init>
 8004942:	4c0a      	ldr	r4, [pc, #40]	@ (800496c <__libc_init_array+0x40>)
 8004944:	4d0a      	ldr	r5, [pc, #40]	@ (8004970 <__libc_init_array+0x44>)
 8004946:	1b64      	subs	r4, r4, r5
 8004948:	10a4      	asrs	r4, r4, #2
 800494a:	42a6      	cmp	r6, r4
 800494c:	d105      	bne.n	800495a <__libc_init_array+0x2e>
 800494e:	bd70      	pop	{r4, r5, r6, pc}
 8004950:	00b3      	lsls	r3, r6, #2
 8004952:	58eb      	ldr	r3, [r5, r3]
 8004954:	4798      	blx	r3
 8004956:	3601      	adds	r6, #1
 8004958:	e7ee      	b.n	8004938 <__libc_init_array+0xc>
 800495a:	00b3      	lsls	r3, r6, #2
 800495c:	58eb      	ldr	r3, [r5, r3]
 800495e:	4798      	blx	r3
 8004960:	3601      	adds	r6, #1
 8004962:	e7f2      	b.n	800494a <__libc_init_array+0x1e>
 8004964:	08004a00 	.word	0x08004a00
 8004968:	08004a00 	.word	0x08004a00
 800496c:	08004a04 	.word	0x08004a04
 8004970:	08004a00 	.word	0x08004a00

08004974 <_init>:
 8004974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004976:	46c0      	nop			@ (mov r8, r8)
 8004978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800497a:	bc08      	pop	{r3}
 800497c:	469e      	mov	lr, r3
 800497e:	4770      	bx	lr

08004980 <_fini>:
 8004980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004982:	46c0      	nop			@ (mov r8, r8)
 8004984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004986:	bc08      	pop	{r3}
 8004988:	469e      	mov	lr, r3
 800498a:	4770      	bx	lr
