
TimerButtonCombo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004420  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080044e0  080044e0  000054e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800454c  0800454c  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800454c  0800454c  0000554c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004554  08004554  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004554  08004554  00005554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004558  08004558  00005558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800455c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  2000000c  08004568  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000170  08004568  00006170  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000112c1  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002588  00000000  00000000  000172f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001000  00000000  00000000  00019880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c7e  00000000  00000000  0001a880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015819  00000000  00000000  0001b4fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012c53  00000000  00000000  00030d17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088e69  00000000  00000000  0004396a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cc7d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039f8  00000000  00000000  000cc818  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000d0210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080044c8 	.word	0x080044c8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080044c8 	.word	0x080044c8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	@ (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	@ (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__udivmoddi4>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	4657      	mov	r7, sl
 8000264:	464e      	mov	r6, r9
 8000266:	4645      	mov	r5, r8
 8000268:	46de      	mov	lr, fp
 800026a:	b5e0      	push	{r5, r6, r7, lr}
 800026c:	0004      	movs	r4, r0
 800026e:	000d      	movs	r5, r1
 8000270:	4692      	mov	sl, r2
 8000272:	4699      	mov	r9, r3
 8000274:	b083      	sub	sp, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d830      	bhi.n	80002dc <__udivmoddi4+0x7c>
 800027a:	d02d      	beq.n	80002d8 <__udivmoddi4+0x78>
 800027c:	4649      	mov	r1, r9
 800027e:	4650      	mov	r0, sl
 8000280:	f000 f8ba 	bl	80003f8 <__clzdi2>
 8000284:	0029      	movs	r1, r5
 8000286:	0006      	movs	r6, r0
 8000288:	0020      	movs	r0, r4
 800028a:	f000 f8b5 	bl	80003f8 <__clzdi2>
 800028e:	1a33      	subs	r3, r6, r0
 8000290:	4698      	mov	r8, r3
 8000292:	3b20      	subs	r3, #32
 8000294:	d434      	bmi.n	8000300 <__udivmoddi4+0xa0>
 8000296:	469b      	mov	fp, r3
 8000298:	4653      	mov	r3, sl
 800029a:	465a      	mov	r2, fp
 800029c:	4093      	lsls	r3, r2
 800029e:	4642      	mov	r2, r8
 80002a0:	001f      	movs	r7, r3
 80002a2:	4653      	mov	r3, sl
 80002a4:	4093      	lsls	r3, r2
 80002a6:	001e      	movs	r6, r3
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d83b      	bhi.n	8000324 <__udivmoddi4+0xc4>
 80002ac:	42af      	cmp	r7, r5
 80002ae:	d100      	bne.n	80002b2 <__udivmoddi4+0x52>
 80002b0:	e079      	b.n	80003a6 <__udivmoddi4+0x146>
 80002b2:	465b      	mov	r3, fp
 80002b4:	1ba4      	subs	r4, r4, r6
 80002b6:	41bd      	sbcs	r5, r7
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	da00      	bge.n	80002be <__udivmoddi4+0x5e>
 80002bc:	e076      	b.n	80003ac <__udivmoddi4+0x14c>
 80002be:	2200      	movs	r2, #0
 80002c0:	2300      	movs	r3, #0
 80002c2:	9200      	str	r2, [sp, #0]
 80002c4:	9301      	str	r3, [sp, #4]
 80002c6:	2301      	movs	r3, #1
 80002c8:	465a      	mov	r2, fp
 80002ca:	4093      	lsls	r3, r2
 80002cc:	9301      	str	r3, [sp, #4]
 80002ce:	2301      	movs	r3, #1
 80002d0:	4642      	mov	r2, r8
 80002d2:	4093      	lsls	r3, r2
 80002d4:	9300      	str	r3, [sp, #0]
 80002d6:	e029      	b.n	800032c <__udivmoddi4+0xcc>
 80002d8:	4282      	cmp	r2, r0
 80002da:	d9cf      	bls.n	800027c <__udivmoddi4+0x1c>
 80002dc:	2200      	movs	r2, #0
 80002de:	2300      	movs	r3, #0
 80002e0:	9200      	str	r2, [sp, #0]
 80002e2:	9301      	str	r3, [sp, #4]
 80002e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <__udivmoddi4+0x8e>
 80002ea:	601c      	str	r4, [r3, #0]
 80002ec:	605d      	str	r5, [r3, #4]
 80002ee:	9800      	ldr	r0, [sp, #0]
 80002f0:	9901      	ldr	r1, [sp, #4]
 80002f2:	b003      	add	sp, #12
 80002f4:	bcf0      	pop	{r4, r5, r6, r7}
 80002f6:	46bb      	mov	fp, r7
 80002f8:	46b2      	mov	sl, r6
 80002fa:	46a9      	mov	r9, r5
 80002fc:	46a0      	mov	r8, r4
 80002fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000300:	4642      	mov	r2, r8
 8000302:	469b      	mov	fp, r3
 8000304:	2320      	movs	r3, #32
 8000306:	1a9b      	subs	r3, r3, r2
 8000308:	4652      	mov	r2, sl
 800030a:	40da      	lsrs	r2, r3
 800030c:	4641      	mov	r1, r8
 800030e:	0013      	movs	r3, r2
 8000310:	464a      	mov	r2, r9
 8000312:	408a      	lsls	r2, r1
 8000314:	0017      	movs	r7, r2
 8000316:	4642      	mov	r2, r8
 8000318:	431f      	orrs	r7, r3
 800031a:	4653      	mov	r3, sl
 800031c:	4093      	lsls	r3, r2
 800031e:	001e      	movs	r6, r3
 8000320:	42af      	cmp	r7, r5
 8000322:	d9c3      	bls.n	80002ac <__udivmoddi4+0x4c>
 8000324:	2200      	movs	r2, #0
 8000326:	2300      	movs	r3, #0
 8000328:	9200      	str	r2, [sp, #0]
 800032a:	9301      	str	r3, [sp, #4]
 800032c:	4643      	mov	r3, r8
 800032e:	2b00      	cmp	r3, #0
 8000330:	d0d8      	beq.n	80002e4 <__udivmoddi4+0x84>
 8000332:	07fb      	lsls	r3, r7, #31
 8000334:	0872      	lsrs	r2, r6, #1
 8000336:	431a      	orrs	r2, r3
 8000338:	4646      	mov	r6, r8
 800033a:	087b      	lsrs	r3, r7, #1
 800033c:	e00e      	b.n	800035c <__udivmoddi4+0xfc>
 800033e:	42ab      	cmp	r3, r5
 8000340:	d101      	bne.n	8000346 <__udivmoddi4+0xe6>
 8000342:	42a2      	cmp	r2, r4
 8000344:	d80c      	bhi.n	8000360 <__udivmoddi4+0x100>
 8000346:	1aa4      	subs	r4, r4, r2
 8000348:	419d      	sbcs	r5, r3
 800034a:	2001      	movs	r0, #1
 800034c:	1924      	adds	r4, r4, r4
 800034e:	416d      	adcs	r5, r5
 8000350:	2100      	movs	r1, #0
 8000352:	3e01      	subs	r6, #1
 8000354:	1824      	adds	r4, r4, r0
 8000356:	414d      	adcs	r5, r1
 8000358:	2e00      	cmp	r6, #0
 800035a:	d006      	beq.n	800036a <__udivmoddi4+0x10a>
 800035c:	42ab      	cmp	r3, r5
 800035e:	d9ee      	bls.n	800033e <__udivmoddi4+0xde>
 8000360:	3e01      	subs	r6, #1
 8000362:	1924      	adds	r4, r4, r4
 8000364:	416d      	adcs	r5, r5
 8000366:	2e00      	cmp	r6, #0
 8000368:	d1f8      	bne.n	800035c <__udivmoddi4+0xfc>
 800036a:	9800      	ldr	r0, [sp, #0]
 800036c:	9901      	ldr	r1, [sp, #4]
 800036e:	465b      	mov	r3, fp
 8000370:	1900      	adds	r0, r0, r4
 8000372:	4169      	adcs	r1, r5
 8000374:	2b00      	cmp	r3, #0
 8000376:	db24      	blt.n	80003c2 <__udivmoddi4+0x162>
 8000378:	002b      	movs	r3, r5
 800037a:	465a      	mov	r2, fp
 800037c:	4644      	mov	r4, r8
 800037e:	40d3      	lsrs	r3, r2
 8000380:	002a      	movs	r2, r5
 8000382:	40e2      	lsrs	r2, r4
 8000384:	001c      	movs	r4, r3
 8000386:	465b      	mov	r3, fp
 8000388:	0015      	movs	r5, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	db2a      	blt.n	80003e4 <__udivmoddi4+0x184>
 800038e:	0026      	movs	r6, r4
 8000390:	409e      	lsls	r6, r3
 8000392:	0033      	movs	r3, r6
 8000394:	0026      	movs	r6, r4
 8000396:	4647      	mov	r7, r8
 8000398:	40be      	lsls	r6, r7
 800039a:	0032      	movs	r2, r6
 800039c:	1a80      	subs	r0, r0, r2
 800039e:	4199      	sbcs	r1, r3
 80003a0:	9000      	str	r0, [sp, #0]
 80003a2:	9101      	str	r1, [sp, #4]
 80003a4:	e79e      	b.n	80002e4 <__udivmoddi4+0x84>
 80003a6:	42a3      	cmp	r3, r4
 80003a8:	d8bc      	bhi.n	8000324 <__udivmoddi4+0xc4>
 80003aa:	e782      	b.n	80002b2 <__udivmoddi4+0x52>
 80003ac:	4642      	mov	r2, r8
 80003ae:	2320      	movs	r3, #32
 80003b0:	2100      	movs	r1, #0
 80003b2:	1a9b      	subs	r3, r3, r2
 80003b4:	2200      	movs	r2, #0
 80003b6:	9100      	str	r1, [sp, #0]
 80003b8:	9201      	str	r2, [sp, #4]
 80003ba:	2201      	movs	r2, #1
 80003bc:	40da      	lsrs	r2, r3
 80003be:	9201      	str	r2, [sp, #4]
 80003c0:	e785      	b.n	80002ce <__udivmoddi4+0x6e>
 80003c2:	4642      	mov	r2, r8
 80003c4:	2320      	movs	r3, #32
 80003c6:	1a9b      	subs	r3, r3, r2
 80003c8:	002a      	movs	r2, r5
 80003ca:	4646      	mov	r6, r8
 80003cc:	409a      	lsls	r2, r3
 80003ce:	0023      	movs	r3, r4
 80003d0:	40f3      	lsrs	r3, r6
 80003d2:	4644      	mov	r4, r8
 80003d4:	4313      	orrs	r3, r2
 80003d6:	002a      	movs	r2, r5
 80003d8:	40e2      	lsrs	r2, r4
 80003da:	001c      	movs	r4, r3
 80003dc:	465b      	mov	r3, fp
 80003de:	0015      	movs	r5, r2
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	dad4      	bge.n	800038e <__udivmoddi4+0x12e>
 80003e4:	4642      	mov	r2, r8
 80003e6:	002f      	movs	r7, r5
 80003e8:	2320      	movs	r3, #32
 80003ea:	0026      	movs	r6, r4
 80003ec:	4097      	lsls	r7, r2
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	40de      	lsrs	r6, r3
 80003f2:	003b      	movs	r3, r7
 80003f4:	4333      	orrs	r3, r6
 80003f6:	e7cd      	b.n	8000394 <__udivmoddi4+0x134>

080003f8 <__clzdi2>:
 80003f8:	b510      	push	{r4, lr}
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d103      	bne.n	8000406 <__clzdi2+0xe>
 80003fe:	f000 f807 	bl	8000410 <__clzsi2>
 8000402:	3020      	adds	r0, #32
 8000404:	e002      	b.n	800040c <__clzdi2+0x14>
 8000406:	0008      	movs	r0, r1
 8000408:	f000 f802 	bl	8000410 <__clzsi2>
 800040c:	bd10      	pop	{r4, pc}
 800040e:	46c0      	nop			@ (mov r8, r8)

08000410 <__clzsi2>:
 8000410:	211c      	movs	r1, #28
 8000412:	2301      	movs	r3, #1
 8000414:	041b      	lsls	r3, r3, #16
 8000416:	4298      	cmp	r0, r3
 8000418:	d301      	bcc.n	800041e <__clzsi2+0xe>
 800041a:	0c00      	lsrs	r0, r0, #16
 800041c:	3910      	subs	r1, #16
 800041e:	0a1b      	lsrs	r3, r3, #8
 8000420:	4298      	cmp	r0, r3
 8000422:	d301      	bcc.n	8000428 <__clzsi2+0x18>
 8000424:	0a00      	lsrs	r0, r0, #8
 8000426:	3908      	subs	r1, #8
 8000428:	091b      	lsrs	r3, r3, #4
 800042a:	4298      	cmp	r0, r3
 800042c:	d301      	bcc.n	8000432 <__clzsi2+0x22>
 800042e:	0900      	lsrs	r0, r0, #4
 8000430:	3904      	subs	r1, #4
 8000432:	a202      	add	r2, pc, #8	@ (adr r2, 800043c <__clzsi2+0x2c>)
 8000434:	5c10      	ldrb	r0, [r2, r0]
 8000436:	1840      	adds	r0, r0, r1
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	02020304 	.word	0x02020304
 8000440:	01010101 	.word	0x01010101
	...

0800044c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000450:	f000 fc64 	bl	8000d1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000454:	f000 f822 	bl	800049c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000458:	f000 f9f8 	bl	800084c <MX_GPIO_Init>
  MX_RTC_Init();
 800045c:	f000 f898 	bl	8000590 <MX_RTC_Init>
  MX_SPI1_Init();
 8000460:	f000 f936 	bl	80006d0 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000464:	f000 f9c2 	bl	80007ec <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000468:	f000 f96a 	bl	8000740 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800046c:	46c0      	nop			@ (mov r8, r8)
 800046e:	e7fd      	b.n	800046c <main+0x20>

08000470 <HAL_GPIO_EXTI_Callback>:
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
 8000476:	0002      	movs	r2, r0
 8000478:	1dbb      	adds	r3, r7, #6
 800047a:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == GPIO_PIN_0){
 800047c:	1dbb      	adds	r3, r7, #6
 800047e:	881b      	ldrh	r3, [r3, #0]
 8000480:	2b01      	cmp	r3, #1
 8000482:	d104      	bne.n	800048e <HAL_GPIO_EXTI_Callback+0x1e>


    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8000484:	4b04      	ldr	r3, [pc, #16]	@ (8000498 <HAL_GPIO_EXTI_Callback+0x28>)
 8000486:	2120      	movs	r1, #32
 8000488:	0018      	movs	r0, r3
 800048a:	f000 ffb8 	bl	80013fe <HAL_GPIO_TogglePin>
	}
}
 800048e:	46c0      	nop			@ (mov r8, r8)
 8000490:	46bd      	mov	sp, r7
 8000492:	b002      	add	sp, #8
 8000494:	bd80      	pop	{r7, pc}
 8000496:	46c0      	nop			@ (mov r8, r8)
 8000498:	50000400 	.word	0x50000400

0800049c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800049c:	b590      	push	{r4, r7, lr}
 800049e:	b09d      	sub	sp, #116	@ 0x74
 80004a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004a2:	2438      	movs	r4, #56	@ 0x38
 80004a4:	193b      	adds	r3, r7, r4
 80004a6:	0018      	movs	r0, r3
 80004a8:	2338      	movs	r3, #56	@ 0x38
 80004aa:	001a      	movs	r2, r3
 80004ac:	2100      	movs	r1, #0
 80004ae:	f003 ffdf 	bl	8004470 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004b2:	2324      	movs	r3, #36	@ 0x24
 80004b4:	18fb      	adds	r3, r7, r3
 80004b6:	0018      	movs	r0, r3
 80004b8:	2314      	movs	r3, #20
 80004ba:	001a      	movs	r2, r3
 80004bc:	2100      	movs	r1, #0
 80004be:	f003 ffd7 	bl	8004470 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004c2:	003b      	movs	r3, r7
 80004c4:	0018      	movs	r0, r3
 80004c6:	2324      	movs	r3, #36	@ 0x24
 80004c8:	001a      	movs	r2, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	f003 ffd0 	bl	8004470 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004d0:	4b2d      	ldr	r3, [pc, #180]	@ (8000588 <SystemClock_Config+0xec>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4a2d      	ldr	r2, [pc, #180]	@ (800058c <SystemClock_Config+0xf0>)
 80004d6:	401a      	ands	r2, r3
 80004d8:	4b2b      	ldr	r3, [pc, #172]	@ (8000588 <SystemClock_Config+0xec>)
 80004da:	2180      	movs	r1, #128	@ 0x80
 80004dc:	0109      	lsls	r1, r1, #4
 80004de:	430a      	orrs	r2, r1
 80004e0:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80004e2:	0021      	movs	r1, r4
 80004e4:	187b      	adds	r3, r7, r1
 80004e6:	220a      	movs	r2, #10
 80004e8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004ea:	187b      	adds	r3, r7, r1
 80004ec:	2201      	movs	r2, #1
 80004ee:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004f0:	187b      	adds	r3, r7, r1
 80004f2:	2210      	movs	r2, #16
 80004f4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80004f6:	187b      	adds	r3, r7, r1
 80004f8:	2201      	movs	r2, #1
 80004fa:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004fc:	187b      	adds	r3, r7, r1
 80004fe:	2202      	movs	r2, #2
 8000500:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000502:	187b      	adds	r3, r7, r1
 8000504:	2200      	movs	r2, #0
 8000506:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_6;
 8000508:	187b      	adds	r3, r7, r1
 800050a:	2280      	movs	r2, #128	@ 0x80
 800050c:	0312      	lsls	r2, r2, #12
 800050e:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8000510:	187b      	adds	r3, r7, r1
 8000512:	2280      	movs	r2, #128	@ 0x80
 8000514:	0412      	lsls	r2, r2, #16
 8000516:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000518:	187b      	adds	r3, r7, r1
 800051a:	0018      	movs	r0, r3
 800051c:	f000 ffa6 	bl	800146c <HAL_RCC_OscConfig>
 8000520:	1e03      	subs	r3, r0, #0
 8000522:	d001      	beq.n	8000528 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000524:	f000 fa6a 	bl	80009fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000528:	2124      	movs	r1, #36	@ 0x24
 800052a:	187b      	adds	r3, r7, r1
 800052c:	220f      	movs	r2, #15
 800052e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000530:	187b      	adds	r3, r7, r1
 8000532:	2203      	movs	r2, #3
 8000534:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000536:	187b      	adds	r3, r7, r1
 8000538:	2200      	movs	r2, #0
 800053a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800053c:	187b      	adds	r3, r7, r1
 800053e:	2200      	movs	r2, #0
 8000540:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000542:	187b      	adds	r3, r7, r1
 8000544:	2200      	movs	r2, #0
 8000546:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000548:	187b      	adds	r3, r7, r1
 800054a:	2101      	movs	r1, #1
 800054c:	0018      	movs	r0, r3
 800054e:	f001 fb61 	bl	8001c14 <HAL_RCC_ClockConfig>
 8000552:	1e03      	subs	r3, r0, #0
 8000554:	d001      	beq.n	800055a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000556:	f000 fa51 	bl	80009fc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_RTC;
 800055a:	003b      	movs	r3, r7
 800055c:	2222      	movs	r2, #34	@ 0x22
 800055e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000560:	003b      	movs	r3, r7
 8000562:	2200      	movs	r2, #0
 8000564:	60da      	str	r2, [r3, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000566:	003b      	movs	r3, r7
 8000568:	2280      	movs	r2, #128	@ 0x80
 800056a:	0292      	lsls	r2, r2, #10
 800056c:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800056e:	003b      	movs	r3, r7
 8000570:	0018      	movs	r0, r3
 8000572:	f001 fd53 	bl	800201c <HAL_RCCEx_PeriphCLKConfig>
 8000576:	1e03      	subs	r3, r0, #0
 8000578:	d001      	beq.n	800057e <SystemClock_Config+0xe2>
  {
    Error_Handler();
 800057a:	f000 fa3f 	bl	80009fc <Error_Handler>
  }
}
 800057e:	46c0      	nop			@ (mov r8, r8)
 8000580:	46bd      	mov	sp, r7
 8000582:	b01d      	add	sp, #116	@ 0x74
 8000584:	bd90      	pop	{r4, r7, pc}
 8000586:	46c0      	nop			@ (mov r8, r8)
 8000588:	40007000 	.word	0x40007000
 800058c:	ffffe7ff 	.word	0xffffe7ff

08000590 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b090      	sub	sp, #64	@ 0x40
 8000594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000596:	232c      	movs	r3, #44	@ 0x2c
 8000598:	18fb      	adds	r3, r7, r3
 800059a:	0018      	movs	r0, r3
 800059c:	2314      	movs	r3, #20
 800059e:	001a      	movs	r2, r3
 80005a0:	2100      	movs	r1, #0
 80005a2:	f003 ff65 	bl	8004470 <memset>
  RTC_DateTypeDef sDate = {0};
 80005a6:	2328      	movs	r3, #40	@ 0x28
 80005a8:	18fb      	adds	r3, r7, r3
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 80005ae:	003b      	movs	r3, r7
 80005b0:	0018      	movs	r0, r3
 80005b2:	2328      	movs	r3, #40	@ 0x28
 80005b4:	001a      	movs	r2, r3
 80005b6:	2100      	movs	r1, #0
 80005b8:	f003 ff5a 	bl	8004470 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80005bc:	4b41      	ldr	r3, [pc, #260]	@ (80006c4 <MX_RTC_Init+0x134>)
 80005be:	4a42      	ldr	r2, [pc, #264]	@ (80006c8 <MX_RTC_Init+0x138>)
 80005c0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80005c2:	4b40      	ldr	r3, [pc, #256]	@ (80006c4 <MX_RTC_Init+0x134>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 31;
 80005c8:	4b3e      	ldr	r3, [pc, #248]	@ (80006c4 <MX_RTC_Init+0x134>)
 80005ca:	221f      	movs	r2, #31
 80005cc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 1023;
 80005ce:	4b3d      	ldr	r3, [pc, #244]	@ (80006c4 <MX_RTC_Init+0x134>)
 80005d0:	4a3e      	ldr	r2, [pc, #248]	@ (80006cc <MX_RTC_Init+0x13c>)
 80005d2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80005d4:	4b3b      	ldr	r3, [pc, #236]	@ (80006c4 <MX_RTC_Init+0x134>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80005da:	4b3a      	ldr	r3, [pc, #232]	@ (80006c4 <MX_RTC_Init+0x134>)
 80005dc:	2200      	movs	r2, #0
 80005de:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80005e0:	4b38      	ldr	r3, [pc, #224]	@ (80006c4 <MX_RTC_Init+0x134>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80005e6:	4b37      	ldr	r3, [pc, #220]	@ (80006c4 <MX_RTC_Init+0x134>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80005ec:	4b35      	ldr	r3, [pc, #212]	@ (80006c4 <MX_RTC_Init+0x134>)
 80005ee:	0018      	movs	r0, r3
 80005f0:	f001 fe70 	bl	80022d4 <HAL_RTC_Init>
 80005f4:	1e03      	subs	r3, r0, #0
 80005f6:	d001      	beq.n	80005fc <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 80005f8:	f000 fa00 	bl	80009fc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 80005fc:	212c      	movs	r1, #44	@ 0x2c
 80005fe:	187b      	adds	r3, r7, r1
 8000600:	2200      	movs	r2, #0
 8000602:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8000604:	187b      	adds	r3, r7, r1
 8000606:	2200      	movs	r2, #0
 8000608:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 800060a:	187b      	adds	r3, r7, r1
 800060c:	2200      	movs	r2, #0
 800060e:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000610:	187b      	adds	r3, r7, r1
 8000612:	2200      	movs	r2, #0
 8000614:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000616:	187b      	adds	r3, r7, r1
 8000618:	2200      	movs	r2, #0
 800061a:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800061c:	1879      	adds	r1, r7, r1
 800061e:	4b29      	ldr	r3, [pc, #164]	@ (80006c4 <MX_RTC_Init+0x134>)
 8000620:	2200      	movs	r2, #0
 8000622:	0018      	movs	r0, r3
 8000624:	f001 fef2 	bl	800240c <HAL_RTC_SetTime>
 8000628:	1e03      	subs	r3, r0, #0
 800062a:	d001      	beq.n	8000630 <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 800062c:	f000 f9e6 	bl	80009fc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000630:	2128      	movs	r1, #40	@ 0x28
 8000632:	187b      	adds	r3, r7, r1
 8000634:	2201      	movs	r2, #1
 8000636:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000638:	187b      	adds	r3, r7, r1
 800063a:	2201      	movs	r2, #1
 800063c:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 800063e:	187b      	adds	r3, r7, r1
 8000640:	2201      	movs	r2, #1
 8000642:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 8000644:	187b      	adds	r3, r7, r1
 8000646:	2200      	movs	r2, #0
 8000648:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800064a:	1879      	adds	r1, r7, r1
 800064c:	4b1d      	ldr	r3, [pc, #116]	@ (80006c4 <MX_RTC_Init+0x134>)
 800064e:	2200      	movs	r2, #0
 8000650:	0018      	movs	r0, r3
 8000652:	f001 ff85 	bl	8002560 <HAL_RTC_SetDate>
 8000656:	1e03      	subs	r3, r0, #0
 8000658:	d001      	beq.n	800065e <MX_RTC_Init+0xce>
  {
    Error_Handler();
 800065a:	f000 f9cf 	bl	80009fc <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 800065e:	003b      	movs	r3, r7
 8000660:	2200      	movs	r2, #0
 8000662:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8000664:	003b      	movs	r3, r7
 8000666:	2200      	movs	r2, #0
 8000668:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 800066a:	003b      	movs	r3, r7
 800066c:	2200      	movs	r2, #0
 800066e:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8000670:	003b      	movs	r3, r7
 8000672:	2200      	movs	r2, #0
 8000674:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000676:	003b      	movs	r3, r7
 8000678:	2200      	movs	r2, #0
 800067a:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800067c:	003b      	movs	r3, r7
 800067e:	2200      	movs	r2, #0
 8000680:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000682:	003b      	movs	r3, r7
 8000684:	2200      	movs	r2, #0
 8000686:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_NONE;
 8000688:	003b      	movs	r3, r7
 800068a:	22f0      	movs	r2, #240	@ 0xf0
 800068c:	0512      	lsls	r2, r2, #20
 800068e:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000690:	003b      	movs	r3, r7
 8000692:	2200      	movs	r2, #0
 8000694:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 8000696:	003b      	movs	r3, r7
 8000698:	2220      	movs	r2, #32
 800069a:	2101      	movs	r1, #1
 800069c:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 800069e:	003b      	movs	r3, r7
 80006a0:	2280      	movs	r2, #128	@ 0x80
 80006a2:	0052      	lsls	r2, r2, #1
 80006a4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80006a6:	0039      	movs	r1, r7
 80006a8:	4b06      	ldr	r3, [pc, #24]	@ (80006c4 <MX_RTC_Init+0x134>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	0018      	movs	r0, r3
 80006ae:	f001 ffeb 	bl	8002688 <HAL_RTC_SetAlarm_IT>
 80006b2:	1e03      	subs	r3, r0, #0
 80006b4:	d001      	beq.n	80006ba <MX_RTC_Init+0x12a>
  {
    Error_Handler();
 80006b6:	f000 f9a1 	bl	80009fc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80006ba:	46c0      	nop			@ (mov r8, r8)
 80006bc:	46bd      	mov	sp, r7
 80006be:	b010      	add	sp, #64	@ 0x40
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	46c0      	nop			@ (mov r8, r8)
 80006c4:	20000028 	.word	0x20000028
 80006c8:	40002800 	.word	0x40002800
 80006cc:	000003ff 	.word	0x000003ff

080006d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006d4:	4b18      	ldr	r3, [pc, #96]	@ (8000738 <MX_SPI1_Init+0x68>)
 80006d6:	4a19      	ldr	r2, [pc, #100]	@ (800073c <MX_SPI1_Init+0x6c>)
 80006d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006da:	4b17      	ldr	r3, [pc, #92]	@ (8000738 <MX_SPI1_Init+0x68>)
 80006dc:	2282      	movs	r2, #130	@ 0x82
 80006de:	0052      	lsls	r2, r2, #1
 80006e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006e2:	4b15      	ldr	r3, [pc, #84]	@ (8000738 <MX_SPI1_Init+0x68>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006e8:	4b13      	ldr	r3, [pc, #76]	@ (8000738 <MX_SPI1_Init+0x68>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006ee:	4b12      	ldr	r3, [pc, #72]	@ (8000738 <MX_SPI1_Init+0x68>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006f4:	4b10      	ldr	r3, [pc, #64]	@ (8000738 <MX_SPI1_Init+0x68>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000738 <MX_SPI1_Init+0x68>)
 80006fc:	2280      	movs	r2, #128	@ 0x80
 80006fe:	0092      	lsls	r2, r2, #2
 8000700:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000702:	4b0d      	ldr	r3, [pc, #52]	@ (8000738 <MX_SPI1_Init+0x68>)
 8000704:	2220      	movs	r2, #32
 8000706:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000708:	4b0b      	ldr	r3, [pc, #44]	@ (8000738 <MX_SPI1_Init+0x68>)
 800070a:	2200      	movs	r2, #0
 800070c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800070e:	4b0a      	ldr	r3, [pc, #40]	@ (8000738 <MX_SPI1_Init+0x68>)
 8000710:	2200      	movs	r2, #0
 8000712:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000714:	4b08      	ldr	r3, [pc, #32]	@ (8000738 <MX_SPI1_Init+0x68>)
 8000716:	2200      	movs	r2, #0
 8000718:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800071a:	4b07      	ldr	r3, [pc, #28]	@ (8000738 <MX_SPI1_Init+0x68>)
 800071c:	2207      	movs	r2, #7
 800071e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000720:	4b05      	ldr	r3, [pc, #20]	@ (8000738 <MX_SPI1_Init+0x68>)
 8000722:	0018      	movs	r0, r3
 8000724:	f002 fa28 	bl	8002b78 <HAL_SPI_Init>
 8000728:	1e03      	subs	r3, r0, #0
 800072a:	d001      	beq.n	8000730 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800072c:	f000 f966 	bl	80009fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000730:	46c0      	nop			@ (mov r8, r8)
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	46c0      	nop			@ (mov r8, r8)
 8000738:	2000004c 	.word	0x2000004c
 800073c:	40013000 	.word	0x40013000

08000740 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b086      	sub	sp, #24
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000746:	2308      	movs	r3, #8
 8000748:	18fb      	adds	r3, r7, r3
 800074a:	0018      	movs	r0, r3
 800074c:	2310      	movs	r3, #16
 800074e:	001a      	movs	r2, r3
 8000750:	2100      	movs	r1, #0
 8000752:	f003 fe8d 	bl	8004470 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000756:	003b      	movs	r3, r7
 8000758:	0018      	movs	r0, r3
 800075a:	2308      	movs	r3, #8
 800075c:	001a      	movs	r2, r3
 800075e:	2100      	movs	r1, #0
 8000760:	f003 fe86 	bl	8004470 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000764:	4b1e      	ldr	r3, [pc, #120]	@ (80007e0 <MX_TIM2_Init+0xa0>)
 8000766:	2280      	movs	r2, #128	@ 0x80
 8000768:	05d2      	lsls	r2, r2, #23
 800076a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31999;
 800076c:	4b1c      	ldr	r3, [pc, #112]	@ (80007e0 <MX_TIM2_Init+0xa0>)
 800076e:	4a1d      	ldr	r2, [pc, #116]	@ (80007e4 <MX_TIM2_Init+0xa4>)
 8000770:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000772:	4b1b      	ldr	r3, [pc, #108]	@ (80007e0 <MX_TIM2_Init+0xa0>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000778:	4b19      	ldr	r3, [pc, #100]	@ (80007e0 <MX_TIM2_Init+0xa0>)
 800077a:	4a1b      	ldr	r2, [pc, #108]	@ (80007e8 <MX_TIM2_Init+0xa8>)
 800077c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800077e:	4b18      	ldr	r3, [pc, #96]	@ (80007e0 <MX_TIM2_Init+0xa0>)
 8000780:	2200      	movs	r2, #0
 8000782:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000784:	4b16      	ldr	r3, [pc, #88]	@ (80007e0 <MX_TIM2_Init+0xa0>)
 8000786:	2200      	movs	r2, #0
 8000788:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800078a:	4b15      	ldr	r3, [pc, #84]	@ (80007e0 <MX_TIM2_Init+0xa0>)
 800078c:	0018      	movs	r0, r3
 800078e:	f002 fa87 	bl	8002ca0 <HAL_TIM_Base_Init>
 8000792:	1e03      	subs	r3, r0, #0
 8000794:	d001      	beq.n	800079a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000796:	f000 f931 	bl	80009fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800079a:	2108      	movs	r1, #8
 800079c:	187b      	adds	r3, r7, r1
 800079e:	2280      	movs	r2, #128	@ 0x80
 80007a0:	0152      	lsls	r2, r2, #5
 80007a2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007a4:	187a      	adds	r2, r7, r1
 80007a6:	4b0e      	ldr	r3, [pc, #56]	@ (80007e0 <MX_TIM2_Init+0xa0>)
 80007a8:	0011      	movs	r1, r2
 80007aa:	0018      	movs	r0, r3
 80007ac:	f002 fb84 	bl	8002eb8 <HAL_TIM_ConfigClockSource>
 80007b0:	1e03      	subs	r3, r0, #0
 80007b2:	d001      	beq.n	80007b8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80007b4:	f000 f922 	bl	80009fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007b8:	003b      	movs	r3, r7
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007be:	003b      	movs	r3, r7
 80007c0:	2200      	movs	r2, #0
 80007c2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007c4:	003a      	movs	r2, r7
 80007c6:	4b06      	ldr	r3, [pc, #24]	@ (80007e0 <MX_TIM2_Init+0xa0>)
 80007c8:	0011      	movs	r1, r2
 80007ca:	0018      	movs	r0, r3
 80007cc:	f002 fd6e 	bl	80032ac <HAL_TIMEx_MasterConfigSynchronization>
 80007d0:	1e03      	subs	r3, r0, #0
 80007d2:	d001      	beq.n	80007d8 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80007d4:	f000 f912 	bl	80009fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007d8:	46c0      	nop			@ (mov r8, r8)
 80007da:	46bd      	mov	sp, r7
 80007dc:	b006      	add	sp, #24
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	200000a4 	.word	0x200000a4
 80007e4:	00007cff 	.word	0x00007cff
 80007e8:	000003e7 	.word	0x000003e7

080007ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007f0:	4b14      	ldr	r3, [pc, #80]	@ (8000844 <MX_USART2_UART_Init+0x58>)
 80007f2:	4a15      	ldr	r2, [pc, #84]	@ (8000848 <MX_USART2_UART_Init+0x5c>)
 80007f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007f6:	4b13      	ldr	r3, [pc, #76]	@ (8000844 <MX_USART2_UART_Init+0x58>)
 80007f8:	22e1      	movs	r2, #225	@ 0xe1
 80007fa:	0252      	lsls	r2, r2, #9
 80007fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007fe:	4b11      	ldr	r3, [pc, #68]	@ (8000844 <MX_USART2_UART_Init+0x58>)
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000804:	4b0f      	ldr	r3, [pc, #60]	@ (8000844 <MX_USART2_UART_Init+0x58>)
 8000806:	2200      	movs	r2, #0
 8000808:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800080a:	4b0e      	ldr	r3, [pc, #56]	@ (8000844 <MX_USART2_UART_Init+0x58>)
 800080c:	2200      	movs	r2, #0
 800080e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000810:	4b0c      	ldr	r3, [pc, #48]	@ (8000844 <MX_USART2_UART_Init+0x58>)
 8000812:	220c      	movs	r2, #12
 8000814:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000816:	4b0b      	ldr	r3, [pc, #44]	@ (8000844 <MX_USART2_UART_Init+0x58>)
 8000818:	2200      	movs	r2, #0
 800081a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800081c:	4b09      	ldr	r3, [pc, #36]	@ (8000844 <MX_USART2_UART_Init+0x58>)
 800081e:	2200      	movs	r2, #0
 8000820:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000822:	4b08      	ldr	r3, [pc, #32]	@ (8000844 <MX_USART2_UART_Init+0x58>)
 8000824:	2200      	movs	r2, #0
 8000826:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000828:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <MX_USART2_UART_Init+0x58>)
 800082a:	2200      	movs	r2, #0
 800082c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800082e:	4b05      	ldr	r3, [pc, #20]	@ (8000844 <MX_USART2_UART_Init+0x58>)
 8000830:	0018      	movs	r0, r3
 8000832:	f002 fd99 	bl	8003368 <HAL_UART_Init>
 8000836:	1e03      	subs	r3, r0, #0
 8000838:	d001      	beq.n	800083e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800083a:	f000 f8df 	bl	80009fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800083e:	46c0      	nop			@ (mov r8, r8)
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	200000e4 	.word	0x200000e4
 8000848:	40004400 	.word	0x40004400

0800084c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800084c:	b590      	push	{r4, r7, lr}
 800084e:	b08b      	sub	sp, #44	@ 0x2c
 8000850:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000852:	2414      	movs	r4, #20
 8000854:	193b      	adds	r3, r7, r4
 8000856:	0018      	movs	r0, r3
 8000858:	2314      	movs	r3, #20
 800085a:	001a      	movs	r2, r3
 800085c:	2100      	movs	r1, #0
 800085e:	f003 fe07 	bl	8004470 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000862:	4b62      	ldr	r3, [pc, #392]	@ (80009ec <MX_GPIO_Init+0x1a0>)
 8000864:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000866:	4b61      	ldr	r3, [pc, #388]	@ (80009ec <MX_GPIO_Init+0x1a0>)
 8000868:	2101      	movs	r1, #1
 800086a:	430a      	orrs	r2, r1
 800086c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800086e:	4b5f      	ldr	r3, [pc, #380]	@ (80009ec <MX_GPIO_Init+0x1a0>)
 8000870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000872:	2201      	movs	r2, #1
 8000874:	4013      	ands	r3, r2
 8000876:	613b      	str	r3, [r7, #16]
 8000878:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087a:	4b5c      	ldr	r3, [pc, #368]	@ (80009ec <MX_GPIO_Init+0x1a0>)
 800087c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800087e:	4b5b      	ldr	r3, [pc, #364]	@ (80009ec <MX_GPIO_Init+0x1a0>)
 8000880:	2102      	movs	r1, #2
 8000882:	430a      	orrs	r2, r1
 8000884:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000886:	4b59      	ldr	r3, [pc, #356]	@ (80009ec <MX_GPIO_Init+0x1a0>)
 8000888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800088a:	2202      	movs	r2, #2
 800088c:	4013      	ands	r3, r2
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000892:	4b56      	ldr	r3, [pc, #344]	@ (80009ec <MX_GPIO_Init+0x1a0>)
 8000894:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000896:	4b55      	ldr	r3, [pc, #340]	@ (80009ec <MX_GPIO_Init+0x1a0>)
 8000898:	2104      	movs	r1, #4
 800089a:	430a      	orrs	r2, r1
 800089c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800089e:	4b53      	ldr	r3, [pc, #332]	@ (80009ec <MX_GPIO_Init+0x1a0>)
 80008a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008a2:	2204      	movs	r2, #4
 80008a4:	4013      	ands	r3, r2
 80008a6:	60bb      	str	r3, [r7, #8]
 80008a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008aa:	4b50      	ldr	r3, [pc, #320]	@ (80009ec <MX_GPIO_Init+0x1a0>)
 80008ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80008ae:	4b4f      	ldr	r3, [pc, #316]	@ (80009ec <MX_GPIO_Init+0x1a0>)
 80008b0:	2180      	movs	r1, #128	@ 0x80
 80008b2:	430a      	orrs	r2, r1
 80008b4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80008b6:	4b4d      	ldr	r3, [pc, #308]	@ (80009ec <MX_GPIO_Init+0x1a0>)
 80008b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008ba:	2280      	movs	r2, #128	@ 0x80
 80008bc:	4013      	ands	r3, r2
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PA15_RESERVED_Pin|PA12_RESERVED_Pin|PA1_RESERVED_Pin, GPIO_PIN_RESET);
 80008c2:	494b      	ldr	r1, [pc, #300]	@ (80009f0 <MX_GPIO_Init+0x1a4>)
 80008c4:	23a0      	movs	r3, #160	@ 0xa0
 80008c6:	05db      	lsls	r3, r3, #23
 80008c8:	2200      	movs	r2, #0
 80008ca:	0018      	movs	r0, r3
 80008cc:	f000 fd7a 	bl	80013c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80008d0:	4b48      	ldr	r3, [pc, #288]	@ (80009f4 <MX_GPIO_Init+0x1a8>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	2120      	movs	r1, #32
 80008d6:	0018      	movs	r0, r3
 80008d8:	f000 fd74 	bl	80013c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PC1_RESERVED_Pin|PC0_RESERVED_Pin|PC2_RESERVED_Pin, GPIO_PIN_RESET);
 80008dc:	4b46      	ldr	r3, [pc, #280]	@ (80009f8 <MX_GPIO_Init+0x1ac>)
 80008de:	2200      	movs	r2, #0
 80008e0:	2107      	movs	r1, #7
 80008e2:	0018      	movs	r0, r3
 80008e4:	f000 fd6e 	bl	80013c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA15_RESERVED_Pin PA12_RESERVED_Pin PA1_RESERVED_Pin */
  GPIO_InitStruct.Pin = PA15_RESERVED_Pin|PA12_RESERVED_Pin|PA1_RESERVED_Pin;
 80008e8:	193b      	adds	r3, r7, r4
 80008ea:	4a41      	ldr	r2, [pc, #260]	@ (80009f0 <MX_GPIO_Init+0x1a4>)
 80008ec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ee:	193b      	adds	r3, r7, r4
 80008f0:	2201      	movs	r2, #1
 80008f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	193b      	adds	r3, r7, r4
 80008f6:	2200      	movs	r2, #0
 80008f8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008fa:	193b      	adds	r3, r7, r4
 80008fc:	2202      	movs	r2, #2
 80008fe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000900:	193a      	adds	r2, r7, r4
 8000902:	23a0      	movs	r3, #160	@ 0xa0
 8000904:	05db      	lsls	r3, r3, #23
 8000906:	0011      	movs	r1, r2
 8000908:	0018      	movs	r0, r3
 800090a:	f000 fbdd 	bl	80010c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800090e:	193b      	adds	r3, r7, r4
 8000910:	2220      	movs	r2, #32
 8000912:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000914:	193b      	adds	r3, r7, r4
 8000916:	2201      	movs	r2, #1
 8000918:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	193b      	adds	r3, r7, r4
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000920:	193b      	adds	r3, r7, r4
 8000922:	2200      	movs	r2, #0
 8000924:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000926:	193b      	adds	r3, r7, r4
 8000928:	4a32      	ldr	r2, [pc, #200]	@ (80009f4 <MX_GPIO_Init+0x1a8>)
 800092a:	0019      	movs	r1, r3
 800092c:	0010      	movs	r0, r2
 800092e:	f000 fbcb 	bl	80010c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4_RESERVED_Pin PB1_RESERVED_Pin */
  GPIO_InitStruct.Pin = PB4_RESERVED_Pin|PB1_RESERVED_Pin;
 8000932:	0021      	movs	r1, r4
 8000934:	187b      	adds	r3, r7, r1
 8000936:	2212      	movs	r2, #18
 8000938:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800093a:	187b      	adds	r3, r7, r1
 800093c:	2288      	movs	r2, #136	@ 0x88
 800093e:	0352      	lsls	r2, r2, #13
 8000940:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	187b      	adds	r3, r7, r1
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000948:	000c      	movs	r4, r1
 800094a:	187b      	adds	r3, r7, r1
 800094c:	4a29      	ldr	r2, [pc, #164]	@ (80009f4 <MX_GPIO_Init+0x1a8>)
 800094e:	0019      	movs	r1, r3
 8000950:	0010      	movs	r0, r2
 8000952:	f000 fbb9 	bl	80010c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13_RESERVED_Pin */
  GPIO_InitStruct.Pin = PC13_RESERVED_Pin;
 8000956:	0021      	movs	r1, r4
 8000958:	187b      	adds	r3, r7, r1
 800095a:	2280      	movs	r2, #128	@ 0x80
 800095c:	0192      	lsls	r2, r2, #6
 800095e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000960:	187b      	adds	r3, r7, r1
 8000962:	2288      	movs	r2, #136	@ 0x88
 8000964:	0352      	lsls	r2, r2, #13
 8000966:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	000c      	movs	r4, r1
 800096a:	193b      	adds	r3, r7, r4
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(PC13_RESERVED_GPIO_Port, &GPIO_InitStruct);
 8000970:	193b      	adds	r3, r7, r4
 8000972:	4a21      	ldr	r2, [pc, #132]	@ (80009f8 <MX_GPIO_Init+0x1ac>)
 8000974:	0019      	movs	r1, r3
 8000976:	0010      	movs	r0, r2
 8000978:	f000 fba6 	bl	80010c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1_RESERVED_Pin PC0_RESERVED_Pin PC2_RESERVED_Pin */
  GPIO_InitStruct.Pin = PC1_RESERVED_Pin|PC0_RESERVED_Pin|PC2_RESERVED_Pin;
 800097c:	193b      	adds	r3, r7, r4
 800097e:	2207      	movs	r2, #7
 8000980:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000982:	193b      	adds	r3, r7, r4
 8000984:	2201      	movs	r2, #1
 8000986:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	193b      	adds	r3, r7, r4
 800098a:	2200      	movs	r2, #0
 800098c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800098e:	193b      	adds	r3, r7, r4
 8000990:	2202      	movs	r2, #2
 8000992:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000994:	193b      	adds	r3, r7, r4
 8000996:	4a18      	ldr	r2, [pc, #96]	@ (80009f8 <MX_GPIO_Init+0x1ac>)
 8000998:	0019      	movs	r1, r3
 800099a:	0010      	movs	r0, r2
 800099c:	f000 fb94 	bl	80010c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009a0:	0021      	movs	r1, r4
 80009a2:	187b      	adds	r3, r7, r1
 80009a4:	2201      	movs	r2, #1
 80009a6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009a8:	187b      	adds	r3, r7, r1
 80009aa:	2288      	movs	r2, #136	@ 0x88
 80009ac:	0352      	lsls	r2, r2, #13
 80009ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	187b      	adds	r3, r7, r1
 80009b2:	2200      	movs	r2, #0
 80009b4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b6:	187a      	adds	r2, r7, r1
 80009b8:	23a0      	movs	r3, #160	@ 0xa0
 80009ba:	05db      	lsls	r3, r3, #23
 80009bc:	0011      	movs	r1, r2
 80009be:	0018      	movs	r0, r3
 80009c0:	f000 fb82 	bl	80010c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80009c4:	2200      	movs	r2, #0
 80009c6:	2100      	movs	r1, #0
 80009c8:	2005      	movs	r0, #5
 80009ca:	f000 fac3 	bl	8000f54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80009ce:	2005      	movs	r0, #5
 80009d0:	f000 fad5 	bl	8000f7e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80009d4:	2200      	movs	r2, #0
 80009d6:	2100      	movs	r1, #0
 80009d8:	2007      	movs	r0, #7
 80009da:	f000 fabb 	bl	8000f54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80009de:	2007      	movs	r0, #7
 80009e0:	f000 facd 	bl	8000f7e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80009e4:	46c0      	nop			@ (mov r8, r8)
 80009e6:	46bd      	mov	sp, r7
 80009e8:	b00b      	add	sp, #44	@ 0x2c
 80009ea:	bd90      	pop	{r4, r7, pc}
 80009ec:	40021000 	.word	0x40021000
 80009f0:	00009002 	.word	0x00009002
 80009f4:	50000400 	.word	0x50000400
 80009f8:	50000800 	.word	0x50000800

080009fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a00:	b672      	cpsid	i
}
 8000a02:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a04:	46c0      	nop			@ (mov r8, r8)
 8000a06:	e7fd      	b.n	8000a04 <Error_Handler+0x8>

08000a08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0c:	4b07      	ldr	r3, [pc, #28]	@ (8000a2c <HAL_MspInit+0x24>)
 8000a0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a10:	4b06      	ldr	r3, [pc, #24]	@ (8000a2c <HAL_MspInit+0x24>)
 8000a12:	2101      	movs	r1, #1
 8000a14:	430a      	orrs	r2, r1
 8000a16:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a18:	4b04      	ldr	r3, [pc, #16]	@ (8000a2c <HAL_MspInit+0x24>)
 8000a1a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000a1c:	4b03      	ldr	r3, [pc, #12]	@ (8000a2c <HAL_MspInit+0x24>)
 8000a1e:	2180      	movs	r1, #128	@ 0x80
 8000a20:	0549      	lsls	r1, r1, #21
 8000a22:	430a      	orrs	r2, r1
 8000a24:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a26:	46c0      	nop			@ (mov r8, r8)
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	40021000 	.word	0x40021000

08000a30 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a0a      	ldr	r2, [pc, #40]	@ (8000a68 <HAL_RTC_MspInit+0x38>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d10e      	bne.n	8000a60 <HAL_RTC_MspInit+0x30>
  {
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000a42:	4b0a      	ldr	r3, [pc, #40]	@ (8000a6c <HAL_RTC_MspInit+0x3c>)
 8000a44:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000a46:	4b09      	ldr	r3, [pc, #36]	@ (8000a6c <HAL_RTC_MspInit+0x3c>)
 8000a48:	2180      	movs	r1, #128	@ 0x80
 8000a4a:	02c9      	lsls	r1, r1, #11
 8000a4c:	430a      	orrs	r2, r1
 8000a4e:	651a      	str	r2, [r3, #80]	@ 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8000a50:	2200      	movs	r2, #0
 8000a52:	2100      	movs	r1, #0
 8000a54:	2002      	movs	r0, #2
 8000a56:	f000 fa7d 	bl	8000f54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8000a5a:	2002      	movs	r0, #2
 8000a5c:	f000 fa8f 	bl	8000f7e <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8000a60:	46c0      	nop			@ (mov r8, r8)
 8000a62:	46bd      	mov	sp, r7
 8000a64:	b002      	add	sp, #8
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40002800 	.word	0x40002800
 8000a6c:	40021000 	.word	0x40021000

08000a70 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a70:	b590      	push	{r4, r7, lr}
 8000a72:	b08b      	sub	sp, #44	@ 0x2c
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a78:	2414      	movs	r4, #20
 8000a7a:	193b      	adds	r3, r7, r4
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	2314      	movs	r3, #20
 8000a80:	001a      	movs	r2, r3
 8000a82:	2100      	movs	r1, #0
 8000a84:	f003 fcf4 	bl	8004470 <memset>
  if(hspi->Instance==SPI1)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a28      	ldr	r2, [pc, #160]	@ (8000b30 <HAL_SPI_MspInit+0xc0>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d14a      	bne.n	8000b28 <HAL_SPI_MspInit+0xb8>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a92:	4b28      	ldr	r3, [pc, #160]	@ (8000b34 <HAL_SPI_MspInit+0xc4>)
 8000a94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a96:	4b27      	ldr	r3, [pc, #156]	@ (8000b34 <HAL_SPI_MspInit+0xc4>)
 8000a98:	2180      	movs	r1, #128	@ 0x80
 8000a9a:	0149      	lsls	r1, r1, #5
 8000a9c:	430a      	orrs	r2, r1
 8000a9e:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa0:	4b24      	ldr	r3, [pc, #144]	@ (8000b34 <HAL_SPI_MspInit+0xc4>)
 8000aa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000aa4:	4b23      	ldr	r3, [pc, #140]	@ (8000b34 <HAL_SPI_MspInit+0xc4>)
 8000aa6:	2102      	movs	r1, #2
 8000aa8:	430a      	orrs	r2, r1
 8000aaa:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000aac:	4b21      	ldr	r3, [pc, #132]	@ (8000b34 <HAL_SPI_MspInit+0xc4>)
 8000aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ab0:	2202      	movs	r2, #2
 8000ab2:	4013      	ands	r3, r2
 8000ab4:	613b      	str	r3, [r7, #16]
 8000ab6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab8:	4b1e      	ldr	r3, [pc, #120]	@ (8000b34 <HAL_SPI_MspInit+0xc4>)
 8000aba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000abc:	4b1d      	ldr	r3, [pc, #116]	@ (8000b34 <HAL_SPI_MspInit+0xc4>)
 8000abe:	2101      	movs	r1, #1
 8000ac0:	430a      	orrs	r2, r1
 8000ac2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000ac4:	4b1b      	ldr	r3, [pc, #108]	@ (8000b34 <HAL_SPI_MspInit+0xc4>)
 8000ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ac8:	2201      	movs	r2, #1
 8000aca:	4013      	ands	r3, r2
 8000acc:	60fb      	str	r3, [r7, #12]
 8000ace:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = PB3_RESERVED_Pin;
 8000ad0:	193b      	adds	r3, r7, r4
 8000ad2:	2208      	movs	r2, #8
 8000ad4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad6:	193b      	adds	r3, r7, r4
 8000ad8:	2202      	movs	r2, #2
 8000ada:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	193b      	adds	r3, r7, r4
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae2:	193b      	adds	r3, r7, r4
 8000ae4:	2203      	movs	r2, #3
 8000ae6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000ae8:	193b      	adds	r3, r7, r4
 8000aea:	2200      	movs	r2, #0
 8000aec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PB3_RESERVED_GPIO_Port, &GPIO_InitStruct);
 8000aee:	193b      	adds	r3, r7, r4
 8000af0:	4a11      	ldr	r2, [pc, #68]	@ (8000b38 <HAL_SPI_MspInit+0xc8>)
 8000af2:	0019      	movs	r1, r3
 8000af4:	0010      	movs	r0, r2
 8000af6:	f000 fae7 	bl	80010c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PA7_RESERVED_Pin|PA6_RESERVED_Pin;
 8000afa:	0021      	movs	r1, r4
 8000afc:	187b      	adds	r3, r7, r1
 8000afe:	22c0      	movs	r2, #192	@ 0xc0
 8000b00:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b02:	187b      	adds	r3, r7, r1
 8000b04:	2202      	movs	r2, #2
 8000b06:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	187b      	adds	r3, r7, r1
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0e:	187b      	adds	r3, r7, r1
 8000b10:	2203      	movs	r2, #3
 8000b12:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000b14:	187b      	adds	r3, r7, r1
 8000b16:	2200      	movs	r2, #0
 8000b18:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1a:	187a      	adds	r2, r7, r1
 8000b1c:	23a0      	movs	r3, #160	@ 0xa0
 8000b1e:	05db      	lsls	r3, r3, #23
 8000b20:	0011      	movs	r1, r2
 8000b22:	0018      	movs	r0, r3
 8000b24:	f000 fad0 	bl	80010c8 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000b28:	46c0      	nop			@ (mov r8, r8)
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	b00b      	add	sp, #44	@ 0x2c
 8000b2e:	bd90      	pop	{r4, r7, pc}
 8000b30:	40013000 	.word	0x40013000
 8000b34:	40021000 	.word	0x40021000
 8000b38:	50000400 	.word	0x50000400

08000b3c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	2380      	movs	r3, #128	@ 0x80
 8000b4a:	05db      	lsls	r3, r3, #23
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d10d      	bne.n	8000b6c <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b50:	4b08      	ldr	r3, [pc, #32]	@ (8000b74 <HAL_TIM_Base_MspInit+0x38>)
 8000b52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000b54:	4b07      	ldr	r3, [pc, #28]	@ (8000b74 <HAL_TIM_Base_MspInit+0x38>)
 8000b56:	2101      	movs	r1, #1
 8000b58:	430a      	orrs	r2, r1
 8000b5a:	639a      	str	r2, [r3, #56]	@ 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	2100      	movs	r1, #0
 8000b60:	200f      	movs	r0, #15
 8000b62:	f000 f9f7 	bl	8000f54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b66:	200f      	movs	r0, #15
 8000b68:	f000 fa09 	bl	8000f7e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000b6c:	46c0      	nop			@ (mov r8, r8)
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	b002      	add	sp, #8
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40021000 	.word	0x40021000

08000b78 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b78:	b590      	push	{r4, r7, lr}
 8000b7a:	b089      	sub	sp, #36	@ 0x24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b80:	240c      	movs	r4, #12
 8000b82:	193b      	adds	r3, r7, r4
 8000b84:	0018      	movs	r0, r3
 8000b86:	2314      	movs	r3, #20
 8000b88:	001a      	movs	r2, r3
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	f003 fc70 	bl	8004470 <memset>
  if(huart->Instance==USART2)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a1c      	ldr	r2, [pc, #112]	@ (8000c08 <HAL_UART_MspInit+0x90>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d131      	bne.n	8000bfe <HAL_UART_MspInit+0x86>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b9a:	4b1c      	ldr	r3, [pc, #112]	@ (8000c0c <HAL_UART_MspInit+0x94>)
 8000b9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000b9e:	4b1b      	ldr	r3, [pc, #108]	@ (8000c0c <HAL_UART_MspInit+0x94>)
 8000ba0:	2180      	movs	r1, #128	@ 0x80
 8000ba2:	0289      	lsls	r1, r1, #10
 8000ba4:	430a      	orrs	r2, r1
 8000ba6:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba8:	4b18      	ldr	r3, [pc, #96]	@ (8000c0c <HAL_UART_MspInit+0x94>)
 8000baa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000bac:	4b17      	ldr	r3, [pc, #92]	@ (8000c0c <HAL_UART_MspInit+0x94>)
 8000bae:	2101      	movs	r1, #1
 8000bb0:	430a      	orrs	r2, r1
 8000bb2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000bb4:	4b15      	ldr	r3, [pc, #84]	@ (8000c0c <HAL_UART_MspInit+0x94>)
 8000bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bb8:	2201      	movs	r2, #1
 8000bba:	4013      	ands	r3, r2
 8000bbc:	60bb      	str	r3, [r7, #8]
 8000bbe:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000bc0:	0021      	movs	r1, r4
 8000bc2:	187b      	adds	r3, r7, r1
 8000bc4:	220c      	movs	r2, #12
 8000bc6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc8:	187b      	adds	r3, r7, r1
 8000bca:	2202      	movs	r2, #2
 8000bcc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	187b      	adds	r3, r7, r1
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd4:	187b      	adds	r3, r7, r1
 8000bd6:	2203      	movs	r2, #3
 8000bd8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000bda:	187b      	adds	r3, r7, r1
 8000bdc:	2204      	movs	r2, #4
 8000bde:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be0:	187a      	adds	r2, r7, r1
 8000be2:	23a0      	movs	r3, #160	@ 0xa0
 8000be4:	05db      	lsls	r3, r3, #23
 8000be6:	0011      	movs	r1, r2
 8000be8:	0018      	movs	r0, r3
 8000bea:	f000 fa6d 	bl	80010c8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	201c      	movs	r0, #28
 8000bf4:	f000 f9ae 	bl	8000f54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000bf8:	201c      	movs	r0, #28
 8000bfa:	f000 f9c0 	bl	8000f7e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000bfe:	46c0      	nop			@ (mov r8, r8)
 8000c00:	46bd      	mov	sp, r7
 8000c02:	b009      	add	sp, #36	@ 0x24
 8000c04:	bd90      	pop	{r4, r7, pc}
 8000c06:	46c0      	nop			@ (mov r8, r8)
 8000c08:	40004400 	.word	0x40004400
 8000c0c:	40021000 	.word	0x40021000

08000c10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c14:	46c0      	nop			@ (mov r8, r8)
 8000c16:	e7fd      	b.n	8000c14 <NMI_Handler+0x4>

08000c18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c1c:	46c0      	nop			@ (mov r8, r8)
 8000c1e:	e7fd      	b.n	8000c1c <HardFault_Handler+0x4>

08000c20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c24:	46c0      	nop			@ (mov r8, r8)
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c2e:	46c0      	nop			@ (mov r8, r8)
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c38:	f000 f8c4 	bl	8000dc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c3c:	46c0      	nop			@ (mov r8, r8)
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
	...

08000c44 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000c48:	4b03      	ldr	r3, [pc, #12]	@ (8000c58 <RTC_IRQHandler+0x14>)
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	f001 fe7e 	bl	800294c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8000c50:	46c0      	nop			@ (mov r8, r8)
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	46c0      	nop			@ (mov r8, r8)
 8000c58:	20000028 	.word	0x20000028

08000c5c <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000c60:	2001      	movs	r0, #1
 8000c62:	f000 fbe7 	bl	8001434 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PB1_RESERVED_Pin);
 8000c66:	2002      	movs	r0, #2
 8000c68:	f000 fbe4 	bl	8001434 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000c6c:	46c0      	nop			@ (mov r8, r8)
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PB4_RESERVED_Pin);
 8000c76:	2010      	movs	r0, #16
 8000c78:	f000 fbdc 	bl	8001434 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PC13_RESERVED_Pin);
 8000c7c:	2380      	movs	r3, #128	@ 0x80
 8000c7e:	019b      	lsls	r3, r3, #6
 8000c80:	0018      	movs	r0, r3
 8000c82:	f000 fbd7 	bl	8001434 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000c86:	46c0      	nop			@ (mov r8, r8)
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c90:	4b03      	ldr	r3, [pc, #12]	@ (8000ca0 <TIM2_IRQHandler+0x14>)
 8000c92:	0018      	movs	r0, r3
 8000c94:	f002 f844 	bl	8002d20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c98:	46c0      	nop			@ (mov r8, r8)
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	46c0      	nop			@ (mov r8, r8)
 8000ca0:	200000a4 	.word	0x200000a4

08000ca4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ca8:	4b03      	ldr	r3, [pc, #12]	@ (8000cb8 <USART2_IRQHandler+0x14>)
 8000caa:	0018      	movs	r0, r3
 8000cac:	f002 fbb0 	bl	8003410 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000cb0:	46c0      	nop			@ (mov r8, r8)
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	46c0      	nop			@ (mov r8, r8)
 8000cb8:	200000e4 	.word	0x200000e4

08000cbc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cc0:	46c0      	nop			@ (mov r8, r8)
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
	...

08000cc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000cc8:	480d      	ldr	r0, [pc, #52]	@ (8000d00 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000cca:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ccc:	f7ff fff6 	bl	8000cbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cd0:	480c      	ldr	r0, [pc, #48]	@ (8000d04 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cd2:	490d      	ldr	r1, [pc, #52]	@ (8000d08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cd4:	4a0d      	ldr	r2, [pc, #52]	@ (8000d0c <LoopForever+0xe>)
  movs r3, #0
 8000cd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd8:	e002      	b.n	8000ce0 <LoopCopyDataInit>

08000cda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cde:	3304      	adds	r3, #4

08000ce0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ce0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ce2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce4:	d3f9      	bcc.n	8000cda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ce6:	4a0a      	ldr	r2, [pc, #40]	@ (8000d10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ce8:	4c0a      	ldr	r4, [pc, #40]	@ (8000d14 <LoopForever+0x16>)
  movs r3, #0
 8000cea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cec:	e001      	b.n	8000cf2 <LoopFillZerobss>

08000cee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf0:	3204      	adds	r2, #4

08000cf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf4:	d3fb      	bcc.n	8000cee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cf6:	f003 fbc3 	bl	8004480 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cfa:	f7ff fba7 	bl	800044c <main>

08000cfe <LoopForever>:

LoopForever:
    b LoopForever
 8000cfe:	e7fe      	b.n	8000cfe <LoopForever>
   ldr   r0, =_estack
 8000d00:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000d04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d08:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d0c:	0800455c 	.word	0x0800455c
  ldr r2, =_sbss
 8000d10:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d14:	20000170 	.word	0x20000170

08000d18 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d18:	e7fe      	b.n	8000d18 <ADC1_COMP_IRQHandler>
	...

08000d1c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d22:	1dfb      	adds	r3, r7, #7
 8000d24:	2200      	movs	r2, #0
 8000d26:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000d28:	4b0b      	ldr	r3, [pc, #44]	@ (8000d58 <HAL_Init+0x3c>)
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d58 <HAL_Init+0x3c>)
 8000d2e:	2140      	movs	r1, #64	@ 0x40
 8000d30:	430a      	orrs	r2, r1
 8000d32:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d34:	2000      	movs	r0, #0
 8000d36:	f000 f811 	bl	8000d5c <HAL_InitTick>
 8000d3a:	1e03      	subs	r3, r0, #0
 8000d3c:	d003      	beq.n	8000d46 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000d3e:	1dfb      	adds	r3, r7, #7
 8000d40:	2201      	movs	r2, #1
 8000d42:	701a      	strb	r2, [r3, #0]
 8000d44:	e001      	b.n	8000d4a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d46:	f7ff fe5f 	bl	8000a08 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d4a:	1dfb      	adds	r3, r7, #7
 8000d4c:	781b      	ldrb	r3, [r3, #0]
}
 8000d4e:	0018      	movs	r0, r3
 8000d50:	46bd      	mov	sp, r7
 8000d52:	b002      	add	sp, #8
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	46c0      	nop			@ (mov r8, r8)
 8000d58:	40022000 	.word	0x40022000

08000d5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d5c:	b590      	push	{r4, r7, lr}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d64:	4b14      	ldr	r3, [pc, #80]	@ (8000db8 <HAL_InitTick+0x5c>)
 8000d66:	681c      	ldr	r4, [r3, #0]
 8000d68:	4b14      	ldr	r3, [pc, #80]	@ (8000dbc <HAL_InitTick+0x60>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	0019      	movs	r1, r3
 8000d6e:	23fa      	movs	r3, #250	@ 0xfa
 8000d70:	0098      	lsls	r0, r3, #2
 8000d72:	f7ff f9c9 	bl	8000108 <__udivsi3>
 8000d76:	0003      	movs	r3, r0
 8000d78:	0019      	movs	r1, r3
 8000d7a:	0020      	movs	r0, r4
 8000d7c:	f7ff f9c4 	bl	8000108 <__udivsi3>
 8000d80:	0003      	movs	r3, r0
 8000d82:	0018      	movs	r0, r3
 8000d84:	f000 f90b 	bl	8000f9e <HAL_SYSTICK_Config>
 8000d88:	1e03      	subs	r3, r0, #0
 8000d8a:	d001      	beq.n	8000d90 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	e00f      	b.n	8000db0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2b03      	cmp	r3, #3
 8000d94:	d80b      	bhi.n	8000dae <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d96:	6879      	ldr	r1, [r7, #4]
 8000d98:	2301      	movs	r3, #1
 8000d9a:	425b      	negs	r3, r3
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	0018      	movs	r0, r3
 8000da0:	f000 f8d8 	bl	8000f54 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000da4:	4b06      	ldr	r3, [pc, #24]	@ (8000dc0 <HAL_InitTick+0x64>)
 8000da6:	687a      	ldr	r2, [r7, #4]
 8000da8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000daa:	2300      	movs	r3, #0
 8000dac:	e000      	b.n	8000db0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
}
 8000db0:	0018      	movs	r0, r3
 8000db2:	46bd      	mov	sp, r7
 8000db4:	b003      	add	sp, #12
 8000db6:	bd90      	pop	{r4, r7, pc}
 8000db8:	20000000 	.word	0x20000000
 8000dbc:	20000008 	.word	0x20000008
 8000dc0:	20000004 	.word	0x20000004

08000dc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dc8:	4b05      	ldr	r3, [pc, #20]	@ (8000de0 <HAL_IncTick+0x1c>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	001a      	movs	r2, r3
 8000dce:	4b05      	ldr	r3, [pc, #20]	@ (8000de4 <HAL_IncTick+0x20>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	18d2      	adds	r2, r2, r3
 8000dd4:	4b03      	ldr	r3, [pc, #12]	@ (8000de4 <HAL_IncTick+0x20>)
 8000dd6:	601a      	str	r2, [r3, #0]
}
 8000dd8:	46c0      	nop			@ (mov r8, r8)
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	46c0      	nop			@ (mov r8, r8)
 8000de0:	20000008 	.word	0x20000008
 8000de4:	2000016c 	.word	0x2000016c

08000de8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  return uwTick;
 8000dec:	4b02      	ldr	r3, [pc, #8]	@ (8000df8 <HAL_GetTick+0x10>)
 8000dee:	681b      	ldr	r3, [r3, #0]
}
 8000df0:	0018      	movs	r0, r3
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	46c0      	nop			@ (mov r8, r8)
 8000df8:	2000016c 	.word	0x2000016c

08000dfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	0002      	movs	r2, r0
 8000e04:	1dfb      	adds	r3, r7, #7
 8000e06:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e08:	1dfb      	adds	r3, r7, #7
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e0e:	d809      	bhi.n	8000e24 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e10:	1dfb      	adds	r3, r7, #7
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	001a      	movs	r2, r3
 8000e16:	231f      	movs	r3, #31
 8000e18:	401a      	ands	r2, r3
 8000e1a:	4b04      	ldr	r3, [pc, #16]	@ (8000e2c <__NVIC_EnableIRQ+0x30>)
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	4091      	lsls	r1, r2
 8000e20:	000a      	movs	r2, r1
 8000e22:	601a      	str	r2, [r3, #0]
  }
}
 8000e24:	46c0      	nop			@ (mov r8, r8)
 8000e26:	46bd      	mov	sp, r7
 8000e28:	b002      	add	sp, #8
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	e000e100 	.word	0xe000e100

08000e30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e30:	b590      	push	{r4, r7, lr}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	0002      	movs	r2, r0
 8000e38:	6039      	str	r1, [r7, #0]
 8000e3a:	1dfb      	adds	r3, r7, #7
 8000e3c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e3e:	1dfb      	adds	r3, r7, #7
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e44:	d828      	bhi.n	8000e98 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e46:	4a2f      	ldr	r2, [pc, #188]	@ (8000f04 <__NVIC_SetPriority+0xd4>)
 8000e48:	1dfb      	adds	r3, r7, #7
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	b25b      	sxtb	r3, r3
 8000e4e:	089b      	lsrs	r3, r3, #2
 8000e50:	33c0      	adds	r3, #192	@ 0xc0
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	589b      	ldr	r3, [r3, r2]
 8000e56:	1dfa      	adds	r2, r7, #7
 8000e58:	7812      	ldrb	r2, [r2, #0]
 8000e5a:	0011      	movs	r1, r2
 8000e5c:	2203      	movs	r2, #3
 8000e5e:	400a      	ands	r2, r1
 8000e60:	00d2      	lsls	r2, r2, #3
 8000e62:	21ff      	movs	r1, #255	@ 0xff
 8000e64:	4091      	lsls	r1, r2
 8000e66:	000a      	movs	r2, r1
 8000e68:	43d2      	mvns	r2, r2
 8000e6a:	401a      	ands	r2, r3
 8000e6c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	019b      	lsls	r3, r3, #6
 8000e72:	22ff      	movs	r2, #255	@ 0xff
 8000e74:	401a      	ands	r2, r3
 8000e76:	1dfb      	adds	r3, r7, #7
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	0018      	movs	r0, r3
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	4003      	ands	r3, r0
 8000e80:	00db      	lsls	r3, r3, #3
 8000e82:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e84:	481f      	ldr	r0, [pc, #124]	@ (8000f04 <__NVIC_SetPriority+0xd4>)
 8000e86:	1dfb      	adds	r3, r7, #7
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	b25b      	sxtb	r3, r3
 8000e8c:	089b      	lsrs	r3, r3, #2
 8000e8e:	430a      	orrs	r2, r1
 8000e90:	33c0      	adds	r3, #192	@ 0xc0
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e96:	e031      	b.n	8000efc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e98:	4a1b      	ldr	r2, [pc, #108]	@ (8000f08 <__NVIC_SetPriority+0xd8>)
 8000e9a:	1dfb      	adds	r3, r7, #7
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	0019      	movs	r1, r3
 8000ea0:	230f      	movs	r3, #15
 8000ea2:	400b      	ands	r3, r1
 8000ea4:	3b08      	subs	r3, #8
 8000ea6:	089b      	lsrs	r3, r3, #2
 8000ea8:	3306      	adds	r3, #6
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	18d3      	adds	r3, r2, r3
 8000eae:	3304      	adds	r3, #4
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	1dfa      	adds	r2, r7, #7
 8000eb4:	7812      	ldrb	r2, [r2, #0]
 8000eb6:	0011      	movs	r1, r2
 8000eb8:	2203      	movs	r2, #3
 8000eba:	400a      	ands	r2, r1
 8000ebc:	00d2      	lsls	r2, r2, #3
 8000ebe:	21ff      	movs	r1, #255	@ 0xff
 8000ec0:	4091      	lsls	r1, r2
 8000ec2:	000a      	movs	r2, r1
 8000ec4:	43d2      	mvns	r2, r2
 8000ec6:	401a      	ands	r2, r3
 8000ec8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	019b      	lsls	r3, r3, #6
 8000ece:	22ff      	movs	r2, #255	@ 0xff
 8000ed0:	401a      	ands	r2, r3
 8000ed2:	1dfb      	adds	r3, r7, #7
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	0018      	movs	r0, r3
 8000ed8:	2303      	movs	r3, #3
 8000eda:	4003      	ands	r3, r0
 8000edc:	00db      	lsls	r3, r3, #3
 8000ede:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ee0:	4809      	ldr	r0, [pc, #36]	@ (8000f08 <__NVIC_SetPriority+0xd8>)
 8000ee2:	1dfb      	adds	r3, r7, #7
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	001c      	movs	r4, r3
 8000ee8:	230f      	movs	r3, #15
 8000eea:	4023      	ands	r3, r4
 8000eec:	3b08      	subs	r3, #8
 8000eee:	089b      	lsrs	r3, r3, #2
 8000ef0:	430a      	orrs	r2, r1
 8000ef2:	3306      	adds	r3, #6
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	18c3      	adds	r3, r0, r3
 8000ef8:	3304      	adds	r3, #4
 8000efa:	601a      	str	r2, [r3, #0]
}
 8000efc:	46c0      	nop			@ (mov r8, r8)
 8000efe:	46bd      	mov	sp, r7
 8000f00:	b003      	add	sp, #12
 8000f02:	bd90      	pop	{r4, r7, pc}
 8000f04:	e000e100 	.word	0xe000e100
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	1e5a      	subs	r2, r3, #1
 8000f18:	2380      	movs	r3, #128	@ 0x80
 8000f1a:	045b      	lsls	r3, r3, #17
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d301      	bcc.n	8000f24 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f20:	2301      	movs	r3, #1
 8000f22:	e010      	b.n	8000f46 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f24:	4b0a      	ldr	r3, [pc, #40]	@ (8000f50 <SysTick_Config+0x44>)
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	3a01      	subs	r2, #1
 8000f2a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	425b      	negs	r3, r3
 8000f30:	2103      	movs	r1, #3
 8000f32:	0018      	movs	r0, r3
 8000f34:	f7ff ff7c 	bl	8000e30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f38:	4b05      	ldr	r3, [pc, #20]	@ (8000f50 <SysTick_Config+0x44>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f3e:	4b04      	ldr	r3, [pc, #16]	@ (8000f50 <SysTick_Config+0x44>)
 8000f40:	2207      	movs	r2, #7
 8000f42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f44:	2300      	movs	r3, #0
}
 8000f46:	0018      	movs	r0, r3
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	b002      	add	sp, #8
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	46c0      	nop			@ (mov r8, r8)
 8000f50:	e000e010 	.word	0xe000e010

08000f54 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60b9      	str	r1, [r7, #8]
 8000f5c:	607a      	str	r2, [r7, #4]
 8000f5e:	210f      	movs	r1, #15
 8000f60:	187b      	adds	r3, r7, r1
 8000f62:	1c02      	adds	r2, r0, #0
 8000f64:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000f66:	68ba      	ldr	r2, [r7, #8]
 8000f68:	187b      	adds	r3, r7, r1
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	b25b      	sxtb	r3, r3
 8000f6e:	0011      	movs	r1, r2
 8000f70:	0018      	movs	r0, r3
 8000f72:	f7ff ff5d 	bl	8000e30 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8000f76:	46c0      	nop			@ (mov r8, r8)
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	b004      	add	sp, #16
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b082      	sub	sp, #8
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	0002      	movs	r2, r0
 8000f86:	1dfb      	adds	r3, r7, #7
 8000f88:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f8a:	1dfb      	adds	r3, r7, #7
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	b25b      	sxtb	r3, r3
 8000f90:	0018      	movs	r0, r3
 8000f92:	f7ff ff33 	bl	8000dfc <__NVIC_EnableIRQ>
}
 8000f96:	46c0      	nop			@ (mov r8, r8)
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	b002      	add	sp, #8
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b082      	sub	sp, #8
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	0018      	movs	r0, r3
 8000faa:	f7ff ffaf 	bl	8000f0c <SysTick_Config>
 8000fae:	0003      	movs	r3, r0
}
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	b002      	add	sp, #8
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fc0:	230f      	movs	r3, #15
 8000fc2:	18fb      	adds	r3, r7, r3
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2225      	movs	r2, #37	@ 0x25
 8000fcc:	5c9b      	ldrb	r3, [r3, r2]
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	d008      	beq.n	8000fe6 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2204      	movs	r2, #4
 8000fd8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2224      	movs	r2, #36	@ 0x24
 8000fde:	2100      	movs	r1, #0
 8000fe0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e024      	b.n	8001030 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	210e      	movs	r1, #14
 8000ff2:	438a      	bics	r2, r1
 8000ff4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2101      	movs	r1, #1
 8001002:	438a      	bics	r2, r1
 8001004:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800100a:	221c      	movs	r2, #28
 800100c:	401a      	ands	r2, r3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001012:	2101      	movs	r1, #1
 8001014:	4091      	lsls	r1, r2
 8001016:	000a      	movs	r2, r1
 8001018:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2225      	movs	r2, #37	@ 0x25
 800101e:	2101      	movs	r1, #1
 8001020:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2224      	movs	r2, #36	@ 0x24
 8001026:	2100      	movs	r1, #0
 8001028:	5499      	strb	r1, [r3, r2]

    return status;
 800102a:	230f      	movs	r3, #15
 800102c:	18fb      	adds	r3, r7, r3
 800102e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8001030:	0018      	movs	r0, r3
 8001032:	46bd      	mov	sp, r7
 8001034:	b004      	add	sp, #16
 8001036:	bd80      	pop	{r7, pc}

08001038 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001040:	210f      	movs	r1, #15
 8001042:	187b      	adds	r3, r7, r1
 8001044:	2200      	movs	r2, #0
 8001046:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2225      	movs	r2, #37	@ 0x25
 800104c:	5c9b      	ldrb	r3, [r3, r2]
 800104e:	b2db      	uxtb	r3, r3
 8001050:	2b02      	cmp	r3, #2
 8001052:	d006      	beq.n	8001062 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2204      	movs	r2, #4
 8001058:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800105a:	187b      	adds	r3, r7, r1
 800105c:	2201      	movs	r2, #1
 800105e:	701a      	strb	r2, [r3, #0]
 8001060:	e02a      	b.n	80010b8 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	210e      	movs	r1, #14
 800106e:	438a      	bics	r2, r1
 8001070:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2101      	movs	r1, #1
 800107e:	438a      	bics	r2, r1
 8001080:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001086:	221c      	movs	r2, #28
 8001088:	401a      	ands	r2, r3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800108e:	2101      	movs	r1, #1
 8001090:	4091      	lsls	r1, r2
 8001092:	000a      	movs	r2, r1
 8001094:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2225      	movs	r2, #37	@ 0x25
 800109a:	2101      	movs	r1, #1
 800109c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2224      	movs	r2, #36	@ 0x24
 80010a2:	2100      	movs	r1, #0
 80010a4:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d004      	beq.n	80010b8 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010b2:	687a      	ldr	r2, [r7, #4]
 80010b4:	0010      	movs	r0, r2
 80010b6:	4798      	blx	r3
    }
  }
  return status;
 80010b8:	230f      	movs	r3, #15
 80010ba:	18fb      	adds	r3, r7, r3
 80010bc:	781b      	ldrb	r3, [r3, #0]
}
 80010be:	0018      	movs	r0, r3
 80010c0:	46bd      	mov	sp, r7
 80010c2:	b004      	add	sp, #16
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80010d2:	2300      	movs	r3, #0
 80010d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80010da:	2300      	movs	r3, #0
 80010dc:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80010de:	e155      	b.n	800138c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2101      	movs	r1, #1
 80010e6:	697a      	ldr	r2, [r7, #20]
 80010e8:	4091      	lsls	r1, r2
 80010ea:	000a      	movs	r2, r1
 80010ec:	4013      	ands	r3, r2
 80010ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d100      	bne.n	80010f8 <HAL_GPIO_Init+0x30>
 80010f6:	e146      	b.n	8001386 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	2203      	movs	r2, #3
 80010fe:	4013      	ands	r3, r2
 8001100:	2b01      	cmp	r3, #1
 8001102:	d005      	beq.n	8001110 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	2203      	movs	r2, #3
 800110a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800110c:	2b02      	cmp	r3, #2
 800110e:	d130      	bne.n	8001172 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	2203      	movs	r2, #3
 800111c:	409a      	lsls	r2, r3
 800111e:	0013      	movs	r3, r2
 8001120:	43da      	mvns	r2, r3
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	4013      	ands	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	68da      	ldr	r2, [r3, #12]
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	409a      	lsls	r2, r3
 8001132:	0013      	movs	r3, r2
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	4313      	orrs	r3, r2
 8001138:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001146:	2201      	movs	r2, #1
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	409a      	lsls	r2, r3
 800114c:	0013      	movs	r3, r2
 800114e:	43da      	mvns	r2, r3
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	4013      	ands	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	091b      	lsrs	r3, r3, #4
 800115c:	2201      	movs	r2, #1
 800115e:	401a      	ands	r2, r3
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	409a      	lsls	r2, r3
 8001164:	0013      	movs	r3, r2
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	4313      	orrs	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	2203      	movs	r2, #3
 8001178:	4013      	ands	r3, r2
 800117a:	2b03      	cmp	r3, #3
 800117c:	d017      	beq.n	80011ae <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	68db      	ldr	r3, [r3, #12]
 8001182:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	2203      	movs	r2, #3
 800118a:	409a      	lsls	r2, r3
 800118c:	0013      	movs	r3, r2
 800118e:	43da      	mvns	r2, r3
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	4013      	ands	r3, r2
 8001194:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	689a      	ldr	r2, [r3, #8]
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	409a      	lsls	r2, r3
 80011a0:	0013      	movs	r3, r2
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	2203      	movs	r2, #3
 80011b4:	4013      	ands	r3, r2
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d123      	bne.n	8001202 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	08da      	lsrs	r2, r3, #3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	3208      	adds	r2, #8
 80011c2:	0092      	lsls	r2, r2, #2
 80011c4:	58d3      	ldr	r3, [r2, r3]
 80011c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	2207      	movs	r2, #7
 80011cc:	4013      	ands	r3, r2
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	220f      	movs	r2, #15
 80011d2:	409a      	lsls	r2, r3
 80011d4:	0013      	movs	r3, r2
 80011d6:	43da      	mvns	r2, r3
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	4013      	ands	r3, r2
 80011dc:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	691a      	ldr	r2, [r3, #16]
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	2107      	movs	r1, #7
 80011e6:	400b      	ands	r3, r1
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	409a      	lsls	r2, r3
 80011ec:	0013      	movs	r3, r2
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	08da      	lsrs	r2, r3, #3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3208      	adds	r2, #8
 80011fc:	0092      	lsls	r2, r2, #2
 80011fe:	6939      	ldr	r1, [r7, #16]
 8001200:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	2203      	movs	r2, #3
 800120e:	409a      	lsls	r2, r3
 8001210:	0013      	movs	r3, r2
 8001212:	43da      	mvns	r2, r3
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	4013      	ands	r3, r2
 8001218:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	2203      	movs	r2, #3
 8001220:	401a      	ands	r2, r3
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	409a      	lsls	r2, r3
 8001228:	0013      	movs	r3, r2
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	4313      	orrs	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685a      	ldr	r2, [r3, #4]
 800123a:	23c0      	movs	r3, #192	@ 0xc0
 800123c:	029b      	lsls	r3, r3, #10
 800123e:	4013      	ands	r3, r2
 8001240:	d100      	bne.n	8001244 <HAL_GPIO_Init+0x17c>
 8001242:	e0a0      	b.n	8001386 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001244:	4b57      	ldr	r3, [pc, #348]	@ (80013a4 <HAL_GPIO_Init+0x2dc>)
 8001246:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001248:	4b56      	ldr	r3, [pc, #344]	@ (80013a4 <HAL_GPIO_Init+0x2dc>)
 800124a:	2101      	movs	r1, #1
 800124c:	430a      	orrs	r2, r1
 800124e:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001250:	4a55      	ldr	r2, [pc, #340]	@ (80013a8 <HAL_GPIO_Init+0x2e0>)
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	089b      	lsrs	r3, r3, #2
 8001256:	3302      	adds	r3, #2
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	589b      	ldr	r3, [r3, r2]
 800125c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	2203      	movs	r2, #3
 8001262:	4013      	ands	r3, r2
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	220f      	movs	r2, #15
 8001268:	409a      	lsls	r2, r3
 800126a:	0013      	movs	r3, r2
 800126c:	43da      	mvns	r2, r3
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	4013      	ands	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	23a0      	movs	r3, #160	@ 0xa0
 8001278:	05db      	lsls	r3, r3, #23
 800127a:	429a      	cmp	r2, r3
 800127c:	d01f      	beq.n	80012be <HAL_GPIO_Init+0x1f6>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a4a      	ldr	r2, [pc, #296]	@ (80013ac <HAL_GPIO_Init+0x2e4>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d019      	beq.n	80012ba <HAL_GPIO_Init+0x1f2>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a49      	ldr	r2, [pc, #292]	@ (80013b0 <HAL_GPIO_Init+0x2e8>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d013      	beq.n	80012b6 <HAL_GPIO_Init+0x1ee>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a48      	ldr	r2, [pc, #288]	@ (80013b4 <HAL_GPIO_Init+0x2ec>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d00d      	beq.n	80012b2 <HAL_GPIO_Init+0x1ea>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a47      	ldr	r2, [pc, #284]	@ (80013b8 <HAL_GPIO_Init+0x2f0>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d007      	beq.n	80012ae <HAL_GPIO_Init+0x1e6>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a46      	ldr	r2, [pc, #280]	@ (80013bc <HAL_GPIO_Init+0x2f4>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d101      	bne.n	80012aa <HAL_GPIO_Init+0x1e2>
 80012a6:	2305      	movs	r3, #5
 80012a8:	e00a      	b.n	80012c0 <HAL_GPIO_Init+0x1f8>
 80012aa:	2306      	movs	r3, #6
 80012ac:	e008      	b.n	80012c0 <HAL_GPIO_Init+0x1f8>
 80012ae:	2304      	movs	r3, #4
 80012b0:	e006      	b.n	80012c0 <HAL_GPIO_Init+0x1f8>
 80012b2:	2303      	movs	r3, #3
 80012b4:	e004      	b.n	80012c0 <HAL_GPIO_Init+0x1f8>
 80012b6:	2302      	movs	r3, #2
 80012b8:	e002      	b.n	80012c0 <HAL_GPIO_Init+0x1f8>
 80012ba:	2301      	movs	r3, #1
 80012bc:	e000      	b.n	80012c0 <HAL_GPIO_Init+0x1f8>
 80012be:	2300      	movs	r3, #0
 80012c0:	697a      	ldr	r2, [r7, #20]
 80012c2:	2103      	movs	r1, #3
 80012c4:	400a      	ands	r2, r1
 80012c6:	0092      	lsls	r2, r2, #2
 80012c8:	4093      	lsls	r3, r2
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012d0:	4935      	ldr	r1, [pc, #212]	@ (80013a8 <HAL_GPIO_Init+0x2e0>)
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	089b      	lsrs	r3, r3, #2
 80012d6:	3302      	adds	r3, #2
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012de:	4b38      	ldr	r3, [pc, #224]	@ (80013c0 <HAL_GPIO_Init+0x2f8>)
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	43da      	mvns	r2, r3
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	4013      	ands	r3, r2
 80012ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685a      	ldr	r2, [r3, #4]
 80012f2:	2380      	movs	r3, #128	@ 0x80
 80012f4:	035b      	lsls	r3, r3, #13
 80012f6:	4013      	ands	r3, r2
 80012f8:	d003      	beq.n	8001302 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	4313      	orrs	r3, r2
 8001300:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001302:	4b2f      	ldr	r3, [pc, #188]	@ (80013c0 <HAL_GPIO_Init+0x2f8>)
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001308:	4b2d      	ldr	r3, [pc, #180]	@ (80013c0 <HAL_GPIO_Init+0x2f8>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	43da      	mvns	r2, r3
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	4013      	ands	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685a      	ldr	r2, [r3, #4]
 800131c:	2380      	movs	r3, #128	@ 0x80
 800131e:	039b      	lsls	r3, r3, #14
 8001320:	4013      	ands	r3, r2
 8001322:	d003      	beq.n	800132c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	4313      	orrs	r3, r2
 800132a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800132c:	4b24      	ldr	r3, [pc, #144]	@ (80013c0 <HAL_GPIO_Init+0x2f8>)
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001332:	4b23      	ldr	r3, [pc, #140]	@ (80013c0 <HAL_GPIO_Init+0x2f8>)
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	43da      	mvns	r2, r3
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	4013      	ands	r3, r2
 8001340:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685a      	ldr	r2, [r3, #4]
 8001346:	2380      	movs	r3, #128	@ 0x80
 8001348:	029b      	lsls	r3, r3, #10
 800134a:	4013      	ands	r3, r2
 800134c:	d003      	beq.n	8001356 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	4313      	orrs	r3, r2
 8001354:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001356:	4b1a      	ldr	r3, [pc, #104]	@ (80013c0 <HAL_GPIO_Init+0x2f8>)
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800135c:	4b18      	ldr	r3, [pc, #96]	@ (80013c0 <HAL_GPIO_Init+0x2f8>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	43da      	mvns	r2, r3
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	4013      	ands	r3, r2
 800136a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685a      	ldr	r2, [r3, #4]
 8001370:	2380      	movs	r3, #128	@ 0x80
 8001372:	025b      	lsls	r3, r3, #9
 8001374:	4013      	ands	r3, r2
 8001376:	d003      	beq.n	8001380 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001378:	693a      	ldr	r2, [r7, #16]
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	4313      	orrs	r3, r2
 800137e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001380:	4b0f      	ldr	r3, [pc, #60]	@ (80013c0 <HAL_GPIO_Init+0x2f8>)
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	3301      	adds	r3, #1
 800138a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	40da      	lsrs	r2, r3
 8001394:	1e13      	subs	r3, r2, #0
 8001396:	d000      	beq.n	800139a <HAL_GPIO_Init+0x2d2>
 8001398:	e6a2      	b.n	80010e0 <HAL_GPIO_Init+0x18>
  }
}
 800139a:	46c0      	nop			@ (mov r8, r8)
 800139c:	46c0      	nop			@ (mov r8, r8)
 800139e:	46bd      	mov	sp, r7
 80013a0:	b006      	add	sp, #24
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40021000 	.word	0x40021000
 80013a8:	40010000 	.word	0x40010000
 80013ac:	50000400 	.word	0x50000400
 80013b0:	50000800 	.word	0x50000800
 80013b4:	50000c00 	.word	0x50000c00
 80013b8:	50001000 	.word	0x50001000
 80013bc:	50001c00 	.word	0x50001c00
 80013c0:	40010400 	.word	0x40010400

080013c4 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	0008      	movs	r0, r1
 80013ce:	0011      	movs	r1, r2
 80013d0:	1cbb      	adds	r3, r7, #2
 80013d2:	1c02      	adds	r2, r0, #0
 80013d4:	801a      	strh	r2, [r3, #0]
 80013d6:	1c7b      	adds	r3, r7, #1
 80013d8:	1c0a      	adds	r2, r1, #0
 80013da:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013dc:	1c7b      	adds	r3, r7, #1
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d004      	beq.n	80013ee <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013e4:	1cbb      	adds	r3, r7, #2
 80013e6:	881a      	ldrh	r2, [r3, #0]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80013ec:	e003      	b.n	80013f6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80013ee:	1cbb      	adds	r3, r7, #2
 80013f0:	881a      	ldrh	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80013f6:	46c0      	nop			@ (mov r8, r8)
 80013f8:	46bd      	mov	sp, r7
 80013fa:	b002      	add	sp, #8
 80013fc:	bd80      	pop	{r7, pc}

080013fe <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b084      	sub	sp, #16
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
 8001406:	000a      	movs	r2, r1
 8001408:	1cbb      	adds	r3, r7, #2
 800140a:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	695b      	ldr	r3, [r3, #20]
 8001410:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001412:	1cbb      	adds	r3, r7, #2
 8001414:	881b      	ldrh	r3, [r3, #0]
 8001416:	68fa      	ldr	r2, [r7, #12]
 8001418:	4013      	ands	r3, r2
 800141a:	041a      	lsls	r2, r3, #16
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	43db      	mvns	r3, r3
 8001420:	1cb9      	adds	r1, r7, #2
 8001422:	8809      	ldrh	r1, [r1, #0]
 8001424:	400b      	ands	r3, r1
 8001426:	431a      	orrs	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	619a      	str	r2, [r3, #24]
}
 800142c:	46c0      	nop			@ (mov r8, r8)
 800142e:	46bd      	mov	sp, r7
 8001430:	b004      	add	sp, #16
 8001432:	bd80      	pop	{r7, pc}

08001434 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	0002      	movs	r2, r0
 800143c:	1dbb      	adds	r3, r7, #6
 800143e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001440:	4b09      	ldr	r3, [pc, #36]	@ (8001468 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001442:	695b      	ldr	r3, [r3, #20]
 8001444:	1dba      	adds	r2, r7, #6
 8001446:	8812      	ldrh	r2, [r2, #0]
 8001448:	4013      	ands	r3, r2
 800144a:	d008      	beq.n	800145e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800144c:	4b06      	ldr	r3, [pc, #24]	@ (8001468 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800144e:	1dba      	adds	r2, r7, #6
 8001450:	8812      	ldrh	r2, [r2, #0]
 8001452:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001454:	1dbb      	adds	r3, r7, #6
 8001456:	881b      	ldrh	r3, [r3, #0]
 8001458:	0018      	movs	r0, r3
 800145a:	f7ff f809 	bl	8000470 <HAL_GPIO_EXTI_Callback>
  }
}
 800145e:	46c0      	nop			@ (mov r8, r8)
 8001460:	46bd      	mov	sp, r7
 8001462:	b002      	add	sp, #8
 8001464:	bd80      	pop	{r7, pc}
 8001466:	46c0      	nop			@ (mov r8, r8)
 8001468:	40010400 	.word	0x40010400

0800146c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800146c:	b5b0      	push	{r4, r5, r7, lr}
 800146e:	b08a      	sub	sp, #40	@ 0x28
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d102      	bne.n	8001480 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	f000 fbbf 	bl	8001bfe <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001480:	4bc9      	ldr	r3, [pc, #804]	@ (80017a8 <HAL_RCC_OscConfig+0x33c>)
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	220c      	movs	r2, #12
 8001486:	4013      	ands	r3, r2
 8001488:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800148a:	4bc7      	ldr	r3, [pc, #796]	@ (80017a8 <HAL_RCC_OscConfig+0x33c>)
 800148c:	68da      	ldr	r2, [r3, #12]
 800148e:	2380      	movs	r3, #128	@ 0x80
 8001490:	025b      	lsls	r3, r3, #9
 8001492:	4013      	ands	r3, r2
 8001494:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2201      	movs	r2, #1
 800149c:	4013      	ands	r3, r2
 800149e:	d100      	bne.n	80014a2 <HAL_RCC_OscConfig+0x36>
 80014a0:	e07e      	b.n	80015a0 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	2b08      	cmp	r3, #8
 80014a6:	d007      	beq.n	80014b8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	2b0c      	cmp	r3, #12
 80014ac:	d112      	bne.n	80014d4 <HAL_RCC_OscConfig+0x68>
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	2380      	movs	r3, #128	@ 0x80
 80014b2:	025b      	lsls	r3, r3, #9
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d10d      	bne.n	80014d4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b8:	4bbb      	ldr	r3, [pc, #748]	@ (80017a8 <HAL_RCC_OscConfig+0x33c>)
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	2380      	movs	r3, #128	@ 0x80
 80014be:	029b      	lsls	r3, r3, #10
 80014c0:	4013      	ands	r3, r2
 80014c2:	d100      	bne.n	80014c6 <HAL_RCC_OscConfig+0x5a>
 80014c4:	e06b      	b.n	800159e <HAL_RCC_OscConfig+0x132>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d167      	bne.n	800159e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	f000 fb95 	bl	8001bfe <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685a      	ldr	r2, [r3, #4]
 80014d8:	2380      	movs	r3, #128	@ 0x80
 80014da:	025b      	lsls	r3, r3, #9
 80014dc:	429a      	cmp	r2, r3
 80014de:	d107      	bne.n	80014f0 <HAL_RCC_OscConfig+0x84>
 80014e0:	4bb1      	ldr	r3, [pc, #708]	@ (80017a8 <HAL_RCC_OscConfig+0x33c>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	4bb0      	ldr	r3, [pc, #704]	@ (80017a8 <HAL_RCC_OscConfig+0x33c>)
 80014e6:	2180      	movs	r1, #128	@ 0x80
 80014e8:	0249      	lsls	r1, r1, #9
 80014ea:	430a      	orrs	r2, r1
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	e027      	b.n	8001540 <HAL_RCC_OscConfig+0xd4>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	685a      	ldr	r2, [r3, #4]
 80014f4:	23a0      	movs	r3, #160	@ 0xa0
 80014f6:	02db      	lsls	r3, r3, #11
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d10e      	bne.n	800151a <HAL_RCC_OscConfig+0xae>
 80014fc:	4baa      	ldr	r3, [pc, #680]	@ (80017a8 <HAL_RCC_OscConfig+0x33c>)
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	4ba9      	ldr	r3, [pc, #676]	@ (80017a8 <HAL_RCC_OscConfig+0x33c>)
 8001502:	2180      	movs	r1, #128	@ 0x80
 8001504:	02c9      	lsls	r1, r1, #11
 8001506:	430a      	orrs	r2, r1
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	4ba7      	ldr	r3, [pc, #668]	@ (80017a8 <HAL_RCC_OscConfig+0x33c>)
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	4ba6      	ldr	r3, [pc, #664]	@ (80017a8 <HAL_RCC_OscConfig+0x33c>)
 8001510:	2180      	movs	r1, #128	@ 0x80
 8001512:	0249      	lsls	r1, r1, #9
 8001514:	430a      	orrs	r2, r1
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	e012      	b.n	8001540 <HAL_RCC_OscConfig+0xd4>
 800151a:	4ba3      	ldr	r3, [pc, #652]	@ (80017a8 <HAL_RCC_OscConfig+0x33c>)
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	4ba2      	ldr	r3, [pc, #648]	@ (80017a8 <HAL_RCC_OscConfig+0x33c>)
 8001520:	49a2      	ldr	r1, [pc, #648]	@ (80017ac <HAL_RCC_OscConfig+0x340>)
 8001522:	400a      	ands	r2, r1
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	4ba0      	ldr	r3, [pc, #640]	@ (80017a8 <HAL_RCC_OscConfig+0x33c>)
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	2380      	movs	r3, #128	@ 0x80
 800152c:	025b      	lsls	r3, r3, #9
 800152e:	4013      	ands	r3, r2
 8001530:	60fb      	str	r3, [r7, #12]
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	4b9c      	ldr	r3, [pc, #624]	@ (80017a8 <HAL_RCC_OscConfig+0x33c>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	4b9b      	ldr	r3, [pc, #620]	@ (80017a8 <HAL_RCC_OscConfig+0x33c>)
 800153a:	499d      	ldr	r1, [pc, #628]	@ (80017b0 <HAL_RCC_OscConfig+0x344>)
 800153c:	400a      	ands	r2, r1
 800153e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d015      	beq.n	8001574 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001548:	f7ff fc4e 	bl	8000de8 <HAL_GetTick>
 800154c:	0003      	movs	r3, r0
 800154e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001550:	e009      	b.n	8001566 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001552:	f7ff fc49 	bl	8000de8 <HAL_GetTick>
 8001556:	0002      	movs	r2, r0
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	2b64      	cmp	r3, #100	@ 0x64
 800155e:	d902      	bls.n	8001566 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	f000 fb4c 	bl	8001bfe <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001566:	4b90      	ldr	r3, [pc, #576]	@ (80017a8 <HAL_RCC_OscConfig+0x33c>)
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	2380      	movs	r3, #128	@ 0x80
 800156c:	029b      	lsls	r3, r3, #10
 800156e:	4013      	ands	r3, r2
 8001570:	d0ef      	beq.n	8001552 <HAL_RCC_OscConfig+0xe6>
 8001572:	e015      	b.n	80015a0 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001574:	f7ff fc38 	bl	8000de8 <HAL_GetTick>
 8001578:	0003      	movs	r3, r0
 800157a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800157c:	e008      	b.n	8001590 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800157e:	f7ff fc33 	bl	8000de8 <HAL_GetTick>
 8001582:	0002      	movs	r2, r0
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	2b64      	cmp	r3, #100	@ 0x64
 800158a:	d901      	bls.n	8001590 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e336      	b.n	8001bfe <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001590:	4b85      	ldr	r3, [pc, #532]	@ (80017a8 <HAL_RCC_OscConfig+0x33c>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	2380      	movs	r3, #128	@ 0x80
 8001596:	029b      	lsls	r3, r3, #10
 8001598:	4013      	ands	r3, r2
 800159a:	d1f0      	bne.n	800157e <HAL_RCC_OscConfig+0x112>
 800159c:	e000      	b.n	80015a0 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800159e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2202      	movs	r2, #2
 80015a6:	4013      	ands	r3, r2
 80015a8:	d100      	bne.n	80015ac <HAL_RCC_OscConfig+0x140>
 80015aa:	e099      	b.n	80016e0 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80015b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b4:	2220      	movs	r2, #32
 80015b6:	4013      	ands	r3, r2
 80015b8:	d009      	beq.n	80015ce <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80015ba:	4b7b      	ldr	r3, [pc, #492]	@ (80017a8 <HAL_RCC_OscConfig+0x33c>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	4b7a      	ldr	r3, [pc, #488]	@ (80017a8 <HAL_RCC_OscConfig+0x33c>)
 80015c0:	2120      	movs	r1, #32
 80015c2:	430a      	orrs	r2, r1
 80015c4:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80015c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c8:	2220      	movs	r2, #32
 80015ca:	4393      	bics	r3, r2
 80015cc:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	2b04      	cmp	r3, #4
 80015d2:	d005      	beq.n	80015e0 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	2b0c      	cmp	r3, #12
 80015d8:	d13e      	bne.n	8001658 <HAL_RCC_OscConfig+0x1ec>
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d13b      	bne.n	8001658 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80015e0:	4b71      	ldr	r3, [pc, #452]	@ (80017a8 <HAL_RCC_OscConfig+0x33c>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2204      	movs	r2, #4
 80015e6:	4013      	ands	r3, r2
 80015e8:	d004      	beq.n	80015f4 <HAL_RCC_OscConfig+0x188>
 80015ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d101      	bne.n	80015f4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e304      	b.n	8001bfe <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f4:	4b6c      	ldr	r3, [pc, #432]	@ (80017a8 <HAL_RCC_OscConfig+0x33c>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	4a6e      	ldr	r2, [pc, #440]	@ (80017b4 <HAL_RCC_OscConfig+0x348>)
 80015fa:	4013      	ands	r3, r2
 80015fc:	0019      	movs	r1, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	691b      	ldr	r3, [r3, #16]
 8001602:	021a      	lsls	r2, r3, #8
 8001604:	4b68      	ldr	r3, [pc, #416]	@ (80017a8 <HAL_RCC_OscConfig+0x33c>)
 8001606:	430a      	orrs	r2, r1
 8001608:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800160a:	4b67      	ldr	r3, [pc, #412]	@ (80017a8 <HAL_RCC_OscConfig+0x33c>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2209      	movs	r2, #9
 8001610:	4393      	bics	r3, r2
 8001612:	0019      	movs	r1, r3
 8001614:	4b64      	ldr	r3, [pc, #400]	@ (80017a8 <HAL_RCC_OscConfig+0x33c>)
 8001616:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001618:	430a      	orrs	r2, r1
 800161a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800161c:	f000 fc42 	bl	8001ea4 <HAL_RCC_GetSysClockFreq>
 8001620:	0001      	movs	r1, r0
 8001622:	4b61      	ldr	r3, [pc, #388]	@ (80017a8 <HAL_RCC_OscConfig+0x33c>)
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	091b      	lsrs	r3, r3, #4
 8001628:	220f      	movs	r2, #15
 800162a:	4013      	ands	r3, r2
 800162c:	4a62      	ldr	r2, [pc, #392]	@ (80017b8 <HAL_RCC_OscConfig+0x34c>)
 800162e:	5cd3      	ldrb	r3, [r2, r3]
 8001630:	000a      	movs	r2, r1
 8001632:	40da      	lsrs	r2, r3
 8001634:	4b61      	ldr	r3, [pc, #388]	@ (80017bc <HAL_RCC_OscConfig+0x350>)
 8001636:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001638:	4b61      	ldr	r3, [pc, #388]	@ (80017c0 <HAL_RCC_OscConfig+0x354>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2513      	movs	r5, #19
 800163e:	197c      	adds	r4, r7, r5
 8001640:	0018      	movs	r0, r3
 8001642:	f7ff fb8b 	bl	8000d5c <HAL_InitTick>
 8001646:	0003      	movs	r3, r0
 8001648:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800164a:	197b      	adds	r3, r7, r5
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d046      	beq.n	80016e0 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8001652:	197b      	adds	r3, r7, r5
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	e2d2      	b.n	8001bfe <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800165a:	2b00      	cmp	r3, #0
 800165c:	d027      	beq.n	80016ae <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800165e:	4b52      	ldr	r3, [pc, #328]	@ (80017a8 <HAL_RCC_OscConfig+0x33c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2209      	movs	r2, #9
 8001664:	4393      	bics	r3, r2
 8001666:	0019      	movs	r1, r3
 8001668:	4b4f      	ldr	r3, [pc, #316]	@ (80017a8 <HAL_RCC_OscConfig+0x33c>)
 800166a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800166c:	430a      	orrs	r2, r1
 800166e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001670:	f7ff fbba 	bl	8000de8 <HAL_GetTick>
 8001674:	0003      	movs	r3, r0
 8001676:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001678:	e008      	b.n	800168c <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800167a:	f7ff fbb5 	bl	8000de8 <HAL_GetTick>
 800167e:	0002      	movs	r2, r0
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	2b02      	cmp	r3, #2
 8001686:	d901      	bls.n	800168c <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e2b8      	b.n	8001bfe <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800168c:	4b46      	ldr	r3, [pc, #280]	@ (80017a8 <HAL_RCC_OscConfig+0x33c>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2204      	movs	r2, #4
 8001692:	4013      	ands	r3, r2
 8001694:	d0f1      	beq.n	800167a <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001696:	4b44      	ldr	r3, [pc, #272]	@ (80017a8 <HAL_RCC_OscConfig+0x33c>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	4a46      	ldr	r2, [pc, #280]	@ (80017b4 <HAL_RCC_OscConfig+0x348>)
 800169c:	4013      	ands	r3, r2
 800169e:	0019      	movs	r1, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	691b      	ldr	r3, [r3, #16]
 80016a4:	021a      	lsls	r2, r3, #8
 80016a6:	4b40      	ldr	r3, [pc, #256]	@ (80017a8 <HAL_RCC_OscConfig+0x33c>)
 80016a8:	430a      	orrs	r2, r1
 80016aa:	605a      	str	r2, [r3, #4]
 80016ac:	e018      	b.n	80016e0 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016ae:	4b3e      	ldr	r3, [pc, #248]	@ (80017a8 <HAL_RCC_OscConfig+0x33c>)
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	4b3d      	ldr	r3, [pc, #244]	@ (80017a8 <HAL_RCC_OscConfig+0x33c>)
 80016b4:	2101      	movs	r1, #1
 80016b6:	438a      	bics	r2, r1
 80016b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ba:	f7ff fb95 	bl	8000de8 <HAL_GetTick>
 80016be:	0003      	movs	r3, r0
 80016c0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80016c2:	e008      	b.n	80016d6 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016c4:	f7ff fb90 	bl	8000de8 <HAL_GetTick>
 80016c8:	0002      	movs	r2, r0
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e293      	b.n	8001bfe <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80016d6:	4b34      	ldr	r3, [pc, #208]	@ (80017a8 <HAL_RCC_OscConfig+0x33c>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2204      	movs	r2, #4
 80016dc:	4013      	ands	r3, r2
 80016de:	d1f1      	bne.n	80016c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2210      	movs	r2, #16
 80016e6:	4013      	ands	r3, r2
 80016e8:	d100      	bne.n	80016ec <HAL_RCC_OscConfig+0x280>
 80016ea:	e0a2      	b.n	8001832 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d140      	bne.n	8001774 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016f2:	4b2d      	ldr	r3, [pc, #180]	@ (80017a8 <HAL_RCC_OscConfig+0x33c>)
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	2380      	movs	r3, #128	@ 0x80
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	4013      	ands	r3, r2
 80016fc:	d005      	beq.n	800170a <HAL_RCC_OscConfig+0x29e>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	69db      	ldr	r3, [r3, #28]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d101      	bne.n	800170a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e279      	b.n	8001bfe <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800170a:	4b27      	ldr	r3, [pc, #156]	@ (80017a8 <HAL_RCC_OscConfig+0x33c>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	4a2d      	ldr	r2, [pc, #180]	@ (80017c4 <HAL_RCC_OscConfig+0x358>)
 8001710:	4013      	ands	r3, r2
 8001712:	0019      	movs	r1, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001718:	4b23      	ldr	r3, [pc, #140]	@ (80017a8 <HAL_RCC_OscConfig+0x33c>)
 800171a:	430a      	orrs	r2, r1
 800171c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800171e:	4b22      	ldr	r3, [pc, #136]	@ (80017a8 <HAL_RCC_OscConfig+0x33c>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	021b      	lsls	r3, r3, #8
 8001724:	0a19      	lsrs	r1, r3, #8
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a1b      	ldr	r3, [r3, #32]
 800172a:	061a      	lsls	r2, r3, #24
 800172c:	4b1e      	ldr	r3, [pc, #120]	@ (80017a8 <HAL_RCC_OscConfig+0x33c>)
 800172e:	430a      	orrs	r2, r1
 8001730:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001736:	0b5b      	lsrs	r3, r3, #13
 8001738:	3301      	adds	r3, #1
 800173a:	2280      	movs	r2, #128	@ 0x80
 800173c:	0212      	lsls	r2, r2, #8
 800173e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001740:	4b19      	ldr	r3, [pc, #100]	@ (80017a8 <HAL_RCC_OscConfig+0x33c>)
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	091b      	lsrs	r3, r3, #4
 8001746:	210f      	movs	r1, #15
 8001748:	400b      	ands	r3, r1
 800174a:	491b      	ldr	r1, [pc, #108]	@ (80017b8 <HAL_RCC_OscConfig+0x34c>)
 800174c:	5ccb      	ldrb	r3, [r1, r3]
 800174e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001750:	4b1a      	ldr	r3, [pc, #104]	@ (80017bc <HAL_RCC_OscConfig+0x350>)
 8001752:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001754:	4b1a      	ldr	r3, [pc, #104]	@ (80017c0 <HAL_RCC_OscConfig+0x354>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2513      	movs	r5, #19
 800175a:	197c      	adds	r4, r7, r5
 800175c:	0018      	movs	r0, r3
 800175e:	f7ff fafd 	bl	8000d5c <HAL_InitTick>
 8001762:	0003      	movs	r3, r0
 8001764:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001766:	197b      	adds	r3, r7, r5
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d061      	beq.n	8001832 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 800176e:	197b      	adds	r3, r7, r5
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	e244      	b.n	8001bfe <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	69db      	ldr	r3, [r3, #28]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d040      	beq.n	80017fe <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800177c:	4b0a      	ldr	r3, [pc, #40]	@ (80017a8 <HAL_RCC_OscConfig+0x33c>)
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	4b09      	ldr	r3, [pc, #36]	@ (80017a8 <HAL_RCC_OscConfig+0x33c>)
 8001782:	2180      	movs	r1, #128	@ 0x80
 8001784:	0049      	lsls	r1, r1, #1
 8001786:	430a      	orrs	r2, r1
 8001788:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800178a:	f7ff fb2d 	bl	8000de8 <HAL_GetTick>
 800178e:	0003      	movs	r3, r0
 8001790:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001792:	e019      	b.n	80017c8 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001794:	f7ff fb28 	bl	8000de8 <HAL_GetTick>
 8001798:	0002      	movs	r2, r0
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d912      	bls.n	80017c8 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e22b      	b.n	8001bfe <HAL_RCC_OscConfig+0x792>
 80017a6:	46c0      	nop			@ (mov r8, r8)
 80017a8:	40021000 	.word	0x40021000
 80017ac:	fffeffff 	.word	0xfffeffff
 80017b0:	fffbffff 	.word	0xfffbffff
 80017b4:	ffffe0ff 	.word	0xffffe0ff
 80017b8:	080044e0 	.word	0x080044e0
 80017bc:	20000000 	.word	0x20000000
 80017c0:	20000004 	.word	0x20000004
 80017c4:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80017c8:	4bca      	ldr	r3, [pc, #808]	@ (8001af4 <HAL_RCC_OscConfig+0x688>)
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	2380      	movs	r3, #128	@ 0x80
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	4013      	ands	r3, r2
 80017d2:	d0df      	beq.n	8001794 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017d4:	4bc7      	ldr	r3, [pc, #796]	@ (8001af4 <HAL_RCC_OscConfig+0x688>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	4ac7      	ldr	r2, [pc, #796]	@ (8001af8 <HAL_RCC_OscConfig+0x68c>)
 80017da:	4013      	ands	r3, r2
 80017dc:	0019      	movs	r1, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80017e2:	4bc4      	ldr	r3, [pc, #784]	@ (8001af4 <HAL_RCC_OscConfig+0x688>)
 80017e4:	430a      	orrs	r2, r1
 80017e6:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017e8:	4bc2      	ldr	r3, [pc, #776]	@ (8001af4 <HAL_RCC_OscConfig+0x688>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	021b      	lsls	r3, r3, #8
 80017ee:	0a19      	lsrs	r1, r3, #8
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a1b      	ldr	r3, [r3, #32]
 80017f4:	061a      	lsls	r2, r3, #24
 80017f6:	4bbf      	ldr	r3, [pc, #764]	@ (8001af4 <HAL_RCC_OscConfig+0x688>)
 80017f8:	430a      	orrs	r2, r1
 80017fa:	605a      	str	r2, [r3, #4]
 80017fc:	e019      	b.n	8001832 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80017fe:	4bbd      	ldr	r3, [pc, #756]	@ (8001af4 <HAL_RCC_OscConfig+0x688>)
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	4bbc      	ldr	r3, [pc, #752]	@ (8001af4 <HAL_RCC_OscConfig+0x688>)
 8001804:	49bd      	ldr	r1, [pc, #756]	@ (8001afc <HAL_RCC_OscConfig+0x690>)
 8001806:	400a      	ands	r2, r1
 8001808:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800180a:	f7ff faed 	bl	8000de8 <HAL_GetTick>
 800180e:	0003      	movs	r3, r0
 8001810:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001812:	e008      	b.n	8001826 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001814:	f7ff fae8 	bl	8000de8 <HAL_GetTick>
 8001818:	0002      	movs	r2, r0
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b02      	cmp	r3, #2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e1eb      	b.n	8001bfe <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001826:	4bb3      	ldr	r3, [pc, #716]	@ (8001af4 <HAL_RCC_OscConfig+0x688>)
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	2380      	movs	r3, #128	@ 0x80
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	4013      	ands	r3, r2
 8001830:	d1f0      	bne.n	8001814 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2208      	movs	r2, #8
 8001838:	4013      	ands	r3, r2
 800183a:	d036      	beq.n	80018aa <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	695b      	ldr	r3, [r3, #20]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d019      	beq.n	8001878 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001844:	4bab      	ldr	r3, [pc, #684]	@ (8001af4 <HAL_RCC_OscConfig+0x688>)
 8001846:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001848:	4baa      	ldr	r3, [pc, #680]	@ (8001af4 <HAL_RCC_OscConfig+0x688>)
 800184a:	2101      	movs	r1, #1
 800184c:	430a      	orrs	r2, r1
 800184e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001850:	f7ff faca 	bl	8000de8 <HAL_GetTick>
 8001854:	0003      	movs	r3, r0
 8001856:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001858:	e008      	b.n	800186c <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800185a:	f7ff fac5 	bl	8000de8 <HAL_GetTick>
 800185e:	0002      	movs	r2, r0
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e1c8      	b.n	8001bfe <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800186c:	4ba1      	ldr	r3, [pc, #644]	@ (8001af4 <HAL_RCC_OscConfig+0x688>)
 800186e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001870:	2202      	movs	r2, #2
 8001872:	4013      	ands	r3, r2
 8001874:	d0f1      	beq.n	800185a <HAL_RCC_OscConfig+0x3ee>
 8001876:	e018      	b.n	80018aa <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001878:	4b9e      	ldr	r3, [pc, #632]	@ (8001af4 <HAL_RCC_OscConfig+0x688>)
 800187a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800187c:	4b9d      	ldr	r3, [pc, #628]	@ (8001af4 <HAL_RCC_OscConfig+0x688>)
 800187e:	2101      	movs	r1, #1
 8001880:	438a      	bics	r2, r1
 8001882:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001884:	f7ff fab0 	bl	8000de8 <HAL_GetTick>
 8001888:	0003      	movs	r3, r0
 800188a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800188c:	e008      	b.n	80018a0 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800188e:	f7ff faab 	bl	8000de8 <HAL_GetTick>
 8001892:	0002      	movs	r2, r0
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	2b02      	cmp	r3, #2
 800189a:	d901      	bls.n	80018a0 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 800189c:	2303      	movs	r3, #3
 800189e:	e1ae      	b.n	8001bfe <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80018a0:	4b94      	ldr	r3, [pc, #592]	@ (8001af4 <HAL_RCC_OscConfig+0x688>)
 80018a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018a4:	2202      	movs	r2, #2
 80018a6:	4013      	ands	r3, r2
 80018a8:	d1f1      	bne.n	800188e <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2204      	movs	r2, #4
 80018b0:	4013      	ands	r3, r2
 80018b2:	d100      	bne.n	80018b6 <HAL_RCC_OscConfig+0x44a>
 80018b4:	e0ae      	b.n	8001a14 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018b6:	2023      	movs	r0, #35	@ 0x23
 80018b8:	183b      	adds	r3, r7, r0
 80018ba:	2200      	movs	r2, #0
 80018bc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018be:	4b8d      	ldr	r3, [pc, #564]	@ (8001af4 <HAL_RCC_OscConfig+0x688>)
 80018c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80018c2:	2380      	movs	r3, #128	@ 0x80
 80018c4:	055b      	lsls	r3, r3, #21
 80018c6:	4013      	ands	r3, r2
 80018c8:	d109      	bne.n	80018de <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018ca:	4b8a      	ldr	r3, [pc, #552]	@ (8001af4 <HAL_RCC_OscConfig+0x688>)
 80018cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80018ce:	4b89      	ldr	r3, [pc, #548]	@ (8001af4 <HAL_RCC_OscConfig+0x688>)
 80018d0:	2180      	movs	r1, #128	@ 0x80
 80018d2:	0549      	lsls	r1, r1, #21
 80018d4:	430a      	orrs	r2, r1
 80018d6:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80018d8:	183b      	adds	r3, r7, r0
 80018da:	2201      	movs	r2, #1
 80018dc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018de:	4b88      	ldr	r3, [pc, #544]	@ (8001b00 <HAL_RCC_OscConfig+0x694>)
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	2380      	movs	r3, #128	@ 0x80
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	4013      	ands	r3, r2
 80018e8:	d11a      	bne.n	8001920 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018ea:	4b85      	ldr	r3, [pc, #532]	@ (8001b00 <HAL_RCC_OscConfig+0x694>)
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	4b84      	ldr	r3, [pc, #528]	@ (8001b00 <HAL_RCC_OscConfig+0x694>)
 80018f0:	2180      	movs	r1, #128	@ 0x80
 80018f2:	0049      	lsls	r1, r1, #1
 80018f4:	430a      	orrs	r2, r1
 80018f6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018f8:	f7ff fa76 	bl	8000de8 <HAL_GetTick>
 80018fc:	0003      	movs	r3, r0
 80018fe:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001900:	e008      	b.n	8001914 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001902:	f7ff fa71 	bl	8000de8 <HAL_GetTick>
 8001906:	0002      	movs	r2, r0
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	2b64      	cmp	r3, #100	@ 0x64
 800190e:	d901      	bls.n	8001914 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	e174      	b.n	8001bfe <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001914:	4b7a      	ldr	r3, [pc, #488]	@ (8001b00 <HAL_RCC_OscConfig+0x694>)
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	2380      	movs	r3, #128	@ 0x80
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	4013      	ands	r3, r2
 800191e:	d0f0      	beq.n	8001902 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	689a      	ldr	r2, [r3, #8]
 8001924:	2380      	movs	r3, #128	@ 0x80
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	429a      	cmp	r2, r3
 800192a:	d107      	bne.n	800193c <HAL_RCC_OscConfig+0x4d0>
 800192c:	4b71      	ldr	r3, [pc, #452]	@ (8001af4 <HAL_RCC_OscConfig+0x688>)
 800192e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001930:	4b70      	ldr	r3, [pc, #448]	@ (8001af4 <HAL_RCC_OscConfig+0x688>)
 8001932:	2180      	movs	r1, #128	@ 0x80
 8001934:	0049      	lsls	r1, r1, #1
 8001936:	430a      	orrs	r2, r1
 8001938:	651a      	str	r2, [r3, #80]	@ 0x50
 800193a:	e031      	b.n	80019a0 <HAL_RCC_OscConfig+0x534>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d10c      	bne.n	800195e <HAL_RCC_OscConfig+0x4f2>
 8001944:	4b6b      	ldr	r3, [pc, #428]	@ (8001af4 <HAL_RCC_OscConfig+0x688>)
 8001946:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001948:	4b6a      	ldr	r3, [pc, #424]	@ (8001af4 <HAL_RCC_OscConfig+0x688>)
 800194a:	496c      	ldr	r1, [pc, #432]	@ (8001afc <HAL_RCC_OscConfig+0x690>)
 800194c:	400a      	ands	r2, r1
 800194e:	651a      	str	r2, [r3, #80]	@ 0x50
 8001950:	4b68      	ldr	r3, [pc, #416]	@ (8001af4 <HAL_RCC_OscConfig+0x688>)
 8001952:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001954:	4b67      	ldr	r3, [pc, #412]	@ (8001af4 <HAL_RCC_OscConfig+0x688>)
 8001956:	496b      	ldr	r1, [pc, #428]	@ (8001b04 <HAL_RCC_OscConfig+0x698>)
 8001958:	400a      	ands	r2, r1
 800195a:	651a      	str	r2, [r3, #80]	@ 0x50
 800195c:	e020      	b.n	80019a0 <HAL_RCC_OscConfig+0x534>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	689a      	ldr	r2, [r3, #8]
 8001962:	23a0      	movs	r3, #160	@ 0xa0
 8001964:	00db      	lsls	r3, r3, #3
 8001966:	429a      	cmp	r2, r3
 8001968:	d10e      	bne.n	8001988 <HAL_RCC_OscConfig+0x51c>
 800196a:	4b62      	ldr	r3, [pc, #392]	@ (8001af4 <HAL_RCC_OscConfig+0x688>)
 800196c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800196e:	4b61      	ldr	r3, [pc, #388]	@ (8001af4 <HAL_RCC_OscConfig+0x688>)
 8001970:	2180      	movs	r1, #128	@ 0x80
 8001972:	00c9      	lsls	r1, r1, #3
 8001974:	430a      	orrs	r2, r1
 8001976:	651a      	str	r2, [r3, #80]	@ 0x50
 8001978:	4b5e      	ldr	r3, [pc, #376]	@ (8001af4 <HAL_RCC_OscConfig+0x688>)
 800197a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800197c:	4b5d      	ldr	r3, [pc, #372]	@ (8001af4 <HAL_RCC_OscConfig+0x688>)
 800197e:	2180      	movs	r1, #128	@ 0x80
 8001980:	0049      	lsls	r1, r1, #1
 8001982:	430a      	orrs	r2, r1
 8001984:	651a      	str	r2, [r3, #80]	@ 0x50
 8001986:	e00b      	b.n	80019a0 <HAL_RCC_OscConfig+0x534>
 8001988:	4b5a      	ldr	r3, [pc, #360]	@ (8001af4 <HAL_RCC_OscConfig+0x688>)
 800198a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800198c:	4b59      	ldr	r3, [pc, #356]	@ (8001af4 <HAL_RCC_OscConfig+0x688>)
 800198e:	495b      	ldr	r1, [pc, #364]	@ (8001afc <HAL_RCC_OscConfig+0x690>)
 8001990:	400a      	ands	r2, r1
 8001992:	651a      	str	r2, [r3, #80]	@ 0x50
 8001994:	4b57      	ldr	r3, [pc, #348]	@ (8001af4 <HAL_RCC_OscConfig+0x688>)
 8001996:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001998:	4b56      	ldr	r3, [pc, #344]	@ (8001af4 <HAL_RCC_OscConfig+0x688>)
 800199a:	495a      	ldr	r1, [pc, #360]	@ (8001b04 <HAL_RCC_OscConfig+0x698>)
 800199c:	400a      	ands	r2, r1
 800199e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d015      	beq.n	80019d4 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019a8:	f7ff fa1e 	bl	8000de8 <HAL_GetTick>
 80019ac:	0003      	movs	r3, r0
 80019ae:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80019b0:	e009      	b.n	80019c6 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019b2:	f7ff fa19 	bl	8000de8 <HAL_GetTick>
 80019b6:	0002      	movs	r2, r0
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	4a52      	ldr	r2, [pc, #328]	@ (8001b08 <HAL_RCC_OscConfig+0x69c>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e11b      	b.n	8001bfe <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80019c6:	4b4b      	ldr	r3, [pc, #300]	@ (8001af4 <HAL_RCC_OscConfig+0x688>)
 80019c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80019ca:	2380      	movs	r3, #128	@ 0x80
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	4013      	ands	r3, r2
 80019d0:	d0ef      	beq.n	80019b2 <HAL_RCC_OscConfig+0x546>
 80019d2:	e014      	b.n	80019fe <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019d4:	f7ff fa08 	bl	8000de8 <HAL_GetTick>
 80019d8:	0003      	movs	r3, r0
 80019da:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80019dc:	e009      	b.n	80019f2 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019de:	f7ff fa03 	bl	8000de8 <HAL_GetTick>
 80019e2:	0002      	movs	r2, r0
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	4a47      	ldr	r2, [pc, #284]	@ (8001b08 <HAL_RCC_OscConfig+0x69c>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e105      	b.n	8001bfe <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80019f2:	4b40      	ldr	r3, [pc, #256]	@ (8001af4 <HAL_RCC_OscConfig+0x688>)
 80019f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80019f6:	2380      	movs	r3, #128	@ 0x80
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	4013      	ands	r3, r2
 80019fc:	d1ef      	bne.n	80019de <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80019fe:	2323      	movs	r3, #35	@ 0x23
 8001a00:	18fb      	adds	r3, r7, r3
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d105      	bne.n	8001a14 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a08:	4b3a      	ldr	r3, [pc, #232]	@ (8001af4 <HAL_RCC_OscConfig+0x688>)
 8001a0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001a0c:	4b39      	ldr	r3, [pc, #228]	@ (8001af4 <HAL_RCC_OscConfig+0x688>)
 8001a0e:	493f      	ldr	r1, [pc, #252]	@ (8001b0c <HAL_RCC_OscConfig+0x6a0>)
 8001a10:	400a      	ands	r2, r1
 8001a12:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2220      	movs	r2, #32
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	d049      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d026      	beq.n	8001a74 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001a26:	4b33      	ldr	r3, [pc, #204]	@ (8001af4 <HAL_RCC_OscConfig+0x688>)
 8001a28:	689a      	ldr	r2, [r3, #8]
 8001a2a:	4b32      	ldr	r3, [pc, #200]	@ (8001af4 <HAL_RCC_OscConfig+0x688>)
 8001a2c:	2101      	movs	r1, #1
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	609a      	str	r2, [r3, #8]
 8001a32:	4b30      	ldr	r3, [pc, #192]	@ (8001af4 <HAL_RCC_OscConfig+0x688>)
 8001a34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a36:	4b2f      	ldr	r3, [pc, #188]	@ (8001af4 <HAL_RCC_OscConfig+0x688>)
 8001a38:	2101      	movs	r1, #1
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a3e:	4b34      	ldr	r3, [pc, #208]	@ (8001b10 <HAL_RCC_OscConfig+0x6a4>)
 8001a40:	6a1a      	ldr	r2, [r3, #32]
 8001a42:	4b33      	ldr	r3, [pc, #204]	@ (8001b10 <HAL_RCC_OscConfig+0x6a4>)
 8001a44:	2180      	movs	r1, #128	@ 0x80
 8001a46:	0189      	lsls	r1, r1, #6
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a4c:	f7ff f9cc 	bl	8000de8 <HAL_GetTick>
 8001a50:	0003      	movs	r3, r0
 8001a52:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001a54:	e008      	b.n	8001a68 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a56:	f7ff f9c7 	bl	8000de8 <HAL_GetTick>
 8001a5a:	0002      	movs	r2, r0
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d901      	bls.n	8001a68 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e0ca      	b.n	8001bfe <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001a68:	4b22      	ldr	r3, [pc, #136]	@ (8001af4 <HAL_RCC_OscConfig+0x688>)
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	2202      	movs	r2, #2
 8001a6e:	4013      	ands	r3, r2
 8001a70:	d0f1      	beq.n	8001a56 <HAL_RCC_OscConfig+0x5ea>
 8001a72:	e01e      	b.n	8001ab2 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001a74:	4b1f      	ldr	r3, [pc, #124]	@ (8001af4 <HAL_RCC_OscConfig+0x688>)
 8001a76:	689a      	ldr	r2, [r3, #8]
 8001a78:	4b1e      	ldr	r3, [pc, #120]	@ (8001af4 <HAL_RCC_OscConfig+0x688>)
 8001a7a:	2101      	movs	r1, #1
 8001a7c:	438a      	bics	r2, r1
 8001a7e:	609a      	str	r2, [r3, #8]
 8001a80:	4b23      	ldr	r3, [pc, #140]	@ (8001b10 <HAL_RCC_OscConfig+0x6a4>)
 8001a82:	6a1a      	ldr	r2, [r3, #32]
 8001a84:	4b22      	ldr	r3, [pc, #136]	@ (8001b10 <HAL_RCC_OscConfig+0x6a4>)
 8001a86:	4923      	ldr	r1, [pc, #140]	@ (8001b14 <HAL_RCC_OscConfig+0x6a8>)
 8001a88:	400a      	ands	r2, r1
 8001a8a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a8c:	f7ff f9ac 	bl	8000de8 <HAL_GetTick>
 8001a90:	0003      	movs	r3, r0
 8001a92:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001a94:	e008      	b.n	8001aa8 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a96:	f7ff f9a7 	bl	8000de8 <HAL_GetTick>
 8001a9a:	0002      	movs	r2, r0
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e0aa      	b.n	8001bfe <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001aa8:	4b12      	ldr	r3, [pc, #72]	@ (8001af4 <HAL_RCC_OscConfig+0x688>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	2202      	movs	r2, #2
 8001aae:	4013      	ands	r3, r2
 8001ab0:	d1f1      	bne.n	8001a96 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d100      	bne.n	8001abc <HAL_RCC_OscConfig+0x650>
 8001aba:	e09f      	b.n	8001bfc <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	2b0c      	cmp	r3, #12
 8001ac0:	d100      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x658>
 8001ac2:	e078      	b.n	8001bb6 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d159      	bne.n	8001b80 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001acc:	4b09      	ldr	r3, [pc, #36]	@ (8001af4 <HAL_RCC_OscConfig+0x688>)
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	4b08      	ldr	r3, [pc, #32]	@ (8001af4 <HAL_RCC_OscConfig+0x688>)
 8001ad2:	4911      	ldr	r1, [pc, #68]	@ (8001b18 <HAL_RCC_OscConfig+0x6ac>)
 8001ad4:	400a      	ands	r2, r1
 8001ad6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad8:	f7ff f986 	bl	8000de8 <HAL_GetTick>
 8001adc:	0003      	movs	r3, r0
 8001ade:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001ae0:	e01c      	b.n	8001b1c <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ae2:	f7ff f981 	bl	8000de8 <HAL_GetTick>
 8001ae6:	0002      	movs	r2, r0
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d915      	bls.n	8001b1c <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e084      	b.n	8001bfe <HAL_RCC_OscConfig+0x792>
 8001af4:	40021000 	.word	0x40021000
 8001af8:	ffff1fff 	.word	0xffff1fff
 8001afc:	fffffeff 	.word	0xfffffeff
 8001b00:	40007000 	.word	0x40007000
 8001b04:	fffffbff 	.word	0xfffffbff
 8001b08:	00001388 	.word	0x00001388
 8001b0c:	efffffff 	.word	0xefffffff
 8001b10:	40010000 	.word	0x40010000
 8001b14:	ffffdfff 	.word	0xffffdfff
 8001b18:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001b1c:	4b3a      	ldr	r3, [pc, #232]	@ (8001c08 <HAL_RCC_OscConfig+0x79c>)
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	2380      	movs	r3, #128	@ 0x80
 8001b22:	049b      	lsls	r3, r3, #18
 8001b24:	4013      	ands	r3, r2
 8001b26:	d1dc      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b28:	4b37      	ldr	r3, [pc, #220]	@ (8001c08 <HAL_RCC_OscConfig+0x79c>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	4a37      	ldr	r2, [pc, #220]	@ (8001c0c <HAL_RCC_OscConfig+0x7a0>)
 8001b2e:	4013      	ands	r3, r2
 8001b30:	0019      	movs	r1, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3a:	431a      	orrs	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b40:	431a      	orrs	r2, r3
 8001b42:	4b31      	ldr	r3, [pc, #196]	@ (8001c08 <HAL_RCC_OscConfig+0x79c>)
 8001b44:	430a      	orrs	r2, r1
 8001b46:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b48:	4b2f      	ldr	r3, [pc, #188]	@ (8001c08 <HAL_RCC_OscConfig+0x79c>)
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	4b2e      	ldr	r3, [pc, #184]	@ (8001c08 <HAL_RCC_OscConfig+0x79c>)
 8001b4e:	2180      	movs	r1, #128	@ 0x80
 8001b50:	0449      	lsls	r1, r1, #17
 8001b52:	430a      	orrs	r2, r1
 8001b54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b56:	f7ff f947 	bl	8000de8 <HAL_GetTick>
 8001b5a:	0003      	movs	r3, r0
 8001b5c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001b5e:	e008      	b.n	8001b72 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b60:	f7ff f942 	bl	8000de8 <HAL_GetTick>
 8001b64:	0002      	movs	r2, r0
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e045      	b.n	8001bfe <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001b72:	4b25      	ldr	r3, [pc, #148]	@ (8001c08 <HAL_RCC_OscConfig+0x79c>)
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	2380      	movs	r3, #128	@ 0x80
 8001b78:	049b      	lsls	r3, r3, #18
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	d0f0      	beq.n	8001b60 <HAL_RCC_OscConfig+0x6f4>
 8001b7e:	e03d      	b.n	8001bfc <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b80:	4b21      	ldr	r3, [pc, #132]	@ (8001c08 <HAL_RCC_OscConfig+0x79c>)
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	4b20      	ldr	r3, [pc, #128]	@ (8001c08 <HAL_RCC_OscConfig+0x79c>)
 8001b86:	4922      	ldr	r1, [pc, #136]	@ (8001c10 <HAL_RCC_OscConfig+0x7a4>)
 8001b88:	400a      	ands	r2, r1
 8001b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b8c:	f7ff f92c 	bl	8000de8 <HAL_GetTick>
 8001b90:	0003      	movs	r3, r0
 8001b92:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001b94:	e008      	b.n	8001ba8 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b96:	f7ff f927 	bl	8000de8 <HAL_GetTick>
 8001b9a:	0002      	movs	r2, r0
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d901      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e02a      	b.n	8001bfe <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001ba8:	4b17      	ldr	r3, [pc, #92]	@ (8001c08 <HAL_RCC_OscConfig+0x79c>)
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	2380      	movs	r3, #128	@ 0x80
 8001bae:	049b      	lsls	r3, r3, #18
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	d1f0      	bne.n	8001b96 <HAL_RCC_OscConfig+0x72a>
 8001bb4:	e022      	b.n	8001bfc <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d101      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e01d      	b.n	8001bfe <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001bc2:	4b11      	ldr	r3, [pc, #68]	@ (8001c08 <HAL_RCC_OscConfig+0x79c>)
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	2380      	movs	r3, #128	@ 0x80
 8001bcc:	025b      	lsls	r3, r3, #9
 8001bce:	401a      	ands	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d10f      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	23f0      	movs	r3, #240	@ 0xf0
 8001bdc:	039b      	lsls	r3, r3, #14
 8001bde:	401a      	ands	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d107      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	23c0      	movs	r3, #192	@ 0xc0
 8001bec:	041b      	lsls	r3, r3, #16
 8001bee:	401a      	ands	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d001      	beq.n	8001bfc <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e000      	b.n	8001bfe <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	0018      	movs	r0, r3
 8001c00:	46bd      	mov	sp, r7
 8001c02:	b00a      	add	sp, #40	@ 0x28
 8001c04:	bdb0      	pop	{r4, r5, r7, pc}
 8001c06:	46c0      	nop			@ (mov r8, r8)
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	ff02ffff 	.word	0xff02ffff
 8001c10:	feffffff 	.word	0xfeffffff

08001c14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c14:	b5b0      	push	{r4, r5, r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d101      	bne.n	8001c28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e128      	b.n	8001e7a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c28:	4b96      	ldr	r3, [pc, #600]	@ (8001e84 <HAL_RCC_ClockConfig+0x270>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	4013      	ands	r3, r2
 8001c30:	683a      	ldr	r2, [r7, #0]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d91e      	bls.n	8001c74 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c36:	4b93      	ldr	r3, [pc, #588]	@ (8001e84 <HAL_RCC_ClockConfig+0x270>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	4393      	bics	r3, r2
 8001c3e:	0019      	movs	r1, r3
 8001c40:	4b90      	ldr	r3, [pc, #576]	@ (8001e84 <HAL_RCC_ClockConfig+0x270>)
 8001c42:	683a      	ldr	r2, [r7, #0]
 8001c44:	430a      	orrs	r2, r1
 8001c46:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c48:	f7ff f8ce 	bl	8000de8 <HAL_GetTick>
 8001c4c:	0003      	movs	r3, r0
 8001c4e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c50:	e009      	b.n	8001c66 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c52:	f7ff f8c9 	bl	8000de8 <HAL_GetTick>
 8001c56:	0002      	movs	r2, r0
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	4a8a      	ldr	r2, [pc, #552]	@ (8001e88 <HAL_RCC_ClockConfig+0x274>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e109      	b.n	8001e7a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c66:	4b87      	ldr	r3, [pc, #540]	@ (8001e84 <HAL_RCC_ClockConfig+0x270>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	683a      	ldr	r2, [r7, #0]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d1ee      	bne.n	8001c52 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2202      	movs	r2, #2
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	d009      	beq.n	8001c92 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c7e:	4b83      	ldr	r3, [pc, #524]	@ (8001e8c <HAL_RCC_ClockConfig+0x278>)
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	22f0      	movs	r2, #240	@ 0xf0
 8001c84:	4393      	bics	r3, r2
 8001c86:	0019      	movs	r1, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689a      	ldr	r2, [r3, #8]
 8001c8c:	4b7f      	ldr	r3, [pc, #508]	@ (8001e8c <HAL_RCC_ClockConfig+0x278>)
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2201      	movs	r2, #1
 8001c98:	4013      	ands	r3, r2
 8001c9a:	d100      	bne.n	8001c9e <HAL_RCC_ClockConfig+0x8a>
 8001c9c:	e089      	b.n	8001db2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d107      	bne.n	8001cb6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ca6:	4b79      	ldr	r3, [pc, #484]	@ (8001e8c <HAL_RCC_ClockConfig+0x278>)
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	2380      	movs	r3, #128	@ 0x80
 8001cac:	029b      	lsls	r3, r3, #10
 8001cae:	4013      	ands	r3, r2
 8001cb0:	d120      	bne.n	8001cf4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e0e1      	b.n	8001e7a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	2b03      	cmp	r3, #3
 8001cbc:	d107      	bne.n	8001cce <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001cbe:	4b73      	ldr	r3, [pc, #460]	@ (8001e8c <HAL_RCC_ClockConfig+0x278>)
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	2380      	movs	r3, #128	@ 0x80
 8001cc4:	049b      	lsls	r3, r3, #18
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	d114      	bne.n	8001cf4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e0d5      	b.n	8001e7a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d106      	bne.n	8001ce4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cd6:	4b6d      	ldr	r3, [pc, #436]	@ (8001e8c <HAL_RCC_ClockConfig+0x278>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2204      	movs	r2, #4
 8001cdc:	4013      	ands	r3, r2
 8001cde:	d109      	bne.n	8001cf4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e0ca      	b.n	8001e7a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001ce4:	4b69      	ldr	r3, [pc, #420]	@ (8001e8c <HAL_RCC_ClockConfig+0x278>)
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	2380      	movs	r3, #128	@ 0x80
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	4013      	ands	r3, r2
 8001cee:	d101      	bne.n	8001cf4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e0c2      	b.n	8001e7a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cf4:	4b65      	ldr	r3, [pc, #404]	@ (8001e8c <HAL_RCC_ClockConfig+0x278>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	2203      	movs	r2, #3
 8001cfa:	4393      	bics	r3, r2
 8001cfc:	0019      	movs	r1, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685a      	ldr	r2, [r3, #4]
 8001d02:	4b62      	ldr	r3, [pc, #392]	@ (8001e8c <HAL_RCC_ClockConfig+0x278>)
 8001d04:	430a      	orrs	r2, r1
 8001d06:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d08:	f7ff f86e 	bl	8000de8 <HAL_GetTick>
 8001d0c:	0003      	movs	r3, r0
 8001d0e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d111      	bne.n	8001d3c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d18:	e009      	b.n	8001d2e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d1a:	f7ff f865 	bl	8000de8 <HAL_GetTick>
 8001d1e:	0002      	movs	r2, r0
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	4a58      	ldr	r2, [pc, #352]	@ (8001e88 <HAL_RCC_ClockConfig+0x274>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e0a5      	b.n	8001e7a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d2e:	4b57      	ldr	r3, [pc, #348]	@ (8001e8c <HAL_RCC_ClockConfig+0x278>)
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	220c      	movs	r2, #12
 8001d34:	4013      	ands	r3, r2
 8001d36:	2b08      	cmp	r3, #8
 8001d38:	d1ef      	bne.n	8001d1a <HAL_RCC_ClockConfig+0x106>
 8001d3a:	e03a      	b.n	8001db2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	2b03      	cmp	r3, #3
 8001d42:	d111      	bne.n	8001d68 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d44:	e009      	b.n	8001d5a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d46:	f7ff f84f 	bl	8000de8 <HAL_GetTick>
 8001d4a:	0002      	movs	r2, r0
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	4a4d      	ldr	r2, [pc, #308]	@ (8001e88 <HAL_RCC_ClockConfig+0x274>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e08f      	b.n	8001e7a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d5a:	4b4c      	ldr	r3, [pc, #304]	@ (8001e8c <HAL_RCC_ClockConfig+0x278>)
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	220c      	movs	r2, #12
 8001d60:	4013      	ands	r3, r2
 8001d62:	2b0c      	cmp	r3, #12
 8001d64:	d1ef      	bne.n	8001d46 <HAL_RCC_ClockConfig+0x132>
 8001d66:	e024      	b.n	8001db2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d11b      	bne.n	8001da8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d70:	e009      	b.n	8001d86 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d72:	f7ff f839 	bl	8000de8 <HAL_GetTick>
 8001d76:	0002      	movs	r2, r0
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	4a42      	ldr	r2, [pc, #264]	@ (8001e88 <HAL_RCC_ClockConfig+0x274>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e079      	b.n	8001e7a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d86:	4b41      	ldr	r3, [pc, #260]	@ (8001e8c <HAL_RCC_ClockConfig+0x278>)
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	220c      	movs	r2, #12
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	2b04      	cmp	r3, #4
 8001d90:	d1ef      	bne.n	8001d72 <HAL_RCC_ClockConfig+0x15e>
 8001d92:	e00e      	b.n	8001db2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d94:	f7ff f828 	bl	8000de8 <HAL_GetTick>
 8001d98:	0002      	movs	r2, r0
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	4a3a      	ldr	r2, [pc, #232]	@ (8001e88 <HAL_RCC_ClockConfig+0x274>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d901      	bls.n	8001da8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e068      	b.n	8001e7a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001da8:	4b38      	ldr	r3, [pc, #224]	@ (8001e8c <HAL_RCC_ClockConfig+0x278>)
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	220c      	movs	r2, #12
 8001dae:	4013      	ands	r3, r2
 8001db0:	d1f0      	bne.n	8001d94 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001db2:	4b34      	ldr	r3, [pc, #208]	@ (8001e84 <HAL_RCC_ClockConfig+0x270>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2201      	movs	r2, #1
 8001db8:	4013      	ands	r3, r2
 8001dba:	683a      	ldr	r2, [r7, #0]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d21e      	bcs.n	8001dfe <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dc0:	4b30      	ldr	r3, [pc, #192]	@ (8001e84 <HAL_RCC_ClockConfig+0x270>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	4393      	bics	r3, r2
 8001dc8:	0019      	movs	r1, r3
 8001dca:	4b2e      	ldr	r3, [pc, #184]	@ (8001e84 <HAL_RCC_ClockConfig+0x270>)
 8001dcc:	683a      	ldr	r2, [r7, #0]
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001dd2:	f7ff f809 	bl	8000de8 <HAL_GetTick>
 8001dd6:	0003      	movs	r3, r0
 8001dd8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dda:	e009      	b.n	8001df0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ddc:	f7ff f804 	bl	8000de8 <HAL_GetTick>
 8001de0:	0002      	movs	r2, r0
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	4a28      	ldr	r2, [pc, #160]	@ (8001e88 <HAL_RCC_ClockConfig+0x274>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d901      	bls.n	8001df0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e044      	b.n	8001e7a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001df0:	4b24      	ldr	r3, [pc, #144]	@ (8001e84 <HAL_RCC_ClockConfig+0x270>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2201      	movs	r2, #1
 8001df6:	4013      	ands	r3, r2
 8001df8:	683a      	ldr	r2, [r7, #0]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d1ee      	bne.n	8001ddc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2204      	movs	r2, #4
 8001e04:	4013      	ands	r3, r2
 8001e06:	d009      	beq.n	8001e1c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e08:	4b20      	ldr	r3, [pc, #128]	@ (8001e8c <HAL_RCC_ClockConfig+0x278>)
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	4a20      	ldr	r2, [pc, #128]	@ (8001e90 <HAL_RCC_ClockConfig+0x27c>)
 8001e0e:	4013      	ands	r3, r2
 8001e10:	0019      	movs	r1, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	68da      	ldr	r2, [r3, #12]
 8001e16:	4b1d      	ldr	r3, [pc, #116]	@ (8001e8c <HAL_RCC_ClockConfig+0x278>)
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2208      	movs	r2, #8
 8001e22:	4013      	ands	r3, r2
 8001e24:	d00a      	beq.n	8001e3c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e26:	4b19      	ldr	r3, [pc, #100]	@ (8001e8c <HAL_RCC_ClockConfig+0x278>)
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	4a1a      	ldr	r2, [pc, #104]	@ (8001e94 <HAL_RCC_ClockConfig+0x280>)
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	0019      	movs	r1, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	691b      	ldr	r3, [r3, #16]
 8001e34:	00da      	lsls	r2, r3, #3
 8001e36:	4b15      	ldr	r3, [pc, #84]	@ (8001e8c <HAL_RCC_ClockConfig+0x278>)
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e3c:	f000 f832 	bl	8001ea4 <HAL_RCC_GetSysClockFreq>
 8001e40:	0001      	movs	r1, r0
 8001e42:	4b12      	ldr	r3, [pc, #72]	@ (8001e8c <HAL_RCC_ClockConfig+0x278>)
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	091b      	lsrs	r3, r3, #4
 8001e48:	220f      	movs	r2, #15
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	4a12      	ldr	r2, [pc, #72]	@ (8001e98 <HAL_RCC_ClockConfig+0x284>)
 8001e4e:	5cd3      	ldrb	r3, [r2, r3]
 8001e50:	000a      	movs	r2, r1
 8001e52:	40da      	lsrs	r2, r3
 8001e54:	4b11      	ldr	r3, [pc, #68]	@ (8001e9c <HAL_RCC_ClockConfig+0x288>)
 8001e56:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e58:	4b11      	ldr	r3, [pc, #68]	@ (8001ea0 <HAL_RCC_ClockConfig+0x28c>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	250b      	movs	r5, #11
 8001e5e:	197c      	adds	r4, r7, r5
 8001e60:	0018      	movs	r0, r3
 8001e62:	f7fe ff7b 	bl	8000d5c <HAL_InitTick>
 8001e66:	0003      	movs	r3, r0
 8001e68:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001e6a:	197b      	adds	r3, r7, r5
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d002      	beq.n	8001e78 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001e72:	197b      	adds	r3, r7, r5
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	e000      	b.n	8001e7a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	0018      	movs	r0, r3
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	b004      	add	sp, #16
 8001e80:	bdb0      	pop	{r4, r5, r7, pc}
 8001e82:	46c0      	nop			@ (mov r8, r8)
 8001e84:	40022000 	.word	0x40022000
 8001e88:	00001388 	.word	0x00001388
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	fffff8ff 	.word	0xfffff8ff
 8001e94:	ffffc7ff 	.word	0xffffc7ff
 8001e98:	080044e0 	.word	0x080044e0
 8001e9c:	20000000 	.word	0x20000000
 8001ea0:	20000004 	.word	0x20000004

08001ea4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001eaa:	4b3c      	ldr	r3, [pc, #240]	@ (8001f9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	220c      	movs	r2, #12
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	2b0c      	cmp	r3, #12
 8001eb8:	d013      	beq.n	8001ee2 <HAL_RCC_GetSysClockFreq+0x3e>
 8001eba:	d85c      	bhi.n	8001f76 <HAL_RCC_GetSysClockFreq+0xd2>
 8001ebc:	2b04      	cmp	r3, #4
 8001ebe:	d002      	beq.n	8001ec6 <HAL_RCC_GetSysClockFreq+0x22>
 8001ec0:	2b08      	cmp	r3, #8
 8001ec2:	d00b      	beq.n	8001edc <HAL_RCC_GetSysClockFreq+0x38>
 8001ec4:	e057      	b.n	8001f76 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001ec6:	4b35      	ldr	r3, [pc, #212]	@ (8001f9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2210      	movs	r2, #16
 8001ecc:	4013      	ands	r3, r2
 8001ece:	d002      	beq.n	8001ed6 <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001ed0:	4b33      	ldr	r3, [pc, #204]	@ (8001fa0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001ed2:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001ed4:	e05d      	b.n	8001f92 <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 8001ed6:	4b33      	ldr	r3, [pc, #204]	@ (8001fa4 <HAL_RCC_GetSysClockFreq+0x100>)
 8001ed8:	613b      	str	r3, [r7, #16]
      break;
 8001eda:	e05a      	b.n	8001f92 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001edc:	4b32      	ldr	r3, [pc, #200]	@ (8001fa8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001ede:	613b      	str	r3, [r7, #16]
      break;
 8001ee0:	e057      	b.n	8001f92 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	0c9b      	lsrs	r3, r3, #18
 8001ee6:	220f      	movs	r2, #15
 8001ee8:	4013      	ands	r3, r2
 8001eea:	4a30      	ldr	r2, [pc, #192]	@ (8001fac <HAL_RCC_GetSysClockFreq+0x108>)
 8001eec:	5cd3      	ldrb	r3, [r2, r3]
 8001eee:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	0d9b      	lsrs	r3, r3, #22
 8001ef4:	2203      	movs	r2, #3
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	3301      	adds	r3, #1
 8001efa:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001efc:	4b27      	ldr	r3, [pc, #156]	@ (8001f9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001efe:	68da      	ldr	r2, [r3, #12]
 8001f00:	2380      	movs	r3, #128	@ 0x80
 8001f02:	025b      	lsls	r3, r3, #9
 8001f04:	4013      	ands	r3, r2
 8001f06:	d00f      	beq.n	8001f28 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8001f08:	68b9      	ldr	r1, [r7, #8]
 8001f0a:	000a      	movs	r2, r1
 8001f0c:	0152      	lsls	r2, r2, #5
 8001f0e:	1a52      	subs	r2, r2, r1
 8001f10:	0193      	lsls	r3, r2, #6
 8001f12:	1a9b      	subs	r3, r3, r2
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	185b      	adds	r3, r3, r1
 8001f18:	025b      	lsls	r3, r3, #9
 8001f1a:	6879      	ldr	r1, [r7, #4]
 8001f1c:	0018      	movs	r0, r3
 8001f1e:	f7fe f8f3 	bl	8000108 <__udivsi3>
 8001f22:	0003      	movs	r3, r0
 8001f24:	617b      	str	r3, [r7, #20]
 8001f26:	e023      	b.n	8001f70 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001f28:	4b1c      	ldr	r3, [pc, #112]	@ (8001f9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2210      	movs	r2, #16
 8001f2e:	4013      	ands	r3, r2
 8001f30:	d00f      	beq.n	8001f52 <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8001f32:	68b9      	ldr	r1, [r7, #8]
 8001f34:	000a      	movs	r2, r1
 8001f36:	0152      	lsls	r2, r2, #5
 8001f38:	1a52      	subs	r2, r2, r1
 8001f3a:	0193      	lsls	r3, r2, #6
 8001f3c:	1a9b      	subs	r3, r3, r2
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	185b      	adds	r3, r3, r1
 8001f42:	021b      	lsls	r3, r3, #8
 8001f44:	6879      	ldr	r1, [r7, #4]
 8001f46:	0018      	movs	r0, r3
 8001f48:	f7fe f8de 	bl	8000108 <__udivsi3>
 8001f4c:	0003      	movs	r3, r0
 8001f4e:	617b      	str	r3, [r7, #20]
 8001f50:	e00e      	b.n	8001f70 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8001f52:	68b9      	ldr	r1, [r7, #8]
 8001f54:	000a      	movs	r2, r1
 8001f56:	0152      	lsls	r2, r2, #5
 8001f58:	1a52      	subs	r2, r2, r1
 8001f5a:	0193      	lsls	r3, r2, #6
 8001f5c:	1a9b      	subs	r3, r3, r2
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	185b      	adds	r3, r3, r1
 8001f62:	029b      	lsls	r3, r3, #10
 8001f64:	6879      	ldr	r1, [r7, #4]
 8001f66:	0018      	movs	r0, r3
 8001f68:	f7fe f8ce 	bl	8000108 <__udivsi3>
 8001f6c:	0003      	movs	r3, r0
 8001f6e:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	613b      	str	r3, [r7, #16]
      break;
 8001f74:	e00d      	b.n	8001f92 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001f76:	4b09      	ldr	r3, [pc, #36]	@ (8001f9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	0b5b      	lsrs	r3, r3, #13
 8001f7c:	2207      	movs	r2, #7
 8001f7e:	4013      	ands	r3, r2
 8001f80:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	3301      	adds	r3, #1
 8001f86:	2280      	movs	r2, #128	@ 0x80
 8001f88:	0212      	lsls	r2, r2, #8
 8001f8a:	409a      	lsls	r2, r3
 8001f8c:	0013      	movs	r3, r2
 8001f8e:	613b      	str	r3, [r7, #16]
      break;
 8001f90:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001f92:	693b      	ldr	r3, [r7, #16]
}
 8001f94:	0018      	movs	r0, r3
 8001f96:	46bd      	mov	sp, r7
 8001f98:	b006      	add	sp, #24
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	003d0900 	.word	0x003d0900
 8001fa4:	00f42400 	.word	0x00f42400
 8001fa8:	007a1200 	.word	0x007a1200
 8001fac:	080044f8 	.word	0x080044f8

08001fb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fb4:	4b02      	ldr	r3, [pc, #8]	@ (8001fc0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
}
 8001fb8:	0018      	movs	r0, r3
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	46c0      	nop			@ (mov r8, r8)
 8001fc0:	20000000 	.word	0x20000000

08001fc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fc8:	f7ff fff2 	bl	8001fb0 <HAL_RCC_GetHCLKFreq>
 8001fcc:	0001      	movs	r1, r0
 8001fce:	4b06      	ldr	r3, [pc, #24]	@ (8001fe8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	0a1b      	lsrs	r3, r3, #8
 8001fd4:	2207      	movs	r2, #7
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	4a04      	ldr	r2, [pc, #16]	@ (8001fec <HAL_RCC_GetPCLK1Freq+0x28>)
 8001fda:	5cd3      	ldrb	r3, [r2, r3]
 8001fdc:	40d9      	lsrs	r1, r3
 8001fde:	000b      	movs	r3, r1
}
 8001fe0:	0018      	movs	r0, r3
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	46c0      	nop			@ (mov r8, r8)
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	080044f0 	.word	0x080044f0

08001ff0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ff4:	f7ff ffdc 	bl	8001fb0 <HAL_RCC_GetHCLKFreq>
 8001ff8:	0001      	movs	r1, r0
 8001ffa:	4b06      	ldr	r3, [pc, #24]	@ (8002014 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	0adb      	lsrs	r3, r3, #11
 8002000:	2207      	movs	r2, #7
 8002002:	4013      	ands	r3, r2
 8002004:	4a04      	ldr	r2, [pc, #16]	@ (8002018 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002006:	5cd3      	ldrb	r3, [r2, r3]
 8002008:	40d9      	lsrs	r1, r3
 800200a:	000b      	movs	r3, r1
}
 800200c:	0018      	movs	r0, r3
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	46c0      	nop			@ (mov r8, r8)
 8002014:	40021000 	.word	0x40021000
 8002018:	080044f0 	.word	0x080044f0

0800201c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002024:	2017      	movs	r0, #23
 8002026:	183b      	adds	r3, r7, r0
 8002028:	2200      	movs	r2, #0
 800202a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2220      	movs	r2, #32
 8002032:	4013      	ands	r3, r2
 8002034:	d100      	bne.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8002036:	e0c7      	b.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002038:	4b9b      	ldr	r3, [pc, #620]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800203a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800203c:	2380      	movs	r3, #128	@ 0x80
 800203e:	055b      	lsls	r3, r3, #21
 8002040:	4013      	ands	r3, r2
 8002042:	d109      	bne.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002044:	4b98      	ldr	r3, [pc, #608]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002046:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002048:	4b97      	ldr	r3, [pc, #604]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800204a:	2180      	movs	r1, #128	@ 0x80
 800204c:	0549      	lsls	r1, r1, #21
 800204e:	430a      	orrs	r2, r1
 8002050:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002052:	183b      	adds	r3, r7, r0
 8002054:	2201      	movs	r2, #1
 8002056:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002058:	4b94      	ldr	r3, [pc, #592]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	2380      	movs	r3, #128	@ 0x80
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	4013      	ands	r3, r2
 8002062:	d11a      	bne.n	800209a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002064:	4b91      	ldr	r3, [pc, #580]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	4b90      	ldr	r3, [pc, #576]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800206a:	2180      	movs	r1, #128	@ 0x80
 800206c:	0049      	lsls	r1, r1, #1
 800206e:	430a      	orrs	r2, r1
 8002070:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002072:	f7fe feb9 	bl	8000de8 <HAL_GetTick>
 8002076:	0003      	movs	r3, r0
 8002078:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800207a:	e008      	b.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800207c:	f7fe feb4 	bl	8000de8 <HAL_GetTick>
 8002080:	0002      	movs	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b64      	cmp	r3, #100	@ 0x64
 8002088:	d901      	bls.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e107      	b.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800208e:	4b87      	ldr	r3, [pc, #540]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	2380      	movs	r3, #128	@ 0x80
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	4013      	ands	r3, r2
 8002098:	d0f0      	beq.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800209a:	4b83      	ldr	r3, [pc, #524]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	23c0      	movs	r3, #192	@ 0xc0
 80020a0:	039b      	lsls	r3, r3, #14
 80020a2:	4013      	ands	r3, r2
 80020a4:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685a      	ldr	r2, [r3, #4]
 80020aa:	23c0      	movs	r3, #192	@ 0xc0
 80020ac:	039b      	lsls	r3, r3, #14
 80020ae:	4013      	ands	r3, r2
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d013      	beq.n	80020de <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685a      	ldr	r2, [r3, #4]
 80020ba:	23c0      	movs	r3, #192	@ 0xc0
 80020bc:	029b      	lsls	r3, r3, #10
 80020be:	401a      	ands	r2, r3
 80020c0:	23c0      	movs	r3, #192	@ 0xc0
 80020c2:	029b      	lsls	r3, r3, #10
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d10a      	bne.n	80020de <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80020c8:	4b77      	ldr	r3, [pc, #476]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	2380      	movs	r3, #128	@ 0x80
 80020ce:	029b      	lsls	r3, r3, #10
 80020d0:	401a      	ands	r2, r3
 80020d2:	2380      	movs	r3, #128	@ 0x80
 80020d4:	029b      	lsls	r3, r3, #10
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d101      	bne.n	80020de <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e0df      	b.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80020de:	4b72      	ldr	r3, [pc, #456]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80020e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80020e2:	23c0      	movs	r3, #192	@ 0xc0
 80020e4:	029b      	lsls	r3, r3, #10
 80020e6:	4013      	ands	r3, r2
 80020e8:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d03b      	beq.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685a      	ldr	r2, [r3, #4]
 80020f4:	23c0      	movs	r3, #192	@ 0xc0
 80020f6:	029b      	lsls	r3, r3, #10
 80020f8:	4013      	ands	r3, r2
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d033      	beq.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2220      	movs	r2, #32
 8002106:	4013      	ands	r3, r2
 8002108:	d02e      	beq.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800210a:	4b67      	ldr	r3, [pc, #412]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800210c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800210e:	4a68      	ldr	r2, [pc, #416]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8002110:	4013      	ands	r3, r2
 8002112:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002114:	4b64      	ldr	r3, [pc, #400]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002116:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002118:	4b63      	ldr	r3, [pc, #396]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800211a:	2180      	movs	r1, #128	@ 0x80
 800211c:	0309      	lsls	r1, r1, #12
 800211e:	430a      	orrs	r2, r1
 8002120:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002122:	4b61      	ldr	r3, [pc, #388]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002124:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002126:	4b60      	ldr	r3, [pc, #384]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002128:	4962      	ldr	r1, [pc, #392]	@ (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800212a:	400a      	ands	r2, r1
 800212c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800212e:	4b5e      	ldr	r3, [pc, #376]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002134:	68fa      	ldr	r2, [r7, #12]
 8002136:	2380      	movs	r3, #128	@ 0x80
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	4013      	ands	r3, r2
 800213c:	d014      	beq.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800213e:	f7fe fe53 	bl	8000de8 <HAL_GetTick>
 8002142:	0003      	movs	r3, r0
 8002144:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002146:	e009      	b.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002148:	f7fe fe4e 	bl	8000de8 <HAL_GetTick>
 800214c:	0002      	movs	r2, r0
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	4a59      	ldr	r2, [pc, #356]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d901      	bls.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e0a0      	b.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800215c:	4b52      	ldr	r3, [pc, #328]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800215e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002160:	2380      	movs	r3, #128	@ 0x80
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	4013      	ands	r3, r2
 8002166:	d0ef      	beq.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2220      	movs	r2, #32
 800216e:	4013      	ands	r3, r2
 8002170:	d01f      	beq.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685a      	ldr	r2, [r3, #4]
 8002176:	23c0      	movs	r3, #192	@ 0xc0
 8002178:	029b      	lsls	r3, r3, #10
 800217a:	401a      	ands	r2, r3
 800217c:	23c0      	movs	r3, #192	@ 0xc0
 800217e:	029b      	lsls	r3, r3, #10
 8002180:	429a      	cmp	r2, r3
 8002182:	d10c      	bne.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x182>
 8002184:	4b48      	ldr	r3, [pc, #288]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a4c      	ldr	r2, [pc, #304]	@ (80022bc <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800218a:	4013      	ands	r3, r2
 800218c:	0019      	movs	r1, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685a      	ldr	r2, [r3, #4]
 8002192:	23c0      	movs	r3, #192	@ 0xc0
 8002194:	039b      	lsls	r3, r3, #14
 8002196:	401a      	ands	r2, r3
 8002198:	4b43      	ldr	r3, [pc, #268]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800219a:	430a      	orrs	r2, r1
 800219c:	601a      	str	r2, [r3, #0]
 800219e:	4b42      	ldr	r3, [pc, #264]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80021a0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685a      	ldr	r2, [r3, #4]
 80021a6:	23c0      	movs	r3, #192	@ 0xc0
 80021a8:	029b      	lsls	r3, r3, #10
 80021aa:	401a      	ands	r2, r3
 80021ac:	4b3e      	ldr	r3, [pc, #248]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80021ae:	430a      	orrs	r2, r1
 80021b0:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021b2:	2317      	movs	r3, #23
 80021b4:	18fb      	adds	r3, r7, r3
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d105      	bne.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021bc:	4b3a      	ldr	r3, [pc, #232]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80021be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80021c0:	4b39      	ldr	r3, [pc, #228]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80021c2:	493f      	ldr	r1, [pc, #252]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80021c4:	400a      	ands	r2, r1
 80021c6:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2201      	movs	r2, #1
 80021ce:	4013      	ands	r3, r2
 80021d0:	d009      	beq.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021d2:	4b35      	ldr	r3, [pc, #212]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80021d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021d6:	2203      	movs	r2, #3
 80021d8:	4393      	bics	r3, r2
 80021da:	0019      	movs	r1, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	689a      	ldr	r2, [r3, #8]
 80021e0:	4b31      	ldr	r3, [pc, #196]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80021e2:	430a      	orrs	r2, r1
 80021e4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2202      	movs	r2, #2
 80021ec:	4013      	ands	r3, r2
 80021ee:	d009      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021f0:	4b2d      	ldr	r3, [pc, #180]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80021f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021f4:	220c      	movs	r2, #12
 80021f6:	4393      	bics	r3, r2
 80021f8:	0019      	movs	r1, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	68da      	ldr	r2, [r3, #12]
 80021fe:	4b2a      	ldr	r3, [pc, #168]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002200:	430a      	orrs	r2, r1
 8002202:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2204      	movs	r2, #4
 800220a:	4013      	ands	r3, r2
 800220c:	d009      	beq.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800220e:	4b26      	ldr	r3, [pc, #152]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002210:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002212:	4a2c      	ldr	r2, [pc, #176]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8002214:	4013      	ands	r3, r2
 8002216:	0019      	movs	r1, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	691a      	ldr	r2, [r3, #16]
 800221c:	4b22      	ldr	r3, [pc, #136]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800221e:	430a      	orrs	r2, r1
 8002220:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2208      	movs	r2, #8
 8002228:	4013      	ands	r3, r2
 800222a:	d009      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800222c:	4b1e      	ldr	r3, [pc, #120]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800222e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002230:	4a25      	ldr	r2, [pc, #148]	@ (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8002232:	4013      	ands	r3, r2
 8002234:	0019      	movs	r1, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	695a      	ldr	r2, [r3, #20]
 800223a:	4b1b      	ldr	r3, [pc, #108]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800223c:	430a      	orrs	r2, r1
 800223e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	2380      	movs	r3, #128	@ 0x80
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	4013      	ands	r3, r2
 800224a:	d009      	beq.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800224c:	4b16      	ldr	r3, [pc, #88]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800224e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002250:	4a17      	ldr	r2, [pc, #92]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8002252:	4013      	ands	r3, r2
 8002254:	0019      	movs	r1, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	699a      	ldr	r2, [r3, #24]
 800225a:	4b13      	ldr	r3, [pc, #76]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800225c:	430a      	orrs	r2, r1
 800225e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2240      	movs	r2, #64	@ 0x40
 8002266:	4013      	ands	r3, r2
 8002268:	d009      	beq.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800226a:	4b0f      	ldr	r3, [pc, #60]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800226c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800226e:	4a17      	ldr	r2, [pc, #92]	@ (80022cc <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8002270:	4013      	ands	r3, r2
 8002272:	0019      	movs	r1, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a1a      	ldr	r2, [r3, #32]
 8002278:	4b0b      	ldr	r3, [pc, #44]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800227a:	430a      	orrs	r2, r1
 800227c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	2280      	movs	r2, #128	@ 0x80
 8002284:	4013      	ands	r3, r2
 8002286:	d009      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002288:	4b07      	ldr	r3, [pc, #28]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800228a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800228c:	4a10      	ldr	r2, [pc, #64]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800228e:	4013      	ands	r3, r2
 8002290:	0019      	movs	r1, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	69da      	ldr	r2, [r3, #28]
 8002296:	4b04      	ldr	r3, [pc, #16]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002298:	430a      	orrs	r2, r1
 800229a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	0018      	movs	r0, r3
 80022a0:	46bd      	mov	sp, r7
 80022a2:	b006      	add	sp, #24
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	46c0      	nop			@ (mov r8, r8)
 80022a8:	40021000 	.word	0x40021000
 80022ac:	40007000 	.word	0x40007000
 80022b0:	fffcffff 	.word	0xfffcffff
 80022b4:	fff7ffff 	.word	0xfff7ffff
 80022b8:	00001388 	.word	0x00001388
 80022bc:	ffcfffff 	.word	0xffcfffff
 80022c0:	efffffff 	.word	0xefffffff
 80022c4:	fffff3ff 	.word	0xfffff3ff
 80022c8:	ffffcfff 	.word	0xffffcfff
 80022cc:	fbffffff 	.word	0xfbffffff
 80022d0:	fff3ffff 	.word	0xfff3ffff

080022d4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80022d4:	b5b0      	push	{r4, r5, r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80022dc:	230f      	movs	r3, #15
 80022de:	18fb      	adds	r3, r7, r3
 80022e0:	2201      	movs	r2, #1
 80022e2:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e088      	b.n	8002400 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2221      	movs	r2, #33	@ 0x21
 80022f2:	5c9b      	ldrb	r3, [r3, r2]
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d107      	bne.n	800230a <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2220      	movs	r2, #32
 80022fe:	2100      	movs	r1, #0
 8002300:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	0018      	movs	r0, r3
 8002306:	f7fe fb93 	bl	8000a30 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2221      	movs	r2, #33	@ 0x21
 800230e:	2102      	movs	r1, #2
 8002310:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	2210      	movs	r2, #16
 800231a:	4013      	ands	r3, r2
 800231c:	2b10      	cmp	r3, #16
 800231e:	d05f      	beq.n	80023e0 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	22ca      	movs	r2, #202	@ 0xca
 8002326:	625a      	str	r2, [r3, #36]	@ 0x24
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2253      	movs	r2, #83	@ 0x53
 800232e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002330:	250f      	movs	r5, #15
 8002332:	197c      	adds	r4, r7, r5
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	0018      	movs	r0, r3
 8002338:	f000 fb86 	bl	8002a48 <RTC_EnterInitMode>
 800233c:	0003      	movs	r3, r0
 800233e:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8002340:	0028      	movs	r0, r5
 8002342:	183b      	adds	r3, r7, r0
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d12c      	bne.n	80023a4 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	689a      	ldr	r2, [r3, #8]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	492c      	ldr	r1, [pc, #176]	@ (8002408 <HAL_RTC_Init+0x134>)
 8002356:	400a      	ands	r2, r1
 8002358:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6899      	ldr	r1, [r3, #8]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685a      	ldr	r2, [r3, #4]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	691b      	ldr	r3, [r3, #16]
 8002368:	431a      	orrs	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	699b      	ldr	r3, [r3, #24]
 800236e:	431a      	orrs	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	430a      	orrs	r2, r1
 8002376:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	68d2      	ldr	r2, [r2, #12]
 8002380:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	6919      	ldr	r1, [r3, #16]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	041a      	lsls	r2, r3, #16
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	430a      	orrs	r2, r1
 8002394:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002396:	183c      	adds	r4, r7, r0
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	0018      	movs	r0, r3
 800239c:	f000 fb98 	bl	8002ad0 <RTC_ExitInitMode>
 80023a0:	0003      	movs	r3, r0
 80023a2:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 80023a4:	230f      	movs	r3, #15
 80023a6:	18fb      	adds	r3, r7, r3
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d113      	bne.n	80023d6 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2103      	movs	r1, #3
 80023ba:	438a      	bics	r2, r1
 80023bc:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	69da      	ldr	r2, [r3, #28]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	695b      	ldr	r3, [r3, #20]
 80023cc:	431a      	orrs	r2, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	430a      	orrs	r2, r1
 80023d4:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	22ff      	movs	r2, #255	@ 0xff
 80023dc:	625a      	str	r2, [r3, #36]	@ 0x24
 80023de:	e003      	b.n	80023e8 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80023e0:	230f      	movs	r3, #15
 80023e2:	18fb      	adds	r3, r7, r3
 80023e4:	2200      	movs	r2, #0
 80023e6:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 80023e8:	230f      	movs	r3, #15
 80023ea:	18fb      	adds	r3, r7, r3
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d103      	bne.n	80023fa <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2221      	movs	r2, #33	@ 0x21
 80023f6:	2101      	movs	r1, #1
 80023f8:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80023fa:	230f      	movs	r3, #15
 80023fc:	18fb      	adds	r3, r7, r3
 80023fe:	781b      	ldrb	r3, [r3, #0]
}
 8002400:	0018      	movs	r0, r3
 8002402:	46bd      	mov	sp, r7
 8002404:	b004      	add	sp, #16
 8002406:	bdb0      	pop	{r4, r5, r7, pc}
 8002408:	ff8fffbf 	.word	0xff8fffbf

0800240c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800240c:	b5b0      	push	{r4, r5, r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002418:	2300      	movs	r3, #0
 800241a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2220      	movs	r2, #32
 8002420:	5c9b      	ldrb	r3, [r3, r2]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d101      	bne.n	800242a <HAL_RTC_SetTime+0x1e>
 8002426:	2302      	movs	r3, #2
 8002428:	e092      	b.n	8002550 <HAL_RTC_SetTime+0x144>
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2220      	movs	r2, #32
 800242e:	2101      	movs	r1, #1
 8002430:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2221      	movs	r2, #33	@ 0x21
 8002436:	2102      	movs	r1, #2
 8002438:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d125      	bne.n	800248c <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	2240      	movs	r2, #64	@ 0x40
 8002448:	4013      	ands	r3, r2
 800244a:	d102      	bne.n	8002452 <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	2200      	movs	r2, #0
 8002450:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	0018      	movs	r0, r3
 8002458:	f000 fb64 	bl	8002b24 <RTC_ByteToBcd2>
 800245c:	0003      	movs	r3, r0
 800245e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	785b      	ldrb	r3, [r3, #1]
 8002464:	0018      	movs	r0, r3
 8002466:	f000 fb5d 	bl	8002b24 <RTC_ByteToBcd2>
 800246a:	0003      	movs	r3, r0
 800246c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800246e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	789b      	ldrb	r3, [r3, #2]
 8002474:	0018      	movs	r0, r3
 8002476:	f000 fb55 	bl	8002b24 <RTC_ByteToBcd2>
 800247a:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800247c:	0022      	movs	r2, r4
 800247e:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	78db      	ldrb	r3, [r3, #3]
 8002484:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002486:	4313      	orrs	r3, r2
 8002488:	617b      	str	r3, [r7, #20]
 800248a:	e017      	b.n	80024bc <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	2240      	movs	r2, #64	@ 0x40
 8002494:	4013      	ands	r3, r2
 8002496:	d102      	bne.n	800249e <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	2200      	movs	r2, #0
 800249c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	785b      	ldrb	r3, [r3, #1]
 80024a8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80024aa:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80024ac:	68ba      	ldr	r2, [r7, #8]
 80024ae:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80024b0:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	78db      	ldrb	r3, [r3, #3]
 80024b6:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80024b8:	4313      	orrs	r3, r2
 80024ba:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	22ca      	movs	r2, #202	@ 0xca
 80024c2:	625a      	str	r2, [r3, #36]	@ 0x24
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2253      	movs	r2, #83	@ 0x53
 80024ca:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80024cc:	2513      	movs	r5, #19
 80024ce:	197c      	adds	r4, r7, r5
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	0018      	movs	r0, r3
 80024d4:	f000 fab8 	bl	8002a48 <RTC_EnterInitMode>
 80024d8:	0003      	movs	r3, r0
 80024da:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80024dc:	0028      	movs	r0, r5
 80024de:	183b      	adds	r3, r7, r0
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d120      	bne.n	8002528 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	697a      	ldr	r2, [r7, #20]
 80024ec:	491a      	ldr	r1, [pc, #104]	@ (8002558 <HAL_RTC_SetTime+0x14c>)
 80024ee:	400a      	ands	r2, r1
 80024f0:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4917      	ldr	r1, [pc, #92]	@ (800255c <HAL_RTC_SetTime+0x150>)
 80024fe:	400a      	ands	r2, r1
 8002500:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	6899      	ldr	r1, [r3, #8]
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	68da      	ldr	r2, [r3, #12]
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	691b      	ldr	r3, [r3, #16]
 8002510:	431a      	orrs	r2, r3
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	430a      	orrs	r2, r1
 8002518:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800251a:	183c      	adds	r4, r7, r0
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	0018      	movs	r0, r3
 8002520:	f000 fad6 	bl	8002ad0 <RTC_ExitInitMode>
 8002524:	0003      	movs	r3, r0
 8002526:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8002528:	2313      	movs	r3, #19
 800252a:	18fb      	adds	r3, r7, r3
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d103      	bne.n	800253a <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2221      	movs	r2, #33	@ 0x21
 8002536:	2101      	movs	r1, #1
 8002538:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	22ff      	movs	r2, #255	@ 0xff
 8002540:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2220      	movs	r2, #32
 8002546:	2100      	movs	r1, #0
 8002548:	5499      	strb	r1, [r3, r2]

  return status;
 800254a:	2313      	movs	r3, #19
 800254c:	18fb      	adds	r3, r7, r3
 800254e:	781b      	ldrb	r3, [r3, #0]
}
 8002550:	0018      	movs	r0, r3
 8002552:	46bd      	mov	sp, r7
 8002554:	b006      	add	sp, #24
 8002556:	bdb0      	pop	{r4, r5, r7, pc}
 8002558:	007f7f7f 	.word	0x007f7f7f
 800255c:	fffbffff 	.word	0xfffbffff

08002560 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002560:	b5b0      	push	{r4, r5, r7, lr}
 8002562:	b086      	sub	sp, #24
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800256c:	2300      	movs	r3, #0
 800256e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2220      	movs	r2, #32
 8002574:	5c9b      	ldrb	r3, [r3, r2]
 8002576:	2b01      	cmp	r3, #1
 8002578:	d101      	bne.n	800257e <HAL_RTC_SetDate+0x1e>
 800257a:	2302      	movs	r3, #2
 800257c:	e07e      	b.n	800267c <HAL_RTC_SetDate+0x11c>
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2220      	movs	r2, #32
 8002582:	2101      	movs	r1, #1
 8002584:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2221      	movs	r2, #33	@ 0x21
 800258a:	2102      	movs	r1, #2
 800258c:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d10e      	bne.n	80025b2 <HAL_RTC_SetDate+0x52>
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	785b      	ldrb	r3, [r3, #1]
 8002598:	001a      	movs	r2, r3
 800259a:	2310      	movs	r3, #16
 800259c:	4013      	ands	r3, r2
 800259e:	d008      	beq.n	80025b2 <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	785b      	ldrb	r3, [r3, #1]
 80025a4:	2210      	movs	r2, #16
 80025a6:	4393      	bics	r3, r2
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	330a      	adds	r3, #10
 80025ac:	b2da      	uxtb	r2, r3
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d11c      	bne.n	80025f2 <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	78db      	ldrb	r3, [r3, #3]
 80025bc:	0018      	movs	r0, r3
 80025be:	f000 fab1 	bl	8002b24 <RTC_ByteToBcd2>
 80025c2:	0003      	movs	r3, r0
 80025c4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	785b      	ldrb	r3, [r3, #1]
 80025ca:	0018      	movs	r0, r3
 80025cc:	f000 faaa 	bl	8002b24 <RTC_ByteToBcd2>
 80025d0:	0003      	movs	r3, r0
 80025d2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80025d4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	789b      	ldrb	r3, [r3, #2]
 80025da:	0018      	movs	r0, r3
 80025dc:	f000 faa2 	bl	8002b24 <RTC_ByteToBcd2>
 80025e0:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80025e2:	0022      	movs	r2, r4
 80025e4:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80025ec:	4313      	orrs	r3, r2
 80025ee:	617b      	str	r3, [r7, #20]
 80025f0:	e00e      	b.n	8002610 <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	78db      	ldrb	r3, [r3, #3]
 80025f6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	785b      	ldrb	r3, [r3, #1]
 80025fc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80025fe:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8002600:	68ba      	ldr	r2, [r7, #8]
 8002602:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002604:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800260c:	4313      	orrs	r3, r2
 800260e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	22ca      	movs	r2, #202	@ 0xca
 8002616:	625a      	str	r2, [r3, #36]	@ 0x24
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2253      	movs	r2, #83	@ 0x53
 800261e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002620:	2513      	movs	r5, #19
 8002622:	197c      	adds	r4, r7, r5
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	0018      	movs	r0, r3
 8002628:	f000 fa0e 	bl	8002a48 <RTC_EnterInitMode>
 800262c:	0003      	movs	r3, r0
 800262e:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8002630:	0028      	movs	r0, r5
 8002632:	183b      	adds	r3, r7, r0
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d10c      	bne.n	8002654 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	697a      	ldr	r2, [r7, #20]
 8002640:	4910      	ldr	r1, [pc, #64]	@ (8002684 <HAL_RTC_SetDate+0x124>)
 8002642:	400a      	ands	r2, r1
 8002644:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002646:	183c      	adds	r4, r7, r0
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	0018      	movs	r0, r3
 800264c:	f000 fa40 	bl	8002ad0 <RTC_ExitInitMode>
 8002650:	0003      	movs	r3, r0
 8002652:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8002654:	2313      	movs	r3, #19
 8002656:	18fb      	adds	r3, r7, r3
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d103      	bne.n	8002666 <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2221      	movs	r2, #33	@ 0x21
 8002662:	2101      	movs	r1, #1
 8002664:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	22ff      	movs	r2, #255	@ 0xff
 800266c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2220      	movs	r2, #32
 8002672:	2100      	movs	r1, #0
 8002674:	5499      	strb	r1, [r3, r2]

  return status;
 8002676:	2313      	movs	r3, #19
 8002678:	18fb      	adds	r3, r7, r3
 800267a:	781b      	ldrb	r3, [r3, #0]
}
 800267c:	0018      	movs	r0, r3
 800267e:	46bd      	mov	sp, r7
 8002680:	b006      	add	sp, #24
 8002682:	bdb0      	pop	{r4, r5, r7, pc}
 8002684:	00ffff3f 	.word	0x00ffff3f

08002688 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002688:	b590      	push	{r4, r7, lr}
 800268a:	b089      	sub	sp, #36	@ 0x24
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8002694:	4ba7      	ldr	r3, [pc, #668]	@ (8002934 <HAL_RTC_SetAlarm_IT+0x2ac>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	22fa      	movs	r2, #250	@ 0xfa
 800269a:	01d1      	lsls	r1, r2, #7
 800269c:	0018      	movs	r0, r3
 800269e:	f7fd fd33 	bl	8000108 <__udivsi3>
 80026a2:	0003      	movs	r3, r0
 80026a4:	001a      	movs	r2, r3
 80026a6:	0013      	movs	r3, r2
 80026a8:	015b      	lsls	r3, r3, #5
 80026aa:	1a9b      	subs	r3, r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	189b      	adds	r3, r3, r2
 80026b0:	00db      	lsls	r3, r3, #3
 80026b2:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 80026b4:	2300      	movs	r3, #0
 80026b6:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 80026b8:	2300      	movs	r3, #0
 80026ba:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2220      	movs	r2, #32
 80026c0:	5c9b      	ldrb	r3, [r3, r2]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d101      	bne.n	80026ca <HAL_RTC_SetAlarm_IT+0x42>
 80026c6:	2302      	movs	r3, #2
 80026c8:	e130      	b.n	800292c <HAL_RTC_SetAlarm_IT+0x2a4>
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2220      	movs	r2, #32
 80026ce:	2101      	movs	r1, #1
 80026d0:	5499      	strb	r1, [r3, r2]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2221      	movs	r2, #33	@ 0x21
 80026d6:	2102      	movs	r1, #2
 80026d8:	5499      	strb	r1, [r3, r2]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d136      	bne.n	800274e <HAL_RTC_SetAlarm_IT+0xc6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	2240      	movs	r2, #64	@ 0x40
 80026e8:	4013      	ands	r3, r2
 80026ea:	d102      	bne.n	80026f2 <HAL_RTC_SetAlarm_IT+0x6a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	2200      	movs	r2, #0
 80026f0:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	0018      	movs	r0, r3
 80026f8:	f000 fa14 	bl	8002b24 <RTC_ByteToBcd2>
 80026fc:	0003      	movs	r3, r0
 80026fe:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	785b      	ldrb	r3, [r3, #1]
 8002704:	0018      	movs	r0, r3
 8002706:	f000 fa0d 	bl	8002b24 <RTC_ByteToBcd2>
 800270a:	0003      	movs	r3, r0
 800270c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800270e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	789b      	ldrb	r3, [r3, #2]
 8002714:	0018      	movs	r0, r3
 8002716:	f000 fa05 	bl	8002b24 <RTC_ByteToBcd2>
 800271a:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800271c:	0022      	movs	r2, r4
 800271e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	78db      	ldrb	r3, [r3, #3]
 8002724:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8002726:	431a      	orrs	r2, r3
 8002728:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	2220      	movs	r2, #32
 800272e:	5c9b      	ldrb	r3, [r3, r2]
 8002730:	0018      	movs	r0, r3
 8002732:	f000 f9f7 	bl	8002b24 <RTC_ByteToBcd2>
 8002736:	0003      	movs	r3, r0
 8002738:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 800273a:	0022      	movs	r2, r4
 800273c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8002742:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8002748:	4313      	orrs	r3, r2
 800274a:	61fb      	str	r3, [r7, #28]
 800274c:	e022      	b.n	8002794 <HAL_RTC_SetAlarm_IT+0x10c>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	2240      	movs	r2, #64	@ 0x40
 8002756:	4013      	ands	r3, r2
 8002758:	d102      	bne.n	8002760 <HAL_RTC_SetAlarm_IT+0xd8>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	2200      	movs	r2, #0
 800275e:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	785b      	ldrb	r3, [r3, #1]
 800276a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800276c:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800276e:	68ba      	ldr	r2, [r7, #8]
 8002770:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8002772:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	78db      	ldrb	r3, [r3, #3]
 8002778:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800277a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	2120      	movs	r1, #32
 8002780:	5c5b      	ldrb	r3, [r3, r1]
 8002782:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 8002784:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800278a:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002790:	4313      	orrs	r3, r2
 8002792:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800279c:	4313      	orrs	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	22ca      	movs	r2, #202	@ 0xca
 80027a6:	625a      	str	r2, [r3, #36]	@ 0x24
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2253      	movs	r2, #83	@ 0x53
 80027ae:	625a      	str	r2, [r3, #36]	@ 0x24

  if (sAlarm->Alarm == RTC_ALARM_A)
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80027b4:	2380      	movs	r3, #128	@ 0x80
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d146      	bne.n	800284a <HAL_RTC_SetAlarm_IT+0x1c2>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	689a      	ldr	r2, [r3, #8]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	495c      	ldr	r1, [pc, #368]	@ (8002938 <HAL_RTC_SetAlarm_IT+0x2b0>)
 80027c8:	400a      	ands	r2, r1
 80027ca:	609a      	str	r2, [r3, #8]

    /* Clear Alarm A flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	22ff      	movs	r2, #255	@ 0xff
 80027d4:	401a      	ands	r2, r3
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4958      	ldr	r1, [pc, #352]	@ (800293c <HAL_RTC_SetAlarm_IT+0x2b4>)
 80027dc:	430a      	orrs	r2, r1
 80027de:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	3b01      	subs	r3, #1
 80027e4:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d10d      	bne.n	8002808 <HAL_RTC_SetAlarm_IT+0x180>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	22ff      	movs	r2, #255	@ 0xff
 80027f2:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2221      	movs	r2, #33	@ 0x21
 80027f8:	2103      	movs	r1, #3
 80027fa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2220      	movs	r2, #32
 8002800:	2100      	movs	r1, #0
 8002802:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e091      	b.n	800292c <HAL_RTC_SetAlarm_IT+0x2a4>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	2201      	movs	r2, #1
 8002810:	4013      	ands	r3, r2
 8002812:	d0e5      	beq.n	80027e0 <HAL_RTC_SetAlarm_IT+0x158>

  /* Configure Alarm A register */
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	69fa      	ldr	r2, [r7, #28]
 800281a:	61da      	str	r2, [r3, #28]
    /* Configure Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable Alarm A */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	689a      	ldr	r2, [r3, #8]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2180      	movs	r1, #128	@ 0x80
 8002830:	0049      	lsls	r1, r1, #1
 8002832:	430a      	orrs	r2, r1
 8002834:	609a      	str	r2, [r3, #8]
    /* Enable Alarm A interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	689a      	ldr	r2, [r3, #8]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2180      	movs	r1, #128	@ 0x80
 8002842:	0149      	lsls	r1, r1, #5
 8002844:	430a      	orrs	r2, r1
 8002846:	609a      	str	r2, [r3, #8]
 8002848:	e055      	b.n	80028f6 <HAL_RTC_SetAlarm_IT+0x26e>
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	689a      	ldr	r2, [r3, #8]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	493a      	ldr	r1, [pc, #232]	@ (8002940 <HAL_RTC_SetAlarm_IT+0x2b8>)
 8002856:	400a      	ands	r2, r1
 8002858:	609a      	str	r2, [r3, #8]

    /* Clear Alarm B flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	22ff      	movs	r2, #255	@ 0xff
 8002862:	401a      	ands	r2, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4936      	ldr	r1, [pc, #216]	@ (8002944 <HAL_RTC_SetAlarm_IT+0x2bc>)
 800286a:	430a      	orrs	r2, r1
 800286c:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800286e:	4b31      	ldr	r3, [pc, #196]	@ (8002934 <HAL_RTC_SetAlarm_IT+0x2ac>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	22fa      	movs	r2, #250	@ 0xfa
 8002874:	01d1      	lsls	r1, r2, #7
 8002876:	0018      	movs	r0, r3
 8002878:	f7fd fc46 	bl	8000108 <__udivsi3>
 800287c:	0003      	movs	r3, r0
 800287e:	001a      	movs	r2, r3
 8002880:	0013      	movs	r3, r2
 8002882:	015b      	lsls	r3, r3, #5
 8002884:	1a9b      	subs	r3, r3, r2
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	189b      	adds	r3, r3, r2
 800288a:	00db      	lsls	r3, r3, #3
 800288c:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	3b01      	subs	r3, #1
 8002892:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d10d      	bne.n	80028b6 <HAL_RTC_SetAlarm_IT+0x22e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	22ff      	movs	r2, #255	@ 0xff
 80028a0:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2221      	movs	r2, #33	@ 0x21
 80028a6:	2103      	movs	r1, #3
 80028a8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2220      	movs	r2, #32
 80028ae:	2100      	movs	r1, #0
 80028b0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e03a      	b.n	800292c <HAL_RTC_SetAlarm_IT+0x2a4>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	2202      	movs	r2, #2
 80028be:	4013      	ands	r3, r2
 80028c0:	d0e5      	beq.n	800288e <HAL_RTC_SetAlarm_IT+0x206>

    /* Configure Alarm B register */
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	69fa      	ldr	r2, [r7, #28]
 80028c8:	621a      	str	r2, [r3, #32]
    /* Configure Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Enable Alarm B */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	689a      	ldr	r2, [r3, #8]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2180      	movs	r1, #128	@ 0x80
 80028de:	0089      	lsls	r1, r1, #2
 80028e0:	430a      	orrs	r2, r1
 80028e2:	609a      	str	r2, [r3, #8]
    /* Enable Alarm B interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	689a      	ldr	r2, [r3, #8]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2180      	movs	r1, #128	@ 0x80
 80028f0:	0189      	lsls	r1, r1, #6
 80028f2:	430a      	orrs	r2, r1
 80028f4:	609a      	str	r2, [r3, #8]
  }

  /* Enable and configure the EXTI line associated to the RTC Alarm interrupt */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80028f6:	4b14      	ldr	r3, [pc, #80]	@ (8002948 <HAL_RTC_SetAlarm_IT+0x2c0>)
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	4b13      	ldr	r3, [pc, #76]	@ (8002948 <HAL_RTC_SetAlarm_IT+0x2c0>)
 80028fc:	2180      	movs	r1, #128	@ 0x80
 80028fe:	0289      	lsls	r1, r1, #10
 8002900:	430a      	orrs	r2, r1
 8002902:	601a      	str	r2, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8002904:	4b10      	ldr	r3, [pc, #64]	@ (8002948 <HAL_RTC_SetAlarm_IT+0x2c0>)
 8002906:	689a      	ldr	r2, [r3, #8]
 8002908:	4b0f      	ldr	r3, [pc, #60]	@ (8002948 <HAL_RTC_SetAlarm_IT+0x2c0>)
 800290a:	2180      	movs	r1, #128	@ 0x80
 800290c:	0289      	lsls	r1, r1, #10
 800290e:	430a      	orrs	r2, r1
 8002910:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	22ff      	movs	r2, #255	@ 0xff
 8002918:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2221      	movs	r2, #33	@ 0x21
 800291e:	2101      	movs	r1, #1
 8002920:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2220      	movs	r2, #32
 8002926:	2100      	movs	r1, #0
 8002928:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800292a:	2300      	movs	r3, #0
}
 800292c:	0018      	movs	r0, r3
 800292e:	46bd      	mov	sp, r7
 8002930:	b009      	add	sp, #36	@ 0x24
 8002932:	bd90      	pop	{r4, r7, pc}
 8002934:	20000000 	.word	0x20000000
 8002938:	fffffeff 	.word	0xfffffeff
 800293c:	fffffe7f 	.word	0xfffffe7f
 8002940:	fffffdff 	.word	0xfffffdff
 8002944:	fffffd7f 	.word	0xfffffd7f
 8002948:	40010400 	.word	0x40010400

0800294c <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI flag associated to the RTC Alarm interrupt */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002954:	4b21      	ldr	r3, [pc, #132]	@ (80029dc <HAL_RTC_AlarmIRQHandler+0x90>)
 8002956:	2280      	movs	r2, #128	@ 0x80
 8002958:	0292      	lsls	r2, r2, #10
 800295a:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	689a      	ldr	r2, [r3, #8]
 8002962:	2380      	movs	r3, #128	@ 0x80
 8002964:	015b      	lsls	r3, r3, #5
 8002966:	4013      	ands	r3, r2
 8002968:	d014      	beq.n	8002994 <HAL_RTC_AlarmIRQHandler+0x48>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	68da      	ldr	r2, [r3, #12]
 8002970:	2380      	movs	r3, #128	@ 0x80
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	4013      	ands	r3, r2
 8002976:	d00d      	beq.n	8002994 <HAL_RTC_AlarmIRQHandler+0x48>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	22ff      	movs	r2, #255	@ 0xff
 8002980:	401a      	ands	r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4916      	ldr	r1, [pc, #88]	@ (80029e0 <HAL_RTC_AlarmIRQHandler+0x94>)
 8002988:	430a      	orrs	r2, r1
 800298a:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	0018      	movs	r0, r3
 8002990:	f000 f82a 	bl	80029e8 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	689a      	ldr	r2, [r3, #8]
 800299a:	2380      	movs	r3, #128	@ 0x80
 800299c:	019b      	lsls	r3, r3, #6
 800299e:	4013      	ands	r3, r2
 80029a0:	d014      	beq.n	80029cc <HAL_RTC_AlarmIRQHandler+0x80>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68da      	ldr	r2, [r3, #12]
 80029a8:	2380      	movs	r3, #128	@ 0x80
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	4013      	ands	r3, r2
 80029ae:	d00d      	beq.n	80029cc <HAL_RTC_AlarmIRQHandler+0x80>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	22ff      	movs	r2, #255	@ 0xff
 80029b8:	401a      	ands	r2, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4909      	ldr	r1, [pc, #36]	@ (80029e4 <HAL_RTC_AlarmIRQHandler+0x98>)
 80029c0:	430a      	orrs	r2, r1
 80029c2:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	0018      	movs	r0, r3
 80029c8:	f000 f8cd 	bl	8002b66 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2221      	movs	r2, #33	@ 0x21
 80029d0:	2101      	movs	r1, #1
 80029d2:	5499      	strb	r1, [r3, r2]
}
 80029d4:	46c0      	nop			@ (mov r8, r8)
 80029d6:	46bd      	mov	sp, r7
 80029d8:	b002      	add	sp, #8
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	40010400 	.word	0x40010400
 80029e0:	fffffe7f 	.word	0xfffffe7f
 80029e4:	fffffd7f 	.word	0xfffffd7f

080029e8 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 80029f0:	46c0      	nop			@ (mov r8, r8)
 80029f2:	46bd      	mov	sp, r7
 80029f4:	b002      	add	sp, #8
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a00:	2300      	movs	r3, #0
 8002a02:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a0e      	ldr	r2, [pc, #56]	@ (8002a44 <HAL_RTC_WaitForSynchro+0x4c>)
 8002a0a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a0c:	f7fe f9ec 	bl	8000de8 <HAL_GetTick>
 8002a10:	0003      	movs	r3, r0
 8002a12:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002a14:	e00a      	b.n	8002a2c <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002a16:	f7fe f9e7 	bl	8000de8 <HAL_GetTick>
 8002a1a:	0002      	movs	r2, r0
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	1ad2      	subs	r2, r2, r3
 8002a20:	23fa      	movs	r3, #250	@ 0xfa
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d901      	bls.n	8002a2c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e006      	b.n	8002a3a <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	2220      	movs	r2, #32
 8002a34:	4013      	ands	r3, r2
 8002a36:	d0ee      	beq.n	8002a16 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	0018      	movs	r0, r3
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	b004      	add	sp, #16
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	46c0      	nop			@ (mov r8, r8)
 8002a44:	0001ff5f 	.word	0x0001ff5f

08002a48 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a50:	2300      	movs	r3, #0
 8002a52:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002a54:	230f      	movs	r3, #15
 8002a56:	18fb      	adds	r3, r7, r3
 8002a58:	2200      	movs	r2, #0
 8002a5a:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	2240      	movs	r2, #64	@ 0x40
 8002a64:	4013      	ands	r3, r2
 8002a66:	d12c      	bne.n	8002ac2 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68da      	ldr	r2, [r3, #12]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2180      	movs	r1, #128	@ 0x80
 8002a74:	430a      	orrs	r2, r1
 8002a76:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002a78:	f7fe f9b6 	bl	8000de8 <HAL_GetTick>
 8002a7c:	0003      	movs	r3, r0
 8002a7e:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002a80:	e014      	b.n	8002aac <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002a82:	f7fe f9b1 	bl	8000de8 <HAL_GetTick>
 8002a86:	0002      	movs	r2, r0
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	1ad2      	subs	r2, r2, r3
 8002a8c:	200f      	movs	r0, #15
 8002a8e:	183b      	adds	r3, r7, r0
 8002a90:	1839      	adds	r1, r7, r0
 8002a92:	7809      	ldrb	r1, [r1, #0]
 8002a94:	7019      	strb	r1, [r3, #0]
 8002a96:	23fa      	movs	r3, #250	@ 0xfa
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d906      	bls.n	8002aac <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2221      	movs	r2, #33	@ 0x21
 8002aa2:	2104      	movs	r1, #4
 8002aa4:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8002aa6:	183b      	adds	r3, r7, r0
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	2240      	movs	r2, #64	@ 0x40
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	d104      	bne.n	8002ac2 <RTC_EnterInitMode+0x7a>
 8002ab8:	230f      	movs	r3, #15
 8002aba:	18fb      	adds	r3, r7, r3
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d1df      	bne.n	8002a82 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8002ac2:	230f      	movs	r3, #15
 8002ac4:	18fb      	adds	r3, r7, r3
 8002ac6:	781b      	ldrb	r3, [r3, #0]
}
 8002ac8:	0018      	movs	r0, r3
 8002aca:	46bd      	mov	sp, r7
 8002acc:	b004      	add	sp, #16
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002ad0:	b590      	push	{r4, r7, lr}
 8002ad2:	b085      	sub	sp, #20
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ad8:	240f      	movs	r4, #15
 8002ada:	193b      	adds	r3, r7, r4
 8002adc:	2200      	movs	r2, #0
 8002ade:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68da      	ldr	r2, [r3, #12]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2180      	movs	r1, #128	@ 0x80
 8002aec:	438a      	bics	r2, r1
 8002aee:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	2220      	movs	r2, #32
 8002af8:	4013      	ands	r3, r2
 8002afa:	d10c      	bne.n	8002b16 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	0018      	movs	r0, r3
 8002b00:	f7ff ff7a 	bl	80029f8 <HAL_RTC_WaitForSynchro>
 8002b04:	1e03      	subs	r3, r0, #0
 8002b06:	d006      	beq.n	8002b16 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2221      	movs	r2, #33	@ 0x21
 8002b0c:	2104      	movs	r1, #4
 8002b0e:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8002b10:	193b      	adds	r3, r7, r4
 8002b12:	2201      	movs	r2, #1
 8002b14:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8002b16:	230f      	movs	r3, #15
 8002b18:	18fb      	adds	r3, r7, r3
 8002b1a:	781b      	ldrb	r3, [r3, #0]
}
 8002b1c:	0018      	movs	r0, r3
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	b005      	add	sp, #20
 8002b22:	bd90      	pop	{r4, r7, pc}

08002b24 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	0002      	movs	r2, r0
 8002b2c:	1dfb      	adds	r3, r7, #7
 8002b2e:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8002b30:	2300      	movs	r3, #0
 8002b32:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8002b34:	e007      	b.n	8002b46 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	3301      	adds	r3, #1
 8002b3a:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8002b3c:	1dfb      	adds	r3, r7, #7
 8002b3e:	1dfa      	adds	r2, r7, #7
 8002b40:	7812      	ldrb	r2, [r2, #0]
 8002b42:	3a0a      	subs	r2, #10
 8002b44:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 8002b46:	1dfb      	adds	r3, r7, #7
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	2b09      	cmp	r3, #9
 8002b4c:	d8f3      	bhi.n	8002b36 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	011b      	lsls	r3, r3, #4
 8002b54:	b2da      	uxtb	r2, r3
 8002b56:	1dfb      	adds	r3, r7, #7
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	b2db      	uxtb	r3, r3
}
 8002b5e:	0018      	movs	r0, r3
 8002b60:	46bd      	mov	sp, r7
 8002b62:	b004      	add	sp, #16
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b082      	sub	sp, #8
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8002b6e:	46c0      	nop			@ (mov r8, r8)
 8002b70:	46bd      	mov	sp, r7
 8002b72:	b002      	add	sp, #8
 8002b74:	bd80      	pop	{r7, pc}
	...

08002b78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d101      	bne.n	8002b8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e083      	b.n	8002c92 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d109      	bne.n	8002ba6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685a      	ldr	r2, [r3, #4]
 8002b96:	2382      	movs	r3, #130	@ 0x82
 8002b98:	005b      	lsls	r3, r3, #1
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d009      	beq.n	8002bb2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	61da      	str	r2, [r3, #28]
 8002ba4:	e005      	b.n	8002bb2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2251      	movs	r2, #81	@ 0x51
 8002bbc:	5c9b      	ldrb	r3, [r3, r2]
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d107      	bne.n	8002bd4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2250      	movs	r2, #80	@ 0x50
 8002bc8:	2100      	movs	r1, #0
 8002bca:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	0018      	movs	r0, r3
 8002bd0:	f7fd ff4e 	bl	8000a70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2251      	movs	r2, #81	@ 0x51
 8002bd8:	2102      	movs	r1, #2
 8002bda:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2140      	movs	r1, #64	@ 0x40
 8002be8:	438a      	bics	r2, r1
 8002bea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685a      	ldr	r2, [r3, #4]
 8002bf0:	2382      	movs	r3, #130	@ 0x82
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	401a      	ands	r2, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6899      	ldr	r1, [r3, #8]
 8002bfa:	2384      	movs	r3, #132	@ 0x84
 8002bfc:	021b      	lsls	r3, r3, #8
 8002bfe:	400b      	ands	r3, r1
 8002c00:	431a      	orrs	r2, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	68d9      	ldr	r1, [r3, #12]
 8002c06:	2380      	movs	r3, #128	@ 0x80
 8002c08:	011b      	lsls	r3, r3, #4
 8002c0a:	400b      	ands	r3, r1
 8002c0c:	431a      	orrs	r2, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	2102      	movs	r1, #2
 8002c14:	400b      	ands	r3, r1
 8002c16:	431a      	orrs	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	695b      	ldr	r3, [r3, #20]
 8002c1c:	2101      	movs	r1, #1
 8002c1e:	400b      	ands	r3, r1
 8002c20:	431a      	orrs	r2, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6999      	ldr	r1, [r3, #24]
 8002c26:	2380      	movs	r3, #128	@ 0x80
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	400b      	ands	r3, r1
 8002c2c:	431a      	orrs	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	69db      	ldr	r3, [r3, #28]
 8002c32:	2138      	movs	r1, #56	@ 0x38
 8002c34:	400b      	ands	r3, r1
 8002c36:	431a      	orrs	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a1b      	ldr	r3, [r3, #32]
 8002c3c:	2180      	movs	r1, #128	@ 0x80
 8002c3e:	400b      	ands	r3, r1
 8002c40:	431a      	orrs	r2, r3
 8002c42:	0011      	movs	r1, r2
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c48:	2380      	movs	r3, #128	@ 0x80
 8002c4a:	019b      	lsls	r3, r3, #6
 8002c4c:	401a      	ands	r2, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	430a      	orrs	r2, r1
 8002c54:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	0c1b      	lsrs	r3, r3, #16
 8002c5c:	2204      	movs	r2, #4
 8002c5e:	4013      	ands	r3, r2
 8002c60:	0019      	movs	r1, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c66:	2210      	movs	r2, #16
 8002c68:	401a      	ands	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	69da      	ldr	r2, [r3, #28]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4907      	ldr	r1, [pc, #28]	@ (8002c9c <HAL_SPI_Init+0x124>)
 8002c7e:	400a      	ands	r2, r1
 8002c80:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2251      	movs	r2, #81	@ 0x51
 8002c8c:	2101      	movs	r1, #1
 8002c8e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	0018      	movs	r0, r3
 8002c94:	46bd      	mov	sp, r7
 8002c96:	b002      	add	sp, #8
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	46c0      	nop			@ (mov r8, r8)
 8002c9c:	fffff7ff 	.word	0xfffff7ff

08002ca0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e032      	b.n	8002d18 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2239      	movs	r2, #57	@ 0x39
 8002cb6:	5c9b      	ldrb	r3, [r3, r2]
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d107      	bne.n	8002cce <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2238      	movs	r2, #56	@ 0x38
 8002cc2:	2100      	movs	r1, #0
 8002cc4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	0018      	movs	r0, r3
 8002cca:	f7fd ff37 	bl	8000b3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2239      	movs	r2, #57	@ 0x39
 8002cd2:	2102      	movs	r1, #2
 8002cd4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	3304      	adds	r3, #4
 8002cde:	0019      	movs	r1, r3
 8002ce0:	0010      	movs	r0, r2
 8002ce2:	f000 f9e5 	bl	80030b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	223e      	movs	r2, #62	@ 0x3e
 8002cea:	2101      	movs	r1, #1
 8002cec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	223a      	movs	r2, #58	@ 0x3a
 8002cf2:	2101      	movs	r1, #1
 8002cf4:	5499      	strb	r1, [r3, r2]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	223b      	movs	r2, #59	@ 0x3b
 8002cfa:	2101      	movs	r1, #1
 8002cfc:	5499      	strb	r1, [r3, r2]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	223c      	movs	r2, #60	@ 0x3c
 8002d02:	2101      	movs	r1, #1
 8002d04:	5499      	strb	r1, [r3, r2]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	223d      	movs	r2, #61	@ 0x3d
 8002d0a:	2101      	movs	r1, #1
 8002d0c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2239      	movs	r2, #57	@ 0x39
 8002d12:	2101      	movs	r1, #1
 8002d14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	0018      	movs	r0, r3
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	b002      	add	sp, #8
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	2202      	movs	r2, #2
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	d021      	beq.n	8002d84 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2202      	movs	r2, #2
 8002d44:	4013      	ands	r3, r2
 8002d46:	d01d      	beq.n	8002d84 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2203      	movs	r2, #3
 8002d4e:	4252      	negs	r2, r2
 8002d50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	2203      	movs	r2, #3
 8002d60:	4013      	ands	r3, r2
 8002d62:	d004      	beq.n	8002d6e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	0018      	movs	r0, r3
 8002d68:	f000 f98a 	bl	8003080 <HAL_TIM_IC_CaptureCallback>
 8002d6c:	e007      	b.n	8002d7e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	0018      	movs	r0, r3
 8002d72:	f000 f97d 	bl	8003070 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	0018      	movs	r0, r3
 8002d7a:	f000 f989 	bl	8003090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	2204      	movs	r2, #4
 8002d88:	4013      	ands	r3, r2
 8002d8a:	d022      	beq.n	8002dd2 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2204      	movs	r2, #4
 8002d90:	4013      	ands	r3, r2
 8002d92:	d01e      	beq.n	8002dd2 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2205      	movs	r2, #5
 8002d9a:	4252      	negs	r2, r2
 8002d9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2202      	movs	r2, #2
 8002da2:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	699a      	ldr	r2, [r3, #24]
 8002daa:	23c0      	movs	r3, #192	@ 0xc0
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	4013      	ands	r3, r2
 8002db0:	d004      	beq.n	8002dbc <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	0018      	movs	r0, r3
 8002db6:	f000 f963 	bl	8003080 <HAL_TIM_IC_CaptureCallback>
 8002dba:	e007      	b.n	8002dcc <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	0018      	movs	r0, r3
 8002dc0:	f000 f956 	bl	8003070 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	0018      	movs	r0, r3
 8002dc8:	f000 f962 	bl	8003090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	2208      	movs	r2, #8
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	d021      	beq.n	8002e1e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2208      	movs	r2, #8
 8002dde:	4013      	ands	r3, r2
 8002de0:	d01d      	beq.n	8002e1e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2209      	movs	r2, #9
 8002de8:	4252      	negs	r2, r2
 8002dea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2204      	movs	r2, #4
 8002df0:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	69db      	ldr	r3, [r3, #28]
 8002df8:	2203      	movs	r2, #3
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	d004      	beq.n	8002e08 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	0018      	movs	r0, r3
 8002e02:	f000 f93d 	bl	8003080 <HAL_TIM_IC_CaptureCallback>
 8002e06:	e007      	b.n	8002e18 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	0018      	movs	r0, r3
 8002e0c:	f000 f930 	bl	8003070 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	0018      	movs	r0, r3
 8002e14:	f000 f93c 	bl	8003090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	2210      	movs	r2, #16
 8002e22:	4013      	ands	r3, r2
 8002e24:	d022      	beq.n	8002e6c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2210      	movs	r2, #16
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	d01e      	beq.n	8002e6c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2211      	movs	r2, #17
 8002e34:	4252      	negs	r2, r2
 8002e36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2208      	movs	r2, #8
 8002e3c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	69da      	ldr	r2, [r3, #28]
 8002e44:	23c0      	movs	r3, #192	@ 0xc0
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	4013      	ands	r3, r2
 8002e4a:	d004      	beq.n	8002e56 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	0018      	movs	r0, r3
 8002e50:	f000 f916 	bl	8003080 <HAL_TIM_IC_CaptureCallback>
 8002e54:	e007      	b.n	8002e66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	0018      	movs	r0, r3
 8002e5a:	f000 f909 	bl	8003070 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	0018      	movs	r0, r3
 8002e62:	f000 f915 	bl	8003090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	4013      	ands	r3, r2
 8002e72:	d00c      	beq.n	8002e8e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2201      	movs	r2, #1
 8002e78:	4013      	ands	r3, r2
 8002e7a:	d008      	beq.n	8002e8e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2202      	movs	r2, #2
 8002e82:	4252      	negs	r2, r2
 8002e84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	0018      	movs	r0, r3
 8002e8a:	f000 f8e9 	bl	8003060 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	2240      	movs	r2, #64	@ 0x40
 8002e92:	4013      	ands	r3, r2
 8002e94:	d00c      	beq.n	8002eb0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2240      	movs	r2, #64	@ 0x40
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	d008      	beq.n	8002eb0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2241      	movs	r2, #65	@ 0x41
 8002ea4:	4252      	negs	r2, r2
 8002ea6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	0018      	movs	r0, r3
 8002eac:	f000 f8f8 	bl	80030a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002eb0:	46c0      	nop			@ (mov r8, r8)
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	b004      	add	sp, #16
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ec2:	230f      	movs	r3, #15
 8002ec4:	18fb      	adds	r3, r7, r3
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2238      	movs	r2, #56	@ 0x38
 8002ece:	5c9b      	ldrb	r3, [r3, r2]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d101      	bne.n	8002ed8 <HAL_TIM_ConfigClockSource+0x20>
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	e0bc      	b.n	8003052 <HAL_TIM_ConfigClockSource+0x19a>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2238      	movs	r2, #56	@ 0x38
 8002edc:	2101      	movs	r1, #1
 8002ede:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2239      	movs	r2, #57	@ 0x39
 8002ee4:	2102      	movs	r1, #2
 8002ee6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	2277      	movs	r2, #119	@ 0x77
 8002ef4:	4393      	bics	r3, r2
 8002ef6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	4a58      	ldr	r2, [pc, #352]	@ (800305c <HAL_TIM_ConfigClockSource+0x1a4>)
 8002efc:	4013      	ands	r3, r2
 8002efe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68ba      	ldr	r2, [r7, #8]
 8002f06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2280      	movs	r2, #128	@ 0x80
 8002f0e:	0192      	lsls	r2, r2, #6
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d040      	beq.n	8002f96 <HAL_TIM_ConfigClockSource+0xde>
 8002f14:	2280      	movs	r2, #128	@ 0x80
 8002f16:	0192      	lsls	r2, r2, #6
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d900      	bls.n	8002f1e <HAL_TIM_ConfigClockSource+0x66>
 8002f1c:	e088      	b.n	8003030 <HAL_TIM_ConfigClockSource+0x178>
 8002f1e:	2280      	movs	r2, #128	@ 0x80
 8002f20:	0152      	lsls	r2, r2, #5
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d100      	bne.n	8002f28 <HAL_TIM_ConfigClockSource+0x70>
 8002f26:	e088      	b.n	800303a <HAL_TIM_ConfigClockSource+0x182>
 8002f28:	2280      	movs	r2, #128	@ 0x80
 8002f2a:	0152      	lsls	r2, r2, #5
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d900      	bls.n	8002f32 <HAL_TIM_ConfigClockSource+0x7a>
 8002f30:	e07e      	b.n	8003030 <HAL_TIM_ConfigClockSource+0x178>
 8002f32:	2b70      	cmp	r3, #112	@ 0x70
 8002f34:	d018      	beq.n	8002f68 <HAL_TIM_ConfigClockSource+0xb0>
 8002f36:	d900      	bls.n	8002f3a <HAL_TIM_ConfigClockSource+0x82>
 8002f38:	e07a      	b.n	8003030 <HAL_TIM_ConfigClockSource+0x178>
 8002f3a:	2b60      	cmp	r3, #96	@ 0x60
 8002f3c:	d04f      	beq.n	8002fde <HAL_TIM_ConfigClockSource+0x126>
 8002f3e:	d900      	bls.n	8002f42 <HAL_TIM_ConfigClockSource+0x8a>
 8002f40:	e076      	b.n	8003030 <HAL_TIM_ConfigClockSource+0x178>
 8002f42:	2b50      	cmp	r3, #80	@ 0x50
 8002f44:	d03b      	beq.n	8002fbe <HAL_TIM_ConfigClockSource+0x106>
 8002f46:	d900      	bls.n	8002f4a <HAL_TIM_ConfigClockSource+0x92>
 8002f48:	e072      	b.n	8003030 <HAL_TIM_ConfigClockSource+0x178>
 8002f4a:	2b40      	cmp	r3, #64	@ 0x40
 8002f4c:	d057      	beq.n	8002ffe <HAL_TIM_ConfigClockSource+0x146>
 8002f4e:	d900      	bls.n	8002f52 <HAL_TIM_ConfigClockSource+0x9a>
 8002f50:	e06e      	b.n	8003030 <HAL_TIM_ConfigClockSource+0x178>
 8002f52:	2b30      	cmp	r3, #48	@ 0x30
 8002f54:	d063      	beq.n	800301e <HAL_TIM_ConfigClockSource+0x166>
 8002f56:	d86b      	bhi.n	8003030 <HAL_TIM_ConfigClockSource+0x178>
 8002f58:	2b20      	cmp	r3, #32
 8002f5a:	d060      	beq.n	800301e <HAL_TIM_ConfigClockSource+0x166>
 8002f5c:	d868      	bhi.n	8003030 <HAL_TIM_ConfigClockSource+0x178>
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d05d      	beq.n	800301e <HAL_TIM_ConfigClockSource+0x166>
 8002f62:	2b10      	cmp	r3, #16
 8002f64:	d05b      	beq.n	800301e <HAL_TIM_ConfigClockSource+0x166>
 8002f66:	e063      	b.n	8003030 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f78:	f000 f978 	bl	800326c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	2277      	movs	r2, #119	@ 0x77
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	68ba      	ldr	r2, [r7, #8]
 8002f92:	609a      	str	r2, [r3, #8]
      break;
 8002f94:	e052      	b.n	800303c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002fa6:	f000 f961 	bl	800326c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	689a      	ldr	r2, [r3, #8]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2180      	movs	r1, #128	@ 0x80
 8002fb6:	01c9      	lsls	r1, r1, #7
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	609a      	str	r2, [r3, #8]
      break;
 8002fbc:	e03e      	b.n	800303c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fca:	001a      	movs	r2, r3
 8002fcc:	f000 f8d4 	bl	8003178 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2150      	movs	r1, #80	@ 0x50
 8002fd6:	0018      	movs	r0, r3
 8002fd8:	f000 f92e 	bl	8003238 <TIM_ITRx_SetConfig>
      break;
 8002fdc:	e02e      	b.n	800303c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fea:	001a      	movs	r2, r3
 8002fec:	f000 f8f2 	bl	80031d4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2160      	movs	r1, #96	@ 0x60
 8002ff6:	0018      	movs	r0, r3
 8002ff8:	f000 f91e 	bl	8003238 <TIM_ITRx_SetConfig>
      break;
 8002ffc:	e01e      	b.n	800303c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800300a:	001a      	movs	r2, r3
 800300c:	f000 f8b4 	bl	8003178 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2140      	movs	r1, #64	@ 0x40
 8003016:	0018      	movs	r0, r3
 8003018:	f000 f90e 	bl	8003238 <TIM_ITRx_SetConfig>
      break;
 800301c:	e00e      	b.n	800303c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	0019      	movs	r1, r3
 8003028:	0010      	movs	r0, r2
 800302a:	f000 f905 	bl	8003238 <TIM_ITRx_SetConfig>
      break;
 800302e:	e005      	b.n	800303c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003030:	230f      	movs	r3, #15
 8003032:	18fb      	adds	r3, r7, r3
 8003034:	2201      	movs	r2, #1
 8003036:	701a      	strb	r2, [r3, #0]
      break;
 8003038:	e000      	b.n	800303c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800303a:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2239      	movs	r2, #57	@ 0x39
 8003040:	2101      	movs	r1, #1
 8003042:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2238      	movs	r2, #56	@ 0x38
 8003048:	2100      	movs	r1, #0
 800304a:	5499      	strb	r1, [r3, r2]

  return status;
 800304c:	230f      	movs	r3, #15
 800304e:	18fb      	adds	r3, r7, r3
 8003050:	781b      	ldrb	r3, [r3, #0]
}
 8003052:	0018      	movs	r0, r3
 8003054:	46bd      	mov	sp, r7
 8003056:	b004      	add	sp, #16
 8003058:	bd80      	pop	{r7, pc}
 800305a:	46c0      	nop			@ (mov r8, r8)
 800305c:	ffff00ff 	.word	0xffff00ff

08003060 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003068:	46c0      	nop			@ (mov r8, r8)
 800306a:	46bd      	mov	sp, r7
 800306c:	b002      	add	sp, #8
 800306e:	bd80      	pop	{r7, pc}

08003070 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003078:	46c0      	nop			@ (mov r8, r8)
 800307a:	46bd      	mov	sp, r7
 800307c:	b002      	add	sp, #8
 800307e:	bd80      	pop	{r7, pc}

08003080 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003088:	46c0      	nop			@ (mov r8, r8)
 800308a:	46bd      	mov	sp, r7
 800308c:	b002      	add	sp, #8
 800308e:	bd80      	pop	{r7, pc}

08003090 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003098:	46c0      	nop			@ (mov r8, r8)
 800309a:	46bd      	mov	sp, r7
 800309c:	b002      	add	sp, #8
 800309e:	bd80      	pop	{r7, pc}

080030a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030a8:	46c0      	nop			@ (mov r8, r8)
 80030aa:	46bd      	mov	sp, r7
 80030ac:	b002      	add	sp, #8
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	2380      	movs	r3, #128	@ 0x80
 80030c4:	05db      	lsls	r3, r3, #23
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d00b      	beq.n	80030e2 <TIM_Base_SetConfig+0x32>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a26      	ldr	r2, [pc, #152]	@ (8003168 <TIM_Base_SetConfig+0xb8>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d007      	beq.n	80030e2 <TIM_Base_SetConfig+0x32>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a25      	ldr	r2, [pc, #148]	@ (800316c <TIM_Base_SetConfig+0xbc>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d003      	beq.n	80030e2 <TIM_Base_SetConfig+0x32>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a24      	ldr	r2, [pc, #144]	@ (8003170 <TIM_Base_SetConfig+0xc0>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d108      	bne.n	80030f4 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2270      	movs	r2, #112	@ 0x70
 80030e6:	4393      	bics	r3, r2
 80030e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	2380      	movs	r3, #128	@ 0x80
 80030f8:	05db      	lsls	r3, r3, #23
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d00b      	beq.n	8003116 <TIM_Base_SetConfig+0x66>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a19      	ldr	r2, [pc, #100]	@ (8003168 <TIM_Base_SetConfig+0xb8>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d007      	beq.n	8003116 <TIM_Base_SetConfig+0x66>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a18      	ldr	r2, [pc, #96]	@ (800316c <TIM_Base_SetConfig+0xbc>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d003      	beq.n	8003116 <TIM_Base_SetConfig+0x66>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a17      	ldr	r2, [pc, #92]	@ (8003170 <TIM_Base_SetConfig+0xc0>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d108      	bne.n	8003128 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	4a16      	ldr	r2, [pc, #88]	@ (8003174 <TIM_Base_SetConfig+0xc4>)
 800311a:	4013      	ands	r3, r2
 800311c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	68fa      	ldr	r2, [r7, #12]
 8003124:	4313      	orrs	r3, r2
 8003126:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2280      	movs	r2, #128	@ 0x80
 800312c:	4393      	bics	r3, r2
 800312e:	001a      	movs	r2, r3
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	4313      	orrs	r3, r2
 8003136:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	689a      	ldr	r2, [r3, #8]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2204      	movs	r2, #4
 800314e:	431a      	orrs	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	68fa      	ldr	r2, [r7, #12]
 800315e:	601a      	str	r2, [r3, #0]
}
 8003160:	46c0      	nop			@ (mov r8, r8)
 8003162:	46bd      	mov	sp, r7
 8003164:	b004      	add	sp, #16
 8003166:	bd80      	pop	{r7, pc}
 8003168:	40000400 	.word	0x40000400
 800316c:	40010800 	.word	0x40010800
 8003170:	40011400 	.word	0x40011400
 8003174:	fffffcff 	.word	0xfffffcff

08003178 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b086      	sub	sp, #24
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6a1b      	ldr	r3, [r3, #32]
 8003188:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	2201      	movs	r2, #1
 8003190:	4393      	bics	r3, r2
 8003192:	001a      	movs	r2, r3
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	22f0      	movs	r2, #240	@ 0xf0
 80031a2:	4393      	bics	r3, r2
 80031a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	011b      	lsls	r3, r3, #4
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	220a      	movs	r2, #10
 80031b4:	4393      	bics	r3, r2
 80031b6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80031b8:	697a      	ldr	r2, [r7, #20]
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	4313      	orrs	r3, r2
 80031be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	697a      	ldr	r2, [r7, #20]
 80031ca:	621a      	str	r2, [r3, #32]
}
 80031cc:	46c0      	nop			@ (mov r8, r8)
 80031ce:	46bd      	mov	sp, r7
 80031d0:	b006      	add	sp, #24
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b086      	sub	sp, #24
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6a1b      	ldr	r3, [r3, #32]
 80031e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6a1b      	ldr	r3, [r3, #32]
 80031ea:	2210      	movs	r2, #16
 80031ec:	4393      	bics	r3, r2
 80031ee:	001a      	movs	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	699b      	ldr	r3, [r3, #24]
 80031f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	4a0d      	ldr	r2, [pc, #52]	@ (8003234 <TIM_TI2_ConfigInputStage+0x60>)
 80031fe:	4013      	ands	r3, r2
 8003200:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	031b      	lsls	r3, r3, #12
 8003206:	693a      	ldr	r2, [r7, #16]
 8003208:	4313      	orrs	r3, r2
 800320a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	22a0      	movs	r2, #160	@ 0xa0
 8003210:	4393      	bics	r3, r2
 8003212:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	011b      	lsls	r3, r3, #4
 8003218:	697a      	ldr	r2, [r7, #20]
 800321a:	4313      	orrs	r3, r2
 800321c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	693a      	ldr	r2, [r7, #16]
 8003222:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	697a      	ldr	r2, [r7, #20]
 8003228:	621a      	str	r2, [r3, #32]
}
 800322a:	46c0      	nop			@ (mov r8, r8)
 800322c:	46bd      	mov	sp, r7
 800322e:	b006      	add	sp, #24
 8003230:	bd80      	pop	{r7, pc}
 8003232:	46c0      	nop			@ (mov r8, r8)
 8003234:	ffff0fff 	.word	0xffff0fff

08003238 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2270      	movs	r2, #112	@ 0x70
 800324c:	4393      	bics	r3, r2
 800324e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003250:	683a      	ldr	r2, [r7, #0]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	4313      	orrs	r3, r2
 8003256:	2207      	movs	r2, #7
 8003258:	4313      	orrs	r3, r2
 800325a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	609a      	str	r2, [r3, #8]
}
 8003262:	46c0      	nop			@ (mov r8, r8)
 8003264:	46bd      	mov	sp, r7
 8003266:	b004      	add	sp, #16
 8003268:	bd80      	pop	{r7, pc}
	...

0800326c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]
 8003278:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	4a09      	ldr	r2, [pc, #36]	@ (80032a8 <TIM_ETR_SetConfig+0x3c>)
 8003284:	4013      	ands	r3, r2
 8003286:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	021a      	lsls	r2, r3, #8
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	431a      	orrs	r2, r3
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	4313      	orrs	r3, r2
 8003294:	697a      	ldr	r2, [r7, #20]
 8003296:	4313      	orrs	r3, r2
 8003298:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	697a      	ldr	r2, [r7, #20]
 800329e:	609a      	str	r2, [r3, #8]
}
 80032a0:	46c0      	nop			@ (mov r8, r8)
 80032a2:	46bd      	mov	sp, r7
 80032a4:	b006      	add	sp, #24
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	ffff00ff 	.word	0xffff00ff

080032ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2238      	movs	r2, #56	@ 0x38
 80032ba:	5c9b      	ldrb	r3, [r3, r2]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d101      	bne.n	80032c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032c0:	2302      	movs	r3, #2
 80032c2:	e047      	b.n	8003354 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2238      	movs	r2, #56	@ 0x38
 80032c8:	2101      	movs	r1, #1
 80032ca:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2239      	movs	r2, #57	@ 0x39
 80032d0:	2102      	movs	r1, #2
 80032d2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2270      	movs	r2, #112	@ 0x70
 80032e8:	4393      	bics	r3, r2
 80032ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	2380      	movs	r3, #128	@ 0x80
 8003304:	05db      	lsls	r3, r3, #23
 8003306:	429a      	cmp	r2, r3
 8003308:	d00e      	beq.n	8003328 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a13      	ldr	r2, [pc, #76]	@ (800335c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d009      	beq.n	8003328 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a11      	ldr	r2, [pc, #68]	@ (8003360 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d004      	beq.n	8003328 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a10      	ldr	r2, [pc, #64]	@ (8003364 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d10c      	bne.n	8003342 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	2280      	movs	r2, #128	@ 0x80
 800332c:	4393      	bics	r3, r2
 800332e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	68ba      	ldr	r2, [r7, #8]
 8003336:	4313      	orrs	r3, r2
 8003338:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68ba      	ldr	r2, [r7, #8]
 8003340:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2239      	movs	r2, #57	@ 0x39
 8003346:	2101      	movs	r1, #1
 8003348:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2238      	movs	r2, #56	@ 0x38
 800334e:	2100      	movs	r1, #0
 8003350:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003352:	2300      	movs	r3, #0
}
 8003354:	0018      	movs	r0, r3
 8003356:	46bd      	mov	sp, r7
 8003358:	b004      	add	sp, #16
 800335a:	bd80      	pop	{r7, pc}
 800335c:	40000400 	.word	0x40000400
 8003360:	40010800 	.word	0x40010800
 8003364:	40011400 	.word	0x40011400

08003368 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d101      	bne.n	800337a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e044      	b.n	8003404 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800337e:	2b00      	cmp	r3, #0
 8003380:	d107      	bne.n	8003392 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2278      	movs	r2, #120	@ 0x78
 8003386:	2100      	movs	r1, #0
 8003388:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	0018      	movs	r0, r3
 800338e:	f7fd fbf3 	bl	8000b78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2224      	movs	r2, #36	@ 0x24
 8003396:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2101      	movs	r1, #1
 80033a4:	438a      	bics	r2, r1
 80033a6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d003      	beq.n	80033b8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	0018      	movs	r0, r3
 80033b4:	f000 fde6 	bl	8003f84 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	0018      	movs	r0, r3
 80033bc:	f000 fb44 	bl	8003a48 <UART_SetConfig>
 80033c0:	0003      	movs	r3, r0
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d101      	bne.n	80033ca <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e01c      	b.n	8003404 <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	685a      	ldr	r2, [r3, #4]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	490d      	ldr	r1, [pc, #52]	@ (800340c <HAL_UART_Init+0xa4>)
 80033d6:	400a      	ands	r2, r1
 80033d8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	689a      	ldr	r2, [r3, #8]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	212a      	movs	r1, #42	@ 0x2a
 80033e6:	438a      	bics	r2, r1
 80033e8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2101      	movs	r1, #1
 80033f6:	430a      	orrs	r2, r1
 80033f8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	0018      	movs	r0, r3
 80033fe:	f000 fe75 	bl	80040ec <UART_CheckIdleState>
 8003402:	0003      	movs	r3, r0
}
 8003404:	0018      	movs	r0, r3
 8003406:	46bd      	mov	sp, r7
 8003408:	b002      	add	sp, #8
 800340a:	bd80      	pop	{r7, pc}
 800340c:	ffffb7ff 	.word	0xffffb7ff

08003410 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003410:	b590      	push	{r4, r7, lr}
 8003412:	b0ab      	sub	sp, #172	@ 0xac
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	69db      	ldr	r3, [r3, #28]
 800341e:	22a4      	movs	r2, #164	@ 0xa4
 8003420:	18b9      	adds	r1, r7, r2
 8003422:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	20a0      	movs	r0, #160	@ 0xa0
 800342c:	1839      	adds	r1, r7, r0
 800342e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	219c      	movs	r1, #156	@ 0x9c
 8003438:	1879      	adds	r1, r7, r1
 800343a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800343c:	0011      	movs	r1, r2
 800343e:	18bb      	adds	r3, r7, r2
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a99      	ldr	r2, [pc, #612]	@ (80036a8 <HAL_UART_IRQHandler+0x298>)
 8003444:	4013      	ands	r3, r2
 8003446:	2298      	movs	r2, #152	@ 0x98
 8003448:	18bc      	adds	r4, r7, r2
 800344a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800344c:	18bb      	adds	r3, r7, r2
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d114      	bne.n	800347e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003454:	187b      	adds	r3, r7, r1
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2220      	movs	r2, #32
 800345a:	4013      	ands	r3, r2
 800345c:	d00f      	beq.n	800347e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800345e:	183b      	adds	r3, r7, r0
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2220      	movs	r2, #32
 8003464:	4013      	ands	r3, r2
 8003466:	d00a      	beq.n	800347e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800346c:	2b00      	cmp	r3, #0
 800346e:	d100      	bne.n	8003472 <HAL_UART_IRQHandler+0x62>
 8003470:	e2be      	b.n	80039f0 <HAL_UART_IRQHandler+0x5e0>
      {
        huart->RxISR(huart);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	0010      	movs	r0, r2
 800347a:	4798      	blx	r3
      }
      return;
 800347c:	e2b8      	b.n	80039f0 <HAL_UART_IRQHandler+0x5e0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800347e:	2398      	movs	r3, #152	@ 0x98
 8003480:	18fb      	adds	r3, r7, r3
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d100      	bne.n	800348a <HAL_UART_IRQHandler+0x7a>
 8003488:	e114      	b.n	80036b4 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800348a:	239c      	movs	r3, #156	@ 0x9c
 800348c:	18fb      	adds	r3, r7, r3
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2201      	movs	r2, #1
 8003492:	4013      	ands	r3, r2
 8003494:	d106      	bne.n	80034a4 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003496:	23a0      	movs	r3, #160	@ 0xa0
 8003498:	18fb      	adds	r3, r7, r3
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a83      	ldr	r2, [pc, #524]	@ (80036ac <HAL_UART_IRQHandler+0x29c>)
 800349e:	4013      	ands	r3, r2
 80034a0:	d100      	bne.n	80034a4 <HAL_UART_IRQHandler+0x94>
 80034a2:	e107      	b.n	80036b4 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80034a4:	23a4      	movs	r3, #164	@ 0xa4
 80034a6:	18fb      	adds	r3, r7, r3
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2201      	movs	r2, #1
 80034ac:	4013      	ands	r3, r2
 80034ae:	d012      	beq.n	80034d6 <HAL_UART_IRQHandler+0xc6>
 80034b0:	23a0      	movs	r3, #160	@ 0xa0
 80034b2:	18fb      	adds	r3, r7, r3
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	2380      	movs	r3, #128	@ 0x80
 80034b8:	005b      	lsls	r3, r3, #1
 80034ba:	4013      	ands	r3, r2
 80034bc:	d00b      	beq.n	80034d6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2201      	movs	r2, #1
 80034c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2284      	movs	r2, #132	@ 0x84
 80034ca:	589b      	ldr	r3, [r3, r2]
 80034cc:	2201      	movs	r2, #1
 80034ce:	431a      	orrs	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2184      	movs	r1, #132	@ 0x84
 80034d4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80034d6:	23a4      	movs	r3, #164	@ 0xa4
 80034d8:	18fb      	adds	r3, r7, r3
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2202      	movs	r2, #2
 80034de:	4013      	ands	r3, r2
 80034e0:	d011      	beq.n	8003506 <HAL_UART_IRQHandler+0xf6>
 80034e2:	239c      	movs	r3, #156	@ 0x9c
 80034e4:	18fb      	adds	r3, r7, r3
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2201      	movs	r2, #1
 80034ea:	4013      	ands	r3, r2
 80034ec:	d00b      	beq.n	8003506 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2202      	movs	r2, #2
 80034f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2284      	movs	r2, #132	@ 0x84
 80034fa:	589b      	ldr	r3, [r3, r2]
 80034fc:	2204      	movs	r2, #4
 80034fe:	431a      	orrs	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2184      	movs	r1, #132	@ 0x84
 8003504:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003506:	23a4      	movs	r3, #164	@ 0xa4
 8003508:	18fb      	adds	r3, r7, r3
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2204      	movs	r2, #4
 800350e:	4013      	ands	r3, r2
 8003510:	d011      	beq.n	8003536 <HAL_UART_IRQHandler+0x126>
 8003512:	239c      	movs	r3, #156	@ 0x9c
 8003514:	18fb      	adds	r3, r7, r3
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2201      	movs	r2, #1
 800351a:	4013      	ands	r3, r2
 800351c:	d00b      	beq.n	8003536 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2204      	movs	r2, #4
 8003524:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2284      	movs	r2, #132	@ 0x84
 800352a:	589b      	ldr	r3, [r3, r2]
 800352c:	2202      	movs	r2, #2
 800352e:	431a      	orrs	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2184      	movs	r1, #132	@ 0x84
 8003534:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003536:	23a4      	movs	r3, #164	@ 0xa4
 8003538:	18fb      	adds	r3, r7, r3
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2208      	movs	r2, #8
 800353e:	4013      	ands	r3, r2
 8003540:	d017      	beq.n	8003572 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003542:	23a0      	movs	r3, #160	@ 0xa0
 8003544:	18fb      	adds	r3, r7, r3
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2220      	movs	r2, #32
 800354a:	4013      	ands	r3, r2
 800354c:	d105      	bne.n	800355a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800354e:	239c      	movs	r3, #156	@ 0x9c
 8003550:	18fb      	adds	r3, r7, r3
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2201      	movs	r2, #1
 8003556:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003558:	d00b      	beq.n	8003572 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2208      	movs	r2, #8
 8003560:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2284      	movs	r2, #132	@ 0x84
 8003566:	589b      	ldr	r3, [r3, r2]
 8003568:	2208      	movs	r2, #8
 800356a:	431a      	orrs	r2, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2184      	movs	r1, #132	@ 0x84
 8003570:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003572:	23a4      	movs	r3, #164	@ 0xa4
 8003574:	18fb      	adds	r3, r7, r3
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	2380      	movs	r3, #128	@ 0x80
 800357a:	011b      	lsls	r3, r3, #4
 800357c:	4013      	ands	r3, r2
 800357e:	d013      	beq.n	80035a8 <HAL_UART_IRQHandler+0x198>
 8003580:	23a0      	movs	r3, #160	@ 0xa0
 8003582:	18fb      	adds	r3, r7, r3
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	2380      	movs	r3, #128	@ 0x80
 8003588:	04db      	lsls	r3, r3, #19
 800358a:	4013      	ands	r3, r2
 800358c:	d00c      	beq.n	80035a8 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2280      	movs	r2, #128	@ 0x80
 8003594:	0112      	lsls	r2, r2, #4
 8003596:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2284      	movs	r2, #132	@ 0x84
 800359c:	589b      	ldr	r3, [r3, r2]
 800359e:	2220      	movs	r2, #32
 80035a0:	431a      	orrs	r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2184      	movs	r1, #132	@ 0x84
 80035a6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2284      	movs	r2, #132	@ 0x84
 80035ac:	589b      	ldr	r3, [r3, r2]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d100      	bne.n	80035b4 <HAL_UART_IRQHandler+0x1a4>
 80035b2:	e21f      	b.n	80039f4 <HAL_UART_IRQHandler+0x5e4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80035b4:	23a4      	movs	r3, #164	@ 0xa4
 80035b6:	18fb      	adds	r3, r7, r3
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2220      	movs	r2, #32
 80035bc:	4013      	ands	r3, r2
 80035be:	d00e      	beq.n	80035de <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80035c0:	23a0      	movs	r3, #160	@ 0xa0
 80035c2:	18fb      	adds	r3, r7, r3
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2220      	movs	r2, #32
 80035c8:	4013      	ands	r3, r2
 80035ca:	d008      	beq.n	80035de <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d004      	beq.n	80035de <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	0010      	movs	r0, r2
 80035dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2284      	movs	r2, #132	@ 0x84
 80035e2:	589b      	ldr	r3, [r3, r2]
 80035e4:	2194      	movs	r1, #148	@ 0x94
 80035e6:	187a      	adds	r2, r7, r1
 80035e8:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	2240      	movs	r2, #64	@ 0x40
 80035f2:	4013      	ands	r3, r2
 80035f4:	2b40      	cmp	r3, #64	@ 0x40
 80035f6:	d004      	beq.n	8003602 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80035f8:	187b      	adds	r3, r7, r1
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2228      	movs	r2, #40	@ 0x28
 80035fe:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003600:	d047      	beq.n	8003692 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	0018      	movs	r0, r3
 8003606:	f000 fe89 	bl	800431c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	2240      	movs	r2, #64	@ 0x40
 8003612:	4013      	ands	r3, r2
 8003614:	2b40      	cmp	r3, #64	@ 0x40
 8003616:	d137      	bne.n	8003688 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003618:	f3ef 8310 	mrs	r3, PRIMASK
 800361c:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800361e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003620:	2090      	movs	r0, #144	@ 0x90
 8003622:	183a      	adds	r2, r7, r0
 8003624:	6013      	str	r3, [r2, #0]
 8003626:	2301      	movs	r3, #1
 8003628:	667b      	str	r3, [r7, #100]	@ 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800362a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800362c:	f383 8810 	msr	PRIMASK, r3
}
 8003630:	46c0      	nop			@ (mov r8, r8)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	689a      	ldr	r2, [r3, #8]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2140      	movs	r1, #64	@ 0x40
 800363e:	438a      	bics	r2, r1
 8003640:	609a      	str	r2, [r3, #8]
 8003642:	183b      	adds	r3, r7, r0
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003648:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800364a:	f383 8810 	msr	PRIMASK, r3
}
 800364e:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003654:	2b00      	cmp	r3, #0
 8003656:	d012      	beq.n	800367e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800365c:	4a14      	ldr	r2, [pc, #80]	@ (80036b0 <HAL_UART_IRQHandler+0x2a0>)
 800365e:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003664:	0018      	movs	r0, r3
 8003666:	f7fd fce7 	bl	8001038 <HAL_DMA_Abort_IT>
 800366a:	1e03      	subs	r3, r0, #0
 800366c:	d01a      	beq.n	80036a4 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003672:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003678:	0018      	movs	r0, r3
 800367a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800367c:	e012      	b.n	80036a4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	0018      	movs	r0, r3
 8003682:	f000 f9cd 	bl	8003a20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003686:	e00d      	b.n	80036a4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	0018      	movs	r0, r3
 800368c:	f000 f9c8 	bl	8003a20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003690:	e008      	b.n	80036a4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	0018      	movs	r0, r3
 8003696:	f000 f9c3 	bl	8003a20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2284      	movs	r2, #132	@ 0x84
 800369e:	2100      	movs	r1, #0
 80036a0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80036a2:	e1a7      	b.n	80039f4 <HAL_UART_IRQHandler+0x5e4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036a4:	46c0      	nop			@ (mov r8, r8)
    return;
 80036a6:	e1a5      	b.n	80039f4 <HAL_UART_IRQHandler+0x5e4>
 80036a8:	0000080f 	.word	0x0000080f
 80036ac:	04000120 	.word	0x04000120
 80036b0:	080043e5 	.word	0x080043e5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d000      	beq.n	80036be <HAL_UART_IRQHandler+0x2ae>
 80036bc:	e159      	b.n	8003972 <HAL_UART_IRQHandler+0x562>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80036be:	23a4      	movs	r3, #164	@ 0xa4
 80036c0:	18fb      	adds	r3, r7, r3
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2210      	movs	r2, #16
 80036c6:	4013      	ands	r3, r2
 80036c8:	d100      	bne.n	80036cc <HAL_UART_IRQHandler+0x2bc>
 80036ca:	e152      	b.n	8003972 <HAL_UART_IRQHandler+0x562>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80036cc:	23a0      	movs	r3, #160	@ 0xa0
 80036ce:	18fb      	adds	r3, r7, r3
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2210      	movs	r2, #16
 80036d4:	4013      	ands	r3, r2
 80036d6:	d100      	bne.n	80036da <HAL_UART_IRQHandler+0x2ca>
 80036d8:	e14b      	b.n	8003972 <HAL_UART_IRQHandler+0x562>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2210      	movs	r2, #16
 80036e0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	2240      	movs	r2, #64	@ 0x40
 80036ea:	4013      	ands	r3, r2
 80036ec:	2b40      	cmp	r3, #64	@ 0x40
 80036ee:	d000      	beq.n	80036f2 <HAL_UART_IRQHandler+0x2e2>
 80036f0:	e0bf      	b.n	8003872 <HAL_UART_IRQHandler+0x462>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	685a      	ldr	r2, [r3, #4]
 80036fa:	217e      	movs	r1, #126	@ 0x7e
 80036fc:	187b      	adds	r3, r7, r1
 80036fe:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003700:	187b      	adds	r3, r7, r1
 8003702:	881b      	ldrh	r3, [r3, #0]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d100      	bne.n	800370a <HAL_UART_IRQHandler+0x2fa>
 8003708:	e095      	b.n	8003836 <HAL_UART_IRQHandler+0x426>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2258      	movs	r2, #88	@ 0x58
 800370e:	5a9b      	ldrh	r3, [r3, r2]
 8003710:	187a      	adds	r2, r7, r1
 8003712:	8812      	ldrh	r2, [r2, #0]
 8003714:	429a      	cmp	r2, r3
 8003716:	d300      	bcc.n	800371a <HAL_UART_IRQHandler+0x30a>
 8003718:	e08d      	b.n	8003836 <HAL_UART_IRQHandler+0x426>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	187a      	adds	r2, r7, r1
 800371e:	215a      	movs	r1, #90	@ 0x5a
 8003720:	8812      	ldrh	r2, [r2, #0]
 8003722:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2220      	movs	r2, #32
 800372e:	4013      	ands	r3, r2
 8003730:	d16f      	bne.n	8003812 <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003732:	f3ef 8310 	mrs	r3, PRIMASK
 8003736:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800373a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800373c:	2301      	movs	r3, #1
 800373e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003740:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003742:	f383 8810 	msr	PRIMASK, r3
}
 8003746:	46c0      	nop			@ (mov r8, r8)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	49ad      	ldr	r1, [pc, #692]	@ (8003a08 <HAL_UART_IRQHandler+0x5f8>)
 8003754:	400a      	ands	r2, r1
 8003756:	601a      	str	r2, [r3, #0]
 8003758:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800375a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800375c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800375e:	f383 8810 	msr	PRIMASK, r3
}
 8003762:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003764:	f3ef 8310 	mrs	r3, PRIMASK
 8003768:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800376a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800376c:	677b      	str	r3, [r7, #116]	@ 0x74
 800376e:	2301      	movs	r3, #1
 8003770:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003772:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003774:	f383 8810 	msr	PRIMASK, r3
}
 8003778:	46c0      	nop			@ (mov r8, r8)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	689a      	ldr	r2, [r3, #8]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2101      	movs	r1, #1
 8003786:	438a      	bics	r2, r1
 8003788:	609a      	str	r2, [r3, #8]
 800378a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800378c:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800378e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003790:	f383 8810 	msr	PRIMASK, r3
}
 8003794:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003796:	f3ef 8310 	mrs	r3, PRIMASK
 800379a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 800379c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800379e:	673b      	str	r3, [r7, #112]	@ 0x70
 80037a0:	2301      	movs	r3, #1
 80037a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037a6:	f383 8810 	msr	PRIMASK, r3
}
 80037aa:	46c0      	nop			@ (mov r8, r8)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	689a      	ldr	r2, [r3, #8]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2140      	movs	r1, #64	@ 0x40
 80037b8:	438a      	bics	r2, r1
 80037ba:	609a      	str	r2, [r3, #8]
 80037bc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80037be:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037c2:	f383 8810 	msr	PRIMASK, r3
}
 80037c6:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2280      	movs	r2, #128	@ 0x80
 80037cc:	2120      	movs	r1, #32
 80037ce:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037d6:	f3ef 8310 	mrs	r3, PRIMASK
 80037da:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80037dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80037e0:	2301      	movs	r3, #1
 80037e2:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80037e6:	f383 8810 	msr	PRIMASK, r3
}
 80037ea:	46c0      	nop			@ (mov r8, r8)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2110      	movs	r1, #16
 80037f8:	438a      	bics	r2, r1
 80037fa:	601a      	str	r2, [r3, #0]
 80037fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003800:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003802:	f383 8810 	msr	PRIMASK, r3
}
 8003806:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800380c:	0018      	movs	r0, r3
 800380e:	f7fd fbd3 	bl	8000fb8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2202      	movs	r2, #2
 8003816:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2258      	movs	r2, #88	@ 0x58
 800381c:	5a9a      	ldrh	r2, [r3, r2]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	215a      	movs	r1, #90	@ 0x5a
 8003822:	5a5b      	ldrh	r3, [r3, r1]
 8003824:	b29b      	uxth	r3, r3
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	b29a      	uxth	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	0011      	movs	r1, r2
 800382e:	0018      	movs	r0, r3
 8003830:	f000 f8fe 	bl	8003a30 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003834:	e0e0      	b.n	80039f8 <HAL_UART_IRQHandler+0x5e8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2258      	movs	r2, #88	@ 0x58
 800383a:	5a9b      	ldrh	r3, [r3, r2]
 800383c:	227e      	movs	r2, #126	@ 0x7e
 800383e:	18ba      	adds	r2, r7, r2
 8003840:	8812      	ldrh	r2, [r2, #0]
 8003842:	429a      	cmp	r2, r3
 8003844:	d000      	beq.n	8003848 <HAL_UART_IRQHandler+0x438>
 8003846:	e0d7      	b.n	80039f8 <HAL_UART_IRQHandler+0x5e8>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2220      	movs	r2, #32
 8003852:	4013      	ands	r3, r2
 8003854:	2b20      	cmp	r3, #32
 8003856:	d000      	beq.n	800385a <HAL_UART_IRQHandler+0x44a>
 8003858:	e0ce      	b.n	80039f8 <HAL_UART_IRQHandler+0x5e8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2202      	movs	r2, #2
 800385e:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2258      	movs	r2, #88	@ 0x58
 8003864:	5a9a      	ldrh	r2, [r3, r2]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	0011      	movs	r1, r2
 800386a:	0018      	movs	r0, r3
 800386c:	f000 f8e0 	bl	8003a30 <HAL_UARTEx_RxEventCallback>
      return;
 8003870:	e0c2      	b.n	80039f8 <HAL_UART_IRQHandler+0x5e8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2258      	movs	r2, #88	@ 0x58
 8003876:	5a99      	ldrh	r1, [r3, r2]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	225a      	movs	r2, #90	@ 0x5a
 800387c:	5a9b      	ldrh	r3, [r3, r2]
 800387e:	b29a      	uxth	r2, r3
 8003880:	208e      	movs	r0, #142	@ 0x8e
 8003882:	183b      	adds	r3, r7, r0
 8003884:	1a8a      	subs	r2, r1, r2
 8003886:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	225a      	movs	r2, #90	@ 0x5a
 800388c:	5a9b      	ldrh	r3, [r3, r2]
 800388e:	b29b      	uxth	r3, r3
 8003890:	2b00      	cmp	r3, #0
 8003892:	d100      	bne.n	8003896 <HAL_UART_IRQHandler+0x486>
 8003894:	e0b2      	b.n	80039fc <HAL_UART_IRQHandler+0x5ec>
          && (nb_rx_data > 0U))
 8003896:	183b      	adds	r3, r7, r0
 8003898:	881b      	ldrh	r3, [r3, #0]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d100      	bne.n	80038a0 <HAL_UART_IRQHandler+0x490>
 800389e:	e0ad      	b.n	80039fc <HAL_UART_IRQHandler+0x5ec>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038a0:	f3ef 8310 	mrs	r3, PRIMASK
 80038a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80038a6:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038a8:	2488      	movs	r4, #136	@ 0x88
 80038aa:	193a      	adds	r2, r7, r4
 80038ac:	6013      	str	r3, [r2, #0]
 80038ae:	2301      	movs	r3, #1
 80038b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	f383 8810 	msr	PRIMASK, r3
}
 80038b8:	46c0      	nop			@ (mov r8, r8)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4951      	ldr	r1, [pc, #324]	@ (8003a0c <HAL_UART_IRQHandler+0x5fc>)
 80038c6:	400a      	ands	r2, r1
 80038c8:	601a      	str	r2, [r3, #0]
 80038ca:	193b      	adds	r3, r7, r4
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	f383 8810 	msr	PRIMASK, r3
}
 80038d6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038d8:	f3ef 8310 	mrs	r3, PRIMASK
 80038dc:	61bb      	str	r3, [r7, #24]
  return(result);
 80038de:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038e0:	2484      	movs	r4, #132	@ 0x84
 80038e2:	193a      	adds	r2, r7, r4
 80038e4:	6013      	str	r3, [r2, #0]
 80038e6:	2301      	movs	r3, #1
 80038e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	f383 8810 	msr	PRIMASK, r3
}
 80038f0:	46c0      	nop			@ (mov r8, r8)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	689a      	ldr	r2, [r3, #8]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2101      	movs	r1, #1
 80038fe:	438a      	bics	r2, r1
 8003900:	609a      	str	r2, [r3, #8]
 8003902:	193b      	adds	r3, r7, r4
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003908:	6a3b      	ldr	r3, [r7, #32]
 800390a:	f383 8810 	msr	PRIMASK, r3
}
 800390e:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2280      	movs	r2, #128	@ 0x80
 8003914:	2120      	movs	r1, #32
 8003916:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003924:	f3ef 8310 	mrs	r3, PRIMASK
 8003928:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800392a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800392c:	2480      	movs	r4, #128	@ 0x80
 800392e:	193a      	adds	r2, r7, r4
 8003930:	6013      	str	r3, [r2, #0]
 8003932:	2301      	movs	r3, #1
 8003934:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003938:	f383 8810 	msr	PRIMASK, r3
}
 800393c:	46c0      	nop			@ (mov r8, r8)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2110      	movs	r1, #16
 800394a:	438a      	bics	r2, r1
 800394c:	601a      	str	r2, [r3, #0]
 800394e:	193b      	adds	r3, r7, r4
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003956:	f383 8810 	msr	PRIMASK, r3
}
 800395a:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2202      	movs	r2, #2
 8003960:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003962:	183b      	adds	r3, r7, r0
 8003964:	881a      	ldrh	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	0011      	movs	r1, r2
 800396a:	0018      	movs	r0, r3
 800396c:	f000 f860 	bl	8003a30 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003970:	e044      	b.n	80039fc <HAL_UART_IRQHandler+0x5ec>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003972:	23a4      	movs	r3, #164	@ 0xa4
 8003974:	18fb      	adds	r3, r7, r3
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	2380      	movs	r3, #128	@ 0x80
 800397a:	035b      	lsls	r3, r3, #13
 800397c:	4013      	ands	r3, r2
 800397e:	d010      	beq.n	80039a2 <HAL_UART_IRQHandler+0x592>
 8003980:	239c      	movs	r3, #156	@ 0x9c
 8003982:	18fb      	adds	r3, r7, r3
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	2380      	movs	r3, #128	@ 0x80
 8003988:	03db      	lsls	r3, r3, #15
 800398a:	4013      	ands	r3, r2
 800398c:	d009      	beq.n	80039a2 <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2280      	movs	r2, #128	@ 0x80
 8003994:	0352      	lsls	r2, r2, #13
 8003996:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	0018      	movs	r0, r3
 800399c:	f000 fd60 	bl	8004460 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80039a0:	e02f      	b.n	8003a02 <HAL_UART_IRQHandler+0x5f2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80039a2:	23a4      	movs	r3, #164	@ 0xa4
 80039a4:	18fb      	adds	r3, r7, r3
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2280      	movs	r2, #128	@ 0x80
 80039aa:	4013      	ands	r3, r2
 80039ac:	d00f      	beq.n	80039ce <HAL_UART_IRQHandler+0x5be>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80039ae:	23a0      	movs	r3, #160	@ 0xa0
 80039b0:	18fb      	adds	r3, r7, r3
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2280      	movs	r2, #128	@ 0x80
 80039b6:	4013      	ands	r3, r2
 80039b8:	d009      	beq.n	80039ce <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d01e      	beq.n	8003a00 <HAL_UART_IRQHandler+0x5f0>
    {
      huart->TxISR(huart);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	0010      	movs	r0, r2
 80039ca:	4798      	blx	r3
    }
    return;
 80039cc:	e018      	b.n	8003a00 <HAL_UART_IRQHandler+0x5f0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80039ce:	23a4      	movs	r3, #164	@ 0xa4
 80039d0:	18fb      	adds	r3, r7, r3
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2240      	movs	r2, #64	@ 0x40
 80039d6:	4013      	ands	r3, r2
 80039d8:	d013      	beq.n	8003a02 <HAL_UART_IRQHandler+0x5f2>
 80039da:	23a0      	movs	r3, #160	@ 0xa0
 80039dc:	18fb      	adds	r3, r7, r3
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2240      	movs	r2, #64	@ 0x40
 80039e2:	4013      	ands	r3, r2
 80039e4:	d00d      	beq.n	8003a02 <HAL_UART_IRQHandler+0x5f2>
  {
    UART_EndTransmit_IT(huart);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	0018      	movs	r0, r3
 80039ea:	f000 fd0e 	bl	800440a <UART_EndTransmit_IT>
    return;
 80039ee:	e008      	b.n	8003a02 <HAL_UART_IRQHandler+0x5f2>
      return;
 80039f0:	46c0      	nop			@ (mov r8, r8)
 80039f2:	e006      	b.n	8003a02 <HAL_UART_IRQHandler+0x5f2>
    return;
 80039f4:	46c0      	nop			@ (mov r8, r8)
 80039f6:	e004      	b.n	8003a02 <HAL_UART_IRQHandler+0x5f2>
      return;
 80039f8:	46c0      	nop			@ (mov r8, r8)
 80039fa:	e002      	b.n	8003a02 <HAL_UART_IRQHandler+0x5f2>
      return;
 80039fc:	46c0      	nop			@ (mov r8, r8)
 80039fe:	e000      	b.n	8003a02 <HAL_UART_IRQHandler+0x5f2>
    return;
 8003a00:	46c0      	nop			@ (mov r8, r8)
  }

}
 8003a02:	46bd      	mov	sp, r7
 8003a04:	b02b      	add	sp, #172	@ 0xac
 8003a06:	bd90      	pop	{r4, r7, pc}
 8003a08:	fffffeff 	.word	0xfffffeff
 8003a0c:	fffffedf 	.word	0xfffffedf

08003a10 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003a18:	46c0      	nop			@ (mov r8, r8)
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	b002      	add	sp, #8
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003a28:	46c0      	nop			@ (mov r8, r8)
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	b002      	add	sp, #8
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	000a      	movs	r2, r1
 8003a3a:	1cbb      	adds	r3, r7, #2
 8003a3c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003a3e:	46c0      	nop			@ (mov r8, r8)
 8003a40:	46bd      	mov	sp, r7
 8003a42:	b002      	add	sp, #8
 8003a44:	bd80      	pop	{r7, pc}
	...

08003a48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a48:	b5b0      	push	{r4, r5, r7, lr}
 8003a4a:	b08e      	sub	sp, #56	@ 0x38
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a50:	231a      	movs	r3, #26
 8003a52:	2218      	movs	r2, #24
 8003a54:	189b      	adds	r3, r3, r2
 8003a56:	19db      	adds	r3, r3, r7
 8003a58:	2200      	movs	r2, #0
 8003a5a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	689a      	ldr	r2, [r3, #8]
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	431a      	orrs	r2, r3
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	431a      	orrs	r2, r3
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	69db      	ldr	r3, [r3, #28]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4ac3      	ldr	r2, [pc, #780]	@ (8003d88 <UART_SetConfig+0x340>)
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	0019      	movs	r1, r3
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003a86:	430a      	orrs	r2, r1
 8003a88:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	4abe      	ldr	r2, [pc, #760]	@ (8003d8c <UART_SetConfig+0x344>)
 8003a92:	4013      	ands	r3, r2
 8003a94:	0019      	movs	r1, r3
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	68da      	ldr	r2, [r3, #12]
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	699b      	ldr	r3, [r3, #24]
 8003aa6:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4ab8      	ldr	r2, [pc, #736]	@ (8003d90 <UART_SetConfig+0x348>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d004      	beq.n	8003abc <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	6a1b      	ldr	r3, [r3, #32]
 8003ab6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	4ab4      	ldr	r2, [pc, #720]	@ (8003d94 <UART_SetConfig+0x34c>)
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	0019      	movs	r1, r3
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003ace:	430a      	orrs	r2, r1
 8003ad0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4ab0      	ldr	r2, [pc, #704]	@ (8003d98 <UART_SetConfig+0x350>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d131      	bne.n	8003b40 <UART_SetConfig+0xf8>
 8003adc:	4baf      	ldr	r3, [pc, #700]	@ (8003d9c <UART_SetConfig+0x354>)
 8003ade:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ae0:	2203      	movs	r2, #3
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	2b03      	cmp	r3, #3
 8003ae6:	d01d      	beq.n	8003b24 <UART_SetConfig+0xdc>
 8003ae8:	d823      	bhi.n	8003b32 <UART_SetConfig+0xea>
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d00c      	beq.n	8003b08 <UART_SetConfig+0xc0>
 8003aee:	d820      	bhi.n	8003b32 <UART_SetConfig+0xea>
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d002      	beq.n	8003afa <UART_SetConfig+0xb2>
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d00e      	beq.n	8003b16 <UART_SetConfig+0xce>
 8003af8:	e01b      	b.n	8003b32 <UART_SetConfig+0xea>
 8003afa:	231b      	movs	r3, #27
 8003afc:	2218      	movs	r2, #24
 8003afe:	189b      	adds	r3, r3, r2
 8003b00:	19db      	adds	r3, r3, r7
 8003b02:	2201      	movs	r2, #1
 8003b04:	701a      	strb	r2, [r3, #0]
 8003b06:	e0b4      	b.n	8003c72 <UART_SetConfig+0x22a>
 8003b08:	231b      	movs	r3, #27
 8003b0a:	2218      	movs	r2, #24
 8003b0c:	189b      	adds	r3, r3, r2
 8003b0e:	19db      	adds	r3, r3, r7
 8003b10:	2202      	movs	r2, #2
 8003b12:	701a      	strb	r2, [r3, #0]
 8003b14:	e0ad      	b.n	8003c72 <UART_SetConfig+0x22a>
 8003b16:	231b      	movs	r3, #27
 8003b18:	2218      	movs	r2, #24
 8003b1a:	189b      	adds	r3, r3, r2
 8003b1c:	19db      	adds	r3, r3, r7
 8003b1e:	2204      	movs	r2, #4
 8003b20:	701a      	strb	r2, [r3, #0]
 8003b22:	e0a6      	b.n	8003c72 <UART_SetConfig+0x22a>
 8003b24:	231b      	movs	r3, #27
 8003b26:	2218      	movs	r2, #24
 8003b28:	189b      	adds	r3, r3, r2
 8003b2a:	19db      	adds	r3, r3, r7
 8003b2c:	2208      	movs	r2, #8
 8003b2e:	701a      	strb	r2, [r3, #0]
 8003b30:	e09f      	b.n	8003c72 <UART_SetConfig+0x22a>
 8003b32:	231b      	movs	r3, #27
 8003b34:	2218      	movs	r2, #24
 8003b36:	189b      	adds	r3, r3, r2
 8003b38:	19db      	adds	r3, r3, r7
 8003b3a:	2210      	movs	r2, #16
 8003b3c:	701a      	strb	r2, [r3, #0]
 8003b3e:	e098      	b.n	8003c72 <UART_SetConfig+0x22a>
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a96      	ldr	r2, [pc, #600]	@ (8003da0 <UART_SetConfig+0x358>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d131      	bne.n	8003bae <UART_SetConfig+0x166>
 8003b4a:	4b94      	ldr	r3, [pc, #592]	@ (8003d9c <UART_SetConfig+0x354>)
 8003b4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b4e:	220c      	movs	r2, #12
 8003b50:	4013      	ands	r3, r2
 8003b52:	2b0c      	cmp	r3, #12
 8003b54:	d01d      	beq.n	8003b92 <UART_SetConfig+0x14a>
 8003b56:	d823      	bhi.n	8003ba0 <UART_SetConfig+0x158>
 8003b58:	2b08      	cmp	r3, #8
 8003b5a:	d00c      	beq.n	8003b76 <UART_SetConfig+0x12e>
 8003b5c:	d820      	bhi.n	8003ba0 <UART_SetConfig+0x158>
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d002      	beq.n	8003b68 <UART_SetConfig+0x120>
 8003b62:	2b04      	cmp	r3, #4
 8003b64:	d00e      	beq.n	8003b84 <UART_SetConfig+0x13c>
 8003b66:	e01b      	b.n	8003ba0 <UART_SetConfig+0x158>
 8003b68:	231b      	movs	r3, #27
 8003b6a:	2218      	movs	r2, #24
 8003b6c:	189b      	adds	r3, r3, r2
 8003b6e:	19db      	adds	r3, r3, r7
 8003b70:	2200      	movs	r2, #0
 8003b72:	701a      	strb	r2, [r3, #0]
 8003b74:	e07d      	b.n	8003c72 <UART_SetConfig+0x22a>
 8003b76:	231b      	movs	r3, #27
 8003b78:	2218      	movs	r2, #24
 8003b7a:	189b      	adds	r3, r3, r2
 8003b7c:	19db      	adds	r3, r3, r7
 8003b7e:	2202      	movs	r2, #2
 8003b80:	701a      	strb	r2, [r3, #0]
 8003b82:	e076      	b.n	8003c72 <UART_SetConfig+0x22a>
 8003b84:	231b      	movs	r3, #27
 8003b86:	2218      	movs	r2, #24
 8003b88:	189b      	adds	r3, r3, r2
 8003b8a:	19db      	adds	r3, r3, r7
 8003b8c:	2204      	movs	r2, #4
 8003b8e:	701a      	strb	r2, [r3, #0]
 8003b90:	e06f      	b.n	8003c72 <UART_SetConfig+0x22a>
 8003b92:	231b      	movs	r3, #27
 8003b94:	2218      	movs	r2, #24
 8003b96:	189b      	adds	r3, r3, r2
 8003b98:	19db      	adds	r3, r3, r7
 8003b9a:	2208      	movs	r2, #8
 8003b9c:	701a      	strb	r2, [r3, #0]
 8003b9e:	e068      	b.n	8003c72 <UART_SetConfig+0x22a>
 8003ba0:	231b      	movs	r3, #27
 8003ba2:	2218      	movs	r2, #24
 8003ba4:	189b      	adds	r3, r3, r2
 8003ba6:	19db      	adds	r3, r3, r7
 8003ba8:	2210      	movs	r2, #16
 8003baa:	701a      	strb	r2, [r3, #0]
 8003bac:	e061      	b.n	8003c72 <UART_SetConfig+0x22a>
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a7c      	ldr	r2, [pc, #496]	@ (8003da4 <UART_SetConfig+0x35c>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d106      	bne.n	8003bc6 <UART_SetConfig+0x17e>
 8003bb8:	231b      	movs	r3, #27
 8003bba:	2218      	movs	r2, #24
 8003bbc:	189b      	adds	r3, r3, r2
 8003bbe:	19db      	adds	r3, r3, r7
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	701a      	strb	r2, [r3, #0]
 8003bc4:	e055      	b.n	8003c72 <UART_SetConfig+0x22a>
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a77      	ldr	r2, [pc, #476]	@ (8003da8 <UART_SetConfig+0x360>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d106      	bne.n	8003bde <UART_SetConfig+0x196>
 8003bd0:	231b      	movs	r3, #27
 8003bd2:	2218      	movs	r2, #24
 8003bd4:	189b      	adds	r3, r3, r2
 8003bd6:	19db      	adds	r3, r3, r7
 8003bd8:	2200      	movs	r2, #0
 8003bda:	701a      	strb	r2, [r3, #0]
 8003bdc:	e049      	b.n	8003c72 <UART_SetConfig+0x22a>
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a6b      	ldr	r2, [pc, #428]	@ (8003d90 <UART_SetConfig+0x348>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d13e      	bne.n	8003c66 <UART_SetConfig+0x21e>
 8003be8:	4b6c      	ldr	r3, [pc, #432]	@ (8003d9c <UART_SetConfig+0x354>)
 8003bea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003bec:	23c0      	movs	r3, #192	@ 0xc0
 8003bee:	011b      	lsls	r3, r3, #4
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	22c0      	movs	r2, #192	@ 0xc0
 8003bf4:	0112      	lsls	r2, r2, #4
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d027      	beq.n	8003c4a <UART_SetConfig+0x202>
 8003bfa:	22c0      	movs	r2, #192	@ 0xc0
 8003bfc:	0112      	lsls	r2, r2, #4
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d82a      	bhi.n	8003c58 <UART_SetConfig+0x210>
 8003c02:	2280      	movs	r2, #128	@ 0x80
 8003c04:	0112      	lsls	r2, r2, #4
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d011      	beq.n	8003c2e <UART_SetConfig+0x1e6>
 8003c0a:	2280      	movs	r2, #128	@ 0x80
 8003c0c:	0112      	lsls	r2, r2, #4
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d822      	bhi.n	8003c58 <UART_SetConfig+0x210>
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d004      	beq.n	8003c20 <UART_SetConfig+0x1d8>
 8003c16:	2280      	movs	r2, #128	@ 0x80
 8003c18:	00d2      	lsls	r2, r2, #3
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d00e      	beq.n	8003c3c <UART_SetConfig+0x1f4>
 8003c1e:	e01b      	b.n	8003c58 <UART_SetConfig+0x210>
 8003c20:	231b      	movs	r3, #27
 8003c22:	2218      	movs	r2, #24
 8003c24:	189b      	adds	r3, r3, r2
 8003c26:	19db      	adds	r3, r3, r7
 8003c28:	2200      	movs	r2, #0
 8003c2a:	701a      	strb	r2, [r3, #0]
 8003c2c:	e021      	b.n	8003c72 <UART_SetConfig+0x22a>
 8003c2e:	231b      	movs	r3, #27
 8003c30:	2218      	movs	r2, #24
 8003c32:	189b      	adds	r3, r3, r2
 8003c34:	19db      	adds	r3, r3, r7
 8003c36:	2202      	movs	r2, #2
 8003c38:	701a      	strb	r2, [r3, #0]
 8003c3a:	e01a      	b.n	8003c72 <UART_SetConfig+0x22a>
 8003c3c:	231b      	movs	r3, #27
 8003c3e:	2218      	movs	r2, #24
 8003c40:	189b      	adds	r3, r3, r2
 8003c42:	19db      	adds	r3, r3, r7
 8003c44:	2204      	movs	r2, #4
 8003c46:	701a      	strb	r2, [r3, #0]
 8003c48:	e013      	b.n	8003c72 <UART_SetConfig+0x22a>
 8003c4a:	231b      	movs	r3, #27
 8003c4c:	2218      	movs	r2, #24
 8003c4e:	189b      	adds	r3, r3, r2
 8003c50:	19db      	adds	r3, r3, r7
 8003c52:	2208      	movs	r2, #8
 8003c54:	701a      	strb	r2, [r3, #0]
 8003c56:	e00c      	b.n	8003c72 <UART_SetConfig+0x22a>
 8003c58:	231b      	movs	r3, #27
 8003c5a:	2218      	movs	r2, #24
 8003c5c:	189b      	adds	r3, r3, r2
 8003c5e:	19db      	adds	r3, r3, r7
 8003c60:	2210      	movs	r2, #16
 8003c62:	701a      	strb	r2, [r3, #0]
 8003c64:	e005      	b.n	8003c72 <UART_SetConfig+0x22a>
 8003c66:	231b      	movs	r3, #27
 8003c68:	2218      	movs	r2, #24
 8003c6a:	189b      	adds	r3, r3, r2
 8003c6c:	19db      	adds	r3, r3, r7
 8003c6e:	2210      	movs	r2, #16
 8003c70:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a46      	ldr	r2, [pc, #280]	@ (8003d90 <UART_SetConfig+0x348>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d000      	beq.n	8003c7e <UART_SetConfig+0x236>
 8003c7c:	e09a      	b.n	8003db4 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003c7e:	231b      	movs	r3, #27
 8003c80:	2218      	movs	r2, #24
 8003c82:	189b      	adds	r3, r3, r2
 8003c84:	19db      	adds	r3, r3, r7
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	2b08      	cmp	r3, #8
 8003c8a:	d01d      	beq.n	8003cc8 <UART_SetConfig+0x280>
 8003c8c:	dc20      	bgt.n	8003cd0 <UART_SetConfig+0x288>
 8003c8e:	2b04      	cmp	r3, #4
 8003c90:	d015      	beq.n	8003cbe <UART_SetConfig+0x276>
 8003c92:	dc1d      	bgt.n	8003cd0 <UART_SetConfig+0x288>
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d002      	beq.n	8003c9e <UART_SetConfig+0x256>
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d005      	beq.n	8003ca8 <UART_SetConfig+0x260>
 8003c9c:	e018      	b.n	8003cd0 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c9e:	f7fe f991 	bl	8001fc4 <HAL_RCC_GetPCLK1Freq>
 8003ca2:	0003      	movs	r3, r0
 8003ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003ca6:	e01c      	b.n	8003ce2 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ca8:	4b3c      	ldr	r3, [pc, #240]	@ (8003d9c <UART_SetConfig+0x354>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2210      	movs	r2, #16
 8003cae:	4013      	ands	r3, r2
 8003cb0:	d002      	beq.n	8003cb8 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003cb2:	4b3e      	ldr	r3, [pc, #248]	@ (8003dac <UART_SetConfig+0x364>)
 8003cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003cb6:	e014      	b.n	8003ce2 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8003cb8:	4b3d      	ldr	r3, [pc, #244]	@ (8003db0 <UART_SetConfig+0x368>)
 8003cba:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003cbc:	e011      	b.n	8003ce2 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cbe:	f7fe f8f1 	bl	8001ea4 <HAL_RCC_GetSysClockFreq>
 8003cc2:	0003      	movs	r3, r0
 8003cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003cc6:	e00c      	b.n	8003ce2 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cc8:	2380      	movs	r3, #128	@ 0x80
 8003cca:	021b      	lsls	r3, r3, #8
 8003ccc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003cce:	e008      	b.n	8003ce2 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003cd4:	231a      	movs	r3, #26
 8003cd6:	2218      	movs	r2, #24
 8003cd8:	189b      	adds	r3, r3, r2
 8003cda:	19db      	adds	r3, r3, r7
 8003cdc:	2201      	movs	r2, #1
 8003cde:	701a      	strb	r2, [r3, #0]
        break;
 8003ce0:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003ce2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d100      	bne.n	8003cea <UART_SetConfig+0x2a2>
 8003ce8:	e133      	b.n	8003f52 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	685a      	ldr	r2, [r3, #4]
 8003cee:	0013      	movs	r3, r2
 8003cf0:	005b      	lsls	r3, r3, #1
 8003cf2:	189b      	adds	r3, r3, r2
 8003cf4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d305      	bcc.n	8003d06 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d906      	bls.n	8003d14 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8003d06:	231a      	movs	r3, #26
 8003d08:	2218      	movs	r2, #24
 8003d0a:	189b      	adds	r3, r3, r2
 8003d0c:	19db      	adds	r3, r3, r7
 8003d0e:	2201      	movs	r2, #1
 8003d10:	701a      	strb	r2, [r3, #0]
 8003d12:	e11e      	b.n	8003f52 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003d14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d16:	613b      	str	r3, [r7, #16]
 8003d18:	2300      	movs	r3, #0
 8003d1a:	617b      	str	r3, [r7, #20]
 8003d1c:	6939      	ldr	r1, [r7, #16]
 8003d1e:	697a      	ldr	r2, [r7, #20]
 8003d20:	000b      	movs	r3, r1
 8003d22:	0e1b      	lsrs	r3, r3, #24
 8003d24:	0010      	movs	r0, r2
 8003d26:	0205      	lsls	r5, r0, #8
 8003d28:	431d      	orrs	r5, r3
 8003d2a:	000b      	movs	r3, r1
 8003d2c:	021c      	lsls	r4, r3, #8
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	085b      	lsrs	r3, r3, #1
 8003d34:	60bb      	str	r3, [r7, #8]
 8003d36:	2300      	movs	r3, #0
 8003d38:	60fb      	str	r3, [r7, #12]
 8003d3a:	68b8      	ldr	r0, [r7, #8]
 8003d3c:	68f9      	ldr	r1, [r7, #12]
 8003d3e:	1900      	adds	r0, r0, r4
 8003d40:	4169      	adcs	r1, r5
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	603b      	str	r3, [r7, #0]
 8003d48:	2300      	movs	r3, #0
 8003d4a:	607b      	str	r3, [r7, #4]
 8003d4c:	683a      	ldr	r2, [r7, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f7fc fa66 	bl	8000220 <__aeabi_uldivmod>
 8003d54:	0002      	movs	r2, r0
 8003d56:	000b      	movs	r3, r1
 8003d58:	0013      	movs	r3, r2
 8003d5a:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d5c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d5e:	23c0      	movs	r3, #192	@ 0xc0
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d309      	bcc.n	8003d7a <UART_SetConfig+0x332>
 8003d66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d68:	2380      	movs	r3, #128	@ 0x80
 8003d6a:	035b      	lsls	r3, r3, #13
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d204      	bcs.n	8003d7a <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d76:	60da      	str	r2, [r3, #12]
 8003d78:	e0eb      	b.n	8003f52 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8003d7a:	231a      	movs	r3, #26
 8003d7c:	2218      	movs	r2, #24
 8003d7e:	189b      	adds	r3, r3, r2
 8003d80:	19db      	adds	r3, r3, r7
 8003d82:	2201      	movs	r2, #1
 8003d84:	701a      	strb	r2, [r3, #0]
 8003d86:	e0e4      	b.n	8003f52 <UART_SetConfig+0x50a>
 8003d88:	efff69f3 	.word	0xefff69f3
 8003d8c:	ffffcfff 	.word	0xffffcfff
 8003d90:	40004800 	.word	0x40004800
 8003d94:	fffff4ff 	.word	0xfffff4ff
 8003d98:	40013800 	.word	0x40013800
 8003d9c:	40021000 	.word	0x40021000
 8003da0:	40004400 	.word	0x40004400
 8003da4:	40004c00 	.word	0x40004c00
 8003da8:	40005000 	.word	0x40005000
 8003dac:	003d0900 	.word	0x003d0900
 8003db0:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	69da      	ldr	r2, [r3, #28]
 8003db8:	2380      	movs	r3, #128	@ 0x80
 8003dba:	021b      	lsls	r3, r3, #8
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d000      	beq.n	8003dc2 <UART_SetConfig+0x37a>
 8003dc0:	e070      	b.n	8003ea4 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8003dc2:	231b      	movs	r3, #27
 8003dc4:	2218      	movs	r2, #24
 8003dc6:	189b      	adds	r3, r3, r2
 8003dc8:	19db      	adds	r3, r3, r7
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	2b08      	cmp	r3, #8
 8003dce:	d822      	bhi.n	8003e16 <UART_SetConfig+0x3ce>
 8003dd0:	009a      	lsls	r2, r3, #2
 8003dd2:	4b67      	ldr	r3, [pc, #412]	@ (8003f70 <UART_SetConfig+0x528>)
 8003dd4:	18d3      	adds	r3, r2, r3
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dda:	f7fe f8f3 	bl	8001fc4 <HAL_RCC_GetPCLK1Freq>
 8003dde:	0003      	movs	r3, r0
 8003de0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003de2:	e021      	b.n	8003e28 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003de4:	f7fe f904 	bl	8001ff0 <HAL_RCC_GetPCLK2Freq>
 8003de8:	0003      	movs	r3, r0
 8003dea:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003dec:	e01c      	b.n	8003e28 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003dee:	4b61      	ldr	r3, [pc, #388]	@ (8003f74 <UART_SetConfig+0x52c>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2210      	movs	r2, #16
 8003df4:	4013      	ands	r3, r2
 8003df6:	d002      	beq.n	8003dfe <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003df8:	4b5f      	ldr	r3, [pc, #380]	@ (8003f78 <UART_SetConfig+0x530>)
 8003dfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003dfc:	e014      	b.n	8003e28 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8003dfe:	4b5f      	ldr	r3, [pc, #380]	@ (8003f7c <UART_SetConfig+0x534>)
 8003e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003e02:	e011      	b.n	8003e28 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e04:	f7fe f84e 	bl	8001ea4 <HAL_RCC_GetSysClockFreq>
 8003e08:	0003      	movs	r3, r0
 8003e0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003e0c:	e00c      	b.n	8003e28 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e0e:	2380      	movs	r3, #128	@ 0x80
 8003e10:	021b      	lsls	r3, r3, #8
 8003e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003e14:	e008      	b.n	8003e28 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8003e16:	2300      	movs	r3, #0
 8003e18:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003e1a:	231a      	movs	r3, #26
 8003e1c:	2218      	movs	r2, #24
 8003e1e:	189b      	adds	r3, r3, r2
 8003e20:	19db      	adds	r3, r3, r7
 8003e22:	2201      	movs	r2, #1
 8003e24:	701a      	strb	r2, [r3, #0]
        break;
 8003e26:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d100      	bne.n	8003e30 <UART_SetConfig+0x3e8>
 8003e2e:	e090      	b.n	8003f52 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e32:	005a      	lsls	r2, r3, #1
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	085b      	lsrs	r3, r3, #1
 8003e3a:	18d2      	adds	r2, r2, r3
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	0019      	movs	r1, r3
 8003e42:	0010      	movs	r0, r2
 8003e44:	f7fc f960 	bl	8000108 <__udivsi3>
 8003e48:	0003      	movs	r3, r0
 8003e4a:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e4e:	2b0f      	cmp	r3, #15
 8003e50:	d921      	bls.n	8003e96 <UART_SetConfig+0x44e>
 8003e52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e54:	2380      	movs	r3, #128	@ 0x80
 8003e56:	025b      	lsls	r3, r3, #9
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d21c      	bcs.n	8003e96 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e5e:	b29a      	uxth	r2, r3
 8003e60:	200e      	movs	r0, #14
 8003e62:	2418      	movs	r4, #24
 8003e64:	1903      	adds	r3, r0, r4
 8003e66:	19db      	adds	r3, r3, r7
 8003e68:	210f      	movs	r1, #15
 8003e6a:	438a      	bics	r2, r1
 8003e6c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e70:	085b      	lsrs	r3, r3, #1
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	2207      	movs	r2, #7
 8003e76:	4013      	ands	r3, r2
 8003e78:	b299      	uxth	r1, r3
 8003e7a:	1903      	adds	r3, r0, r4
 8003e7c:	19db      	adds	r3, r3, r7
 8003e7e:	1902      	adds	r2, r0, r4
 8003e80:	19d2      	adds	r2, r2, r7
 8003e82:	8812      	ldrh	r2, [r2, #0]
 8003e84:	430a      	orrs	r2, r1
 8003e86:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	1902      	adds	r2, r0, r4
 8003e8e:	19d2      	adds	r2, r2, r7
 8003e90:	8812      	ldrh	r2, [r2, #0]
 8003e92:	60da      	str	r2, [r3, #12]
 8003e94:	e05d      	b.n	8003f52 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8003e96:	231a      	movs	r3, #26
 8003e98:	2218      	movs	r2, #24
 8003e9a:	189b      	adds	r3, r3, r2
 8003e9c:	19db      	adds	r3, r3, r7
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	701a      	strb	r2, [r3, #0]
 8003ea2:	e056      	b.n	8003f52 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ea4:	231b      	movs	r3, #27
 8003ea6:	2218      	movs	r2, #24
 8003ea8:	189b      	adds	r3, r3, r2
 8003eaa:	19db      	adds	r3, r3, r7
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	2b08      	cmp	r3, #8
 8003eb0:	d822      	bhi.n	8003ef8 <UART_SetConfig+0x4b0>
 8003eb2:	009a      	lsls	r2, r3, #2
 8003eb4:	4b32      	ldr	r3, [pc, #200]	@ (8003f80 <UART_SetConfig+0x538>)
 8003eb6:	18d3      	adds	r3, r2, r3
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ebc:	f7fe f882 	bl	8001fc4 <HAL_RCC_GetPCLK1Freq>
 8003ec0:	0003      	movs	r3, r0
 8003ec2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003ec4:	e021      	b.n	8003f0a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ec6:	f7fe f893 	bl	8001ff0 <HAL_RCC_GetPCLK2Freq>
 8003eca:	0003      	movs	r3, r0
 8003ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003ece:	e01c      	b.n	8003f0a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ed0:	4b28      	ldr	r3, [pc, #160]	@ (8003f74 <UART_SetConfig+0x52c>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2210      	movs	r2, #16
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	d002      	beq.n	8003ee0 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003eda:	4b27      	ldr	r3, [pc, #156]	@ (8003f78 <UART_SetConfig+0x530>)
 8003edc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003ede:	e014      	b.n	8003f0a <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8003ee0:	4b26      	ldr	r3, [pc, #152]	@ (8003f7c <UART_SetConfig+0x534>)
 8003ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003ee4:	e011      	b.n	8003f0a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ee6:	f7fd ffdd 	bl	8001ea4 <HAL_RCC_GetSysClockFreq>
 8003eea:	0003      	movs	r3, r0
 8003eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003eee:	e00c      	b.n	8003f0a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ef0:	2380      	movs	r3, #128	@ 0x80
 8003ef2:	021b      	lsls	r3, r3, #8
 8003ef4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003ef6:	e008      	b.n	8003f0a <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003efc:	231a      	movs	r3, #26
 8003efe:	2218      	movs	r2, #24
 8003f00:	189b      	adds	r3, r3, r2
 8003f02:	19db      	adds	r3, r3, r7
 8003f04:	2201      	movs	r2, #1
 8003f06:	701a      	strb	r2, [r3, #0]
        break;
 8003f08:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003f0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d020      	beq.n	8003f52 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	085a      	lsrs	r2, r3, #1
 8003f16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f18:	18d2      	adds	r2, r2, r3
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	0019      	movs	r1, r3
 8003f20:	0010      	movs	r0, r2
 8003f22:	f7fc f8f1 	bl	8000108 <__udivsi3>
 8003f26:	0003      	movs	r3, r0
 8003f28:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f2c:	2b0f      	cmp	r3, #15
 8003f2e:	d90a      	bls.n	8003f46 <UART_SetConfig+0x4fe>
 8003f30:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f32:	2380      	movs	r3, #128	@ 0x80
 8003f34:	025b      	lsls	r3, r3, #9
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d205      	bcs.n	8003f46 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	60da      	str	r2, [r3, #12]
 8003f44:	e005      	b.n	8003f52 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8003f46:	231a      	movs	r3, #26
 8003f48:	2218      	movs	r2, #24
 8003f4a:	189b      	adds	r3, r3, r2
 8003f4c:	19db      	adds	r3, r3, r7
 8003f4e:	2201      	movs	r2, #1
 8003f50:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	2200      	movs	r2, #0
 8003f56:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003f5e:	231a      	movs	r3, #26
 8003f60:	2218      	movs	r2, #24
 8003f62:	189b      	adds	r3, r3, r2
 8003f64:	19db      	adds	r3, r3, r7
 8003f66:	781b      	ldrb	r3, [r3, #0]
}
 8003f68:	0018      	movs	r0, r3
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	b00e      	add	sp, #56	@ 0x38
 8003f6e:	bdb0      	pop	{r4, r5, r7, pc}
 8003f70:	08004504 	.word	0x08004504
 8003f74:	40021000 	.word	0x40021000
 8003f78:	003d0900 	.word	0x003d0900
 8003f7c:	00f42400 	.word	0x00f42400
 8003f80:	08004528 	.word	0x08004528

08003f84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f90:	2208      	movs	r2, #8
 8003f92:	4013      	ands	r3, r2
 8003f94:	d00b      	beq.n	8003fae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	4a4a      	ldr	r2, [pc, #296]	@ (80040c8 <UART_AdvFeatureConfig+0x144>)
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	0019      	movs	r1, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	430a      	orrs	r2, r1
 8003fac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	d00b      	beq.n	8003fd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	4a43      	ldr	r2, [pc, #268]	@ (80040cc <UART_AdvFeatureConfig+0x148>)
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	0019      	movs	r1, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	430a      	orrs	r2, r1
 8003fce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd4:	2202      	movs	r2, #2
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	d00b      	beq.n	8003ff2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	4a3b      	ldr	r2, [pc, #236]	@ (80040d0 <UART_AdvFeatureConfig+0x14c>)
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	0019      	movs	r1, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff6:	2204      	movs	r2, #4
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	d00b      	beq.n	8004014 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	4a34      	ldr	r2, [pc, #208]	@ (80040d4 <UART_AdvFeatureConfig+0x150>)
 8004004:	4013      	ands	r3, r2
 8004006:	0019      	movs	r1, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	430a      	orrs	r2, r1
 8004012:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004018:	2210      	movs	r2, #16
 800401a:	4013      	ands	r3, r2
 800401c:	d00b      	beq.n	8004036 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	4a2c      	ldr	r2, [pc, #176]	@ (80040d8 <UART_AdvFeatureConfig+0x154>)
 8004026:	4013      	ands	r3, r2
 8004028:	0019      	movs	r1, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	430a      	orrs	r2, r1
 8004034:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800403a:	2220      	movs	r2, #32
 800403c:	4013      	ands	r3, r2
 800403e:	d00b      	beq.n	8004058 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	4a25      	ldr	r2, [pc, #148]	@ (80040dc <UART_AdvFeatureConfig+0x158>)
 8004048:	4013      	ands	r3, r2
 800404a:	0019      	movs	r1, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	430a      	orrs	r2, r1
 8004056:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800405c:	2240      	movs	r2, #64	@ 0x40
 800405e:	4013      	ands	r3, r2
 8004060:	d01d      	beq.n	800409e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	4a1d      	ldr	r2, [pc, #116]	@ (80040e0 <UART_AdvFeatureConfig+0x15c>)
 800406a:	4013      	ands	r3, r2
 800406c:	0019      	movs	r1, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	430a      	orrs	r2, r1
 8004078:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800407e:	2380      	movs	r3, #128	@ 0x80
 8004080:	035b      	lsls	r3, r3, #13
 8004082:	429a      	cmp	r2, r3
 8004084:	d10b      	bne.n	800409e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	4a15      	ldr	r2, [pc, #84]	@ (80040e4 <UART_AdvFeatureConfig+0x160>)
 800408e:	4013      	ands	r3, r2
 8004090:	0019      	movs	r1, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	430a      	orrs	r2, r1
 800409c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a2:	2280      	movs	r2, #128	@ 0x80
 80040a4:	4013      	ands	r3, r2
 80040a6:	d00b      	beq.n	80040c0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	4a0e      	ldr	r2, [pc, #56]	@ (80040e8 <UART_AdvFeatureConfig+0x164>)
 80040b0:	4013      	ands	r3, r2
 80040b2:	0019      	movs	r1, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	430a      	orrs	r2, r1
 80040be:	605a      	str	r2, [r3, #4]
  }
}
 80040c0:	46c0      	nop			@ (mov r8, r8)
 80040c2:	46bd      	mov	sp, r7
 80040c4:	b002      	add	sp, #8
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	ffff7fff 	.word	0xffff7fff
 80040cc:	fffdffff 	.word	0xfffdffff
 80040d0:	fffeffff 	.word	0xfffeffff
 80040d4:	fffbffff 	.word	0xfffbffff
 80040d8:	ffffefff 	.word	0xffffefff
 80040dc:	ffffdfff 	.word	0xffffdfff
 80040e0:	ffefffff 	.word	0xffefffff
 80040e4:	ff9fffff 	.word	0xff9fffff
 80040e8:	fff7ffff 	.word	0xfff7ffff

080040ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b092      	sub	sp, #72	@ 0x48
 80040f0:	af02      	add	r7, sp, #8
 80040f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2284      	movs	r2, #132	@ 0x84
 80040f8:	2100      	movs	r1, #0
 80040fa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040fc:	f7fc fe74 	bl	8000de8 <HAL_GetTick>
 8004100:	0003      	movs	r3, r0
 8004102:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2208      	movs	r2, #8
 800410c:	4013      	ands	r3, r2
 800410e:	2b08      	cmp	r3, #8
 8004110:	d12c      	bne.n	800416c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004112:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004114:	2280      	movs	r2, #128	@ 0x80
 8004116:	0391      	lsls	r1, r2, #14
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	4a46      	ldr	r2, [pc, #280]	@ (8004234 <UART_CheckIdleState+0x148>)
 800411c:	9200      	str	r2, [sp, #0]
 800411e:	2200      	movs	r2, #0
 8004120:	f000 f88c 	bl	800423c <UART_WaitOnFlagUntilTimeout>
 8004124:	1e03      	subs	r3, r0, #0
 8004126:	d021      	beq.n	800416c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004128:	f3ef 8310 	mrs	r3, PRIMASK
 800412c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800412e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004130:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004132:	2301      	movs	r3, #1
 8004134:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004138:	f383 8810 	msr	PRIMASK, r3
}
 800413c:	46c0      	nop			@ (mov r8, r8)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2180      	movs	r1, #128	@ 0x80
 800414a:	438a      	bics	r2, r1
 800414c:	601a      	str	r2, [r3, #0]
 800414e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004150:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004152:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004154:	f383 8810 	msr	PRIMASK, r3
}
 8004158:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2220      	movs	r2, #32
 800415e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2278      	movs	r2, #120	@ 0x78
 8004164:	2100      	movs	r1, #0
 8004166:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e05f      	b.n	800422c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2204      	movs	r2, #4
 8004174:	4013      	ands	r3, r2
 8004176:	2b04      	cmp	r3, #4
 8004178:	d146      	bne.n	8004208 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800417a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800417c:	2280      	movs	r2, #128	@ 0x80
 800417e:	03d1      	lsls	r1, r2, #15
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	4a2c      	ldr	r2, [pc, #176]	@ (8004234 <UART_CheckIdleState+0x148>)
 8004184:	9200      	str	r2, [sp, #0]
 8004186:	2200      	movs	r2, #0
 8004188:	f000 f858 	bl	800423c <UART_WaitOnFlagUntilTimeout>
 800418c:	1e03      	subs	r3, r0, #0
 800418e:	d03b      	beq.n	8004208 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004190:	f3ef 8310 	mrs	r3, PRIMASK
 8004194:	60fb      	str	r3, [r7, #12]
  return(result);
 8004196:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004198:	637b      	str	r3, [r7, #52]	@ 0x34
 800419a:	2301      	movs	r3, #1
 800419c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	f383 8810 	msr	PRIMASK, r3
}
 80041a4:	46c0      	nop			@ (mov r8, r8)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4921      	ldr	r1, [pc, #132]	@ (8004238 <UART_CheckIdleState+0x14c>)
 80041b2:	400a      	ands	r2, r1
 80041b4:	601a      	str	r2, [r3, #0]
 80041b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	f383 8810 	msr	PRIMASK, r3
}
 80041c0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041c2:	f3ef 8310 	mrs	r3, PRIMASK
 80041c6:	61bb      	str	r3, [r7, #24]
  return(result);
 80041c8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80041cc:	2301      	movs	r3, #1
 80041ce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	f383 8810 	msr	PRIMASK, r3
}
 80041d6:	46c0      	nop			@ (mov r8, r8)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	689a      	ldr	r2, [r3, #8]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2101      	movs	r1, #1
 80041e4:	438a      	bics	r2, r1
 80041e6:	609a      	str	r2, [r3, #8]
 80041e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041ea:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041ec:	6a3b      	ldr	r3, [r7, #32]
 80041ee:	f383 8810 	msr	PRIMASK, r3
}
 80041f2:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2280      	movs	r2, #128	@ 0x80
 80041f8:	2120      	movs	r1, #32
 80041fa:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2278      	movs	r2, #120	@ 0x78
 8004200:	2100      	movs	r1, #0
 8004202:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e011      	b.n	800422c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2220      	movs	r2, #32
 800420c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2280      	movs	r2, #128	@ 0x80
 8004212:	2120      	movs	r1, #32
 8004214:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2278      	movs	r2, #120	@ 0x78
 8004226:	2100      	movs	r1, #0
 8004228:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800422a:	2300      	movs	r3, #0
}
 800422c:	0018      	movs	r0, r3
 800422e:	46bd      	mov	sp, r7
 8004230:	b010      	add	sp, #64	@ 0x40
 8004232:	bd80      	pop	{r7, pc}
 8004234:	01ffffff 	.word	0x01ffffff
 8004238:	fffffedf 	.word	0xfffffedf

0800423c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	603b      	str	r3, [r7, #0]
 8004248:	1dfb      	adds	r3, r7, #7
 800424a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800424c:	e051      	b.n	80042f2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	3301      	adds	r3, #1
 8004252:	d04e      	beq.n	80042f2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004254:	f7fc fdc8 	bl	8000de8 <HAL_GetTick>
 8004258:	0002      	movs	r2, r0
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	69ba      	ldr	r2, [r7, #24]
 8004260:	429a      	cmp	r2, r3
 8004262:	d302      	bcc.n	800426a <UART_WaitOnFlagUntilTimeout+0x2e>
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d101      	bne.n	800426e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e051      	b.n	8004312 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2204      	movs	r2, #4
 8004276:	4013      	ands	r3, r2
 8004278:	d03b      	beq.n	80042f2 <UART_WaitOnFlagUntilTimeout+0xb6>
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	2b80      	cmp	r3, #128	@ 0x80
 800427e:	d038      	beq.n	80042f2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	2b40      	cmp	r3, #64	@ 0x40
 8004284:	d035      	beq.n	80042f2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	69db      	ldr	r3, [r3, #28]
 800428c:	2208      	movs	r2, #8
 800428e:	4013      	ands	r3, r2
 8004290:	2b08      	cmp	r3, #8
 8004292:	d111      	bne.n	80042b8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2208      	movs	r2, #8
 800429a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	0018      	movs	r0, r3
 80042a0:	f000 f83c 	bl	800431c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2284      	movs	r2, #132	@ 0x84
 80042a8:	2108      	movs	r1, #8
 80042aa:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2278      	movs	r2, #120	@ 0x78
 80042b0:	2100      	movs	r1, #0
 80042b2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e02c      	b.n	8004312 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	69da      	ldr	r2, [r3, #28]
 80042be:	2380      	movs	r3, #128	@ 0x80
 80042c0:	011b      	lsls	r3, r3, #4
 80042c2:	401a      	ands	r2, r3
 80042c4:	2380      	movs	r3, #128	@ 0x80
 80042c6:	011b      	lsls	r3, r3, #4
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d112      	bne.n	80042f2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2280      	movs	r2, #128	@ 0x80
 80042d2:	0112      	lsls	r2, r2, #4
 80042d4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	0018      	movs	r0, r3
 80042da:	f000 f81f 	bl	800431c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2284      	movs	r2, #132	@ 0x84
 80042e2:	2120      	movs	r1, #32
 80042e4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2278      	movs	r2, #120	@ 0x78
 80042ea:	2100      	movs	r1, #0
 80042ec:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e00f      	b.n	8004312 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	69db      	ldr	r3, [r3, #28]
 80042f8:	68ba      	ldr	r2, [r7, #8]
 80042fa:	4013      	ands	r3, r2
 80042fc:	68ba      	ldr	r2, [r7, #8]
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	425a      	negs	r2, r3
 8004302:	4153      	adcs	r3, r2
 8004304:	b2db      	uxtb	r3, r3
 8004306:	001a      	movs	r2, r3
 8004308:	1dfb      	adds	r3, r7, #7
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	429a      	cmp	r2, r3
 800430e:	d09e      	beq.n	800424e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	0018      	movs	r0, r3
 8004314:	46bd      	mov	sp, r7
 8004316:	b004      	add	sp, #16
 8004318:	bd80      	pop	{r7, pc}
	...

0800431c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b08e      	sub	sp, #56	@ 0x38
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004324:	f3ef 8310 	mrs	r3, PRIMASK
 8004328:	617b      	str	r3, [r7, #20]
  return(result);
 800432a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800432c:	637b      	str	r3, [r7, #52]	@ 0x34
 800432e:	2301      	movs	r3, #1
 8004330:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	f383 8810 	msr	PRIMASK, r3
}
 8004338:	46c0      	nop			@ (mov r8, r8)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4926      	ldr	r1, [pc, #152]	@ (80043e0 <UART_EndRxTransfer+0xc4>)
 8004346:	400a      	ands	r2, r1
 8004348:	601a      	str	r2, [r3, #0]
 800434a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800434c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	f383 8810 	msr	PRIMASK, r3
}
 8004354:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004356:	f3ef 8310 	mrs	r3, PRIMASK
 800435a:	623b      	str	r3, [r7, #32]
  return(result);
 800435c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800435e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004360:	2301      	movs	r3, #1
 8004362:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004366:	f383 8810 	msr	PRIMASK, r3
}
 800436a:	46c0      	nop			@ (mov r8, r8)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	689a      	ldr	r2, [r3, #8]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2101      	movs	r1, #1
 8004378:	438a      	bics	r2, r1
 800437a:	609a      	str	r2, [r3, #8]
 800437c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800437e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004382:	f383 8810 	msr	PRIMASK, r3
}
 8004386:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800438c:	2b01      	cmp	r3, #1
 800438e:	d118      	bne.n	80043c2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004390:	f3ef 8310 	mrs	r3, PRIMASK
 8004394:	60bb      	str	r3, [r7, #8]
  return(result);
 8004396:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004398:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800439a:	2301      	movs	r3, #1
 800439c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	f383 8810 	msr	PRIMASK, r3
}
 80043a4:	46c0      	nop			@ (mov r8, r8)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2110      	movs	r1, #16
 80043b2:	438a      	bics	r2, r1
 80043b4:	601a      	str	r2, [r3, #0]
 80043b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	f383 8810 	msr	PRIMASK, r3
}
 80043c0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2280      	movs	r2, #128	@ 0x80
 80043c6:	2120      	movs	r1, #32
 80043c8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80043d6:	46c0      	nop			@ (mov r8, r8)
 80043d8:	46bd      	mov	sp, r7
 80043da:	b00e      	add	sp, #56	@ 0x38
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	46c0      	nop			@ (mov r8, r8)
 80043e0:	fffffedf 	.word	0xfffffedf

080043e4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	225a      	movs	r2, #90	@ 0x5a
 80043f6:	2100      	movs	r1, #0
 80043f8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	0018      	movs	r0, r3
 80043fe:	f7ff fb0f 	bl	8003a20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004402:	46c0      	nop			@ (mov r8, r8)
 8004404:	46bd      	mov	sp, r7
 8004406:	b004      	add	sp, #16
 8004408:	bd80      	pop	{r7, pc}

0800440a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800440a:	b580      	push	{r7, lr}
 800440c:	b086      	sub	sp, #24
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004412:	f3ef 8310 	mrs	r3, PRIMASK
 8004416:	60bb      	str	r3, [r7, #8]
  return(result);
 8004418:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800441a:	617b      	str	r3, [r7, #20]
 800441c:	2301      	movs	r3, #1
 800441e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f383 8810 	msr	PRIMASK, r3
}
 8004426:	46c0      	nop			@ (mov r8, r8)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2140      	movs	r1, #64	@ 0x40
 8004434:	438a      	bics	r2, r1
 8004436:	601a      	str	r2, [r3, #0]
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	f383 8810 	msr	PRIMASK, r3
}
 8004442:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2220      	movs	r2, #32
 8004448:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	0018      	movs	r0, r3
 8004454:	f7ff fadc 	bl	8003a10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004458:	46c0      	nop			@ (mov r8, r8)
 800445a:	46bd      	mov	sp, r7
 800445c:	b006      	add	sp, #24
 800445e:	bd80      	pop	{r7, pc}

08004460 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004468:	46c0      	nop			@ (mov r8, r8)
 800446a:	46bd      	mov	sp, r7
 800446c:	b002      	add	sp, #8
 800446e:	bd80      	pop	{r7, pc}

08004470 <memset>:
 8004470:	0003      	movs	r3, r0
 8004472:	1882      	adds	r2, r0, r2
 8004474:	4293      	cmp	r3, r2
 8004476:	d100      	bne.n	800447a <memset+0xa>
 8004478:	4770      	bx	lr
 800447a:	7019      	strb	r1, [r3, #0]
 800447c:	3301      	adds	r3, #1
 800447e:	e7f9      	b.n	8004474 <memset+0x4>

08004480 <__libc_init_array>:
 8004480:	b570      	push	{r4, r5, r6, lr}
 8004482:	2600      	movs	r6, #0
 8004484:	4c0c      	ldr	r4, [pc, #48]	@ (80044b8 <__libc_init_array+0x38>)
 8004486:	4d0d      	ldr	r5, [pc, #52]	@ (80044bc <__libc_init_array+0x3c>)
 8004488:	1b64      	subs	r4, r4, r5
 800448a:	10a4      	asrs	r4, r4, #2
 800448c:	42a6      	cmp	r6, r4
 800448e:	d109      	bne.n	80044a4 <__libc_init_array+0x24>
 8004490:	2600      	movs	r6, #0
 8004492:	f000 f819 	bl	80044c8 <_init>
 8004496:	4c0a      	ldr	r4, [pc, #40]	@ (80044c0 <__libc_init_array+0x40>)
 8004498:	4d0a      	ldr	r5, [pc, #40]	@ (80044c4 <__libc_init_array+0x44>)
 800449a:	1b64      	subs	r4, r4, r5
 800449c:	10a4      	asrs	r4, r4, #2
 800449e:	42a6      	cmp	r6, r4
 80044a0:	d105      	bne.n	80044ae <__libc_init_array+0x2e>
 80044a2:	bd70      	pop	{r4, r5, r6, pc}
 80044a4:	00b3      	lsls	r3, r6, #2
 80044a6:	58eb      	ldr	r3, [r5, r3]
 80044a8:	4798      	blx	r3
 80044aa:	3601      	adds	r6, #1
 80044ac:	e7ee      	b.n	800448c <__libc_init_array+0xc>
 80044ae:	00b3      	lsls	r3, r6, #2
 80044b0:	58eb      	ldr	r3, [r5, r3]
 80044b2:	4798      	blx	r3
 80044b4:	3601      	adds	r6, #1
 80044b6:	e7f2      	b.n	800449e <__libc_init_array+0x1e>
 80044b8:	08004554 	.word	0x08004554
 80044bc:	08004554 	.word	0x08004554
 80044c0:	08004558 	.word	0x08004558
 80044c4:	08004554 	.word	0x08004554

080044c8 <_init>:
 80044c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ca:	46c0      	nop			@ (mov r8, r8)
 80044cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044ce:	bc08      	pop	{r3}
 80044d0:	469e      	mov	lr, r3
 80044d2:	4770      	bx	lr

080044d4 <_fini>:
 80044d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044d6:	46c0      	nop			@ (mov r8, r8)
 80044d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044da:	bc08      	pop	{r3}
 80044dc:	469e      	mov	lr, r3
 80044de:	4770      	bx	lr
