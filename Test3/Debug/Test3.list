
Test3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001de0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08001ea0  08001ea0  00002ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ebc  08001ebc  0000300c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001ebc  08001ebc  0000300c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001ebc  08001ebc  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ebc  08001ebc  00002ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001ec0  08001ec0  00002ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001ec4  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  2000000c  08001ed0  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000006c  08001ed0  0000306c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006e9d  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000149a  00000000  00000000  00009ed1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007d8  00000000  00000000  0000b370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005f2  00000000  00000000  0000bb48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000136d7  00000000  00000000  0000c13a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000089b6  00000000  00000000  0001f811  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007b42e  00000000  00000000  000281c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a35f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b70  00000000  00000000  000a3638  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000a51a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001e88 	.word	0x08001e88

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08001e88 	.word	0x08001e88

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0


	HAL_TIM_Base_Start_IT(&htim2);  // Start timer in interrupt mode
 8000224:	4b06      	ldr	r3, [pc, #24]	@ (8000240 <main+0x20>)
 8000226:	0018      	movs	r0, r3
 8000228:	f001 fa94 	bl	8001754 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800022c:	f000 f9ac 	bl	8000588 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000230:	f000 f81e 	bl	8000270 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000234:	f000 f8c6 	bl	80003c4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000238:	f000 f86e 	bl	8000318 <MX_TIM2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800023c:	46c0      	nop			@ (mov r8, r8)
 800023e:	e7fd      	b.n	800023c <main+0x1c>
 8000240:	20000028 	.word	0x20000028

08000244 <HAL_TIM_PeriodElapsedCallback>:
  }
  /* USER CODE END 3 */
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b082      	sub	sp, #8
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)  // Check if it's TIM2
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	681a      	ldr	r2, [r3, #0]
 8000250:	2380      	movs	r3, #128	@ 0x80
 8000252:	05db      	lsls	r3, r3, #23
 8000254:	429a      	cmp	r2, r3
 8000256:	d104      	bne.n	8000262 <HAL_TIM_PeriodElapsedCallback+0x1e>
    {
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5); // Toggle LED on PB5
 8000258:	4b04      	ldr	r3, [pc, #16]	@ (800026c <HAL_TIM_PeriodElapsedCallback+0x28>)
 800025a:	2120      	movs	r1, #32
 800025c:	0018      	movs	r0, r3
 800025e:	f000 fc7c 	bl	8000b5a <HAL_GPIO_TogglePin>
    }
}
 8000262:	46c0      	nop			@ (mov r8, r8)
 8000264:	46bd      	mov	sp, r7
 8000266:	b002      	add	sp, #8
 8000268:	bd80      	pop	{r7, pc}
 800026a:	46c0      	nop			@ (mov r8, r8)
 800026c:	50000400 	.word	0x50000400

08000270 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000270:	b590      	push	{r4, r7, lr}
 8000272:	b095      	sub	sp, #84	@ 0x54
 8000274:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000276:	2418      	movs	r4, #24
 8000278:	193b      	adds	r3, r7, r4
 800027a:	0018      	movs	r0, r3
 800027c:	2338      	movs	r3, #56	@ 0x38
 800027e:	001a      	movs	r2, r3
 8000280:	2100      	movs	r1, #0
 8000282:	f001 fdd5 	bl	8001e30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000286:	1d3b      	adds	r3, r7, #4
 8000288:	0018      	movs	r0, r3
 800028a:	2314      	movs	r3, #20
 800028c:	001a      	movs	r2, r3
 800028e:	2100      	movs	r1, #0
 8000290:	f001 fdce 	bl	8001e30 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000294:	4b1e      	ldr	r3, [pc, #120]	@ (8000310 <SystemClock_Config+0xa0>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a1e      	ldr	r2, [pc, #120]	@ (8000314 <SystemClock_Config+0xa4>)
 800029a:	401a      	ands	r2, r3
 800029c:	4b1c      	ldr	r3, [pc, #112]	@ (8000310 <SystemClock_Config+0xa0>)
 800029e:	2180      	movs	r1, #128	@ 0x80
 80002a0:	0109      	lsls	r1, r1, #4
 80002a2:	430a      	orrs	r2, r1
 80002a4:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80002a6:	0021      	movs	r1, r4
 80002a8:	187b      	adds	r3, r7, r1
 80002aa:	2210      	movs	r2, #16
 80002ac:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002ae:	187b      	adds	r3, r7, r1
 80002b0:	2201      	movs	r2, #1
 80002b2:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80002b4:	187b      	adds	r3, r7, r1
 80002b6:	2200      	movs	r2, #0
 80002b8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80002ba:	187b      	adds	r3, r7, r1
 80002bc:	22a0      	movs	r2, #160	@ 0xa0
 80002be:	0212      	lsls	r2, r2, #8
 80002c0:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002c2:	187b      	adds	r3, r7, r1
 80002c4:	2200      	movs	r2, #0
 80002c6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002c8:	187b      	adds	r3, r7, r1
 80002ca:	0018      	movs	r0, r3
 80002cc:	f000 fc60 	bl	8000b90 <HAL_RCC_OscConfig>
 80002d0:	1e03      	subs	r3, r0, #0
 80002d2:	d001      	beq.n	80002d8 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80002d4:	f000 f8ca 	bl	800046c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d8:	1d3b      	adds	r3, r7, #4
 80002da:	220f      	movs	r2, #15
 80002dc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	2200      	movs	r2, #0
 80002e2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e4:	1d3b      	adds	r3, r7, #4
 80002e6:	2200      	movs	r2, #0
 80002e8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	2200      	movs	r2, #0
 80002ee:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002f0:	1d3b      	adds	r3, r7, #4
 80002f2:	2200      	movs	r2, #0
 80002f4:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002f6:	1d3b      	adds	r3, r7, #4
 80002f8:	2100      	movs	r1, #0
 80002fa:	0018      	movs	r0, r3
 80002fc:	f001 f81c 	bl	8001338 <HAL_RCC_ClockConfig>
 8000300:	1e03      	subs	r3, r0, #0
 8000302:	d001      	beq.n	8000308 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000304:	f000 f8b2 	bl	800046c <Error_Handler>
  }
}
 8000308:	46c0      	nop			@ (mov r8, r8)
 800030a:	46bd      	mov	sp, r7
 800030c:	b015      	add	sp, #84	@ 0x54
 800030e:	bd90      	pop	{r4, r7, pc}
 8000310:	40007000 	.word	0x40007000
 8000314:	ffffe7ff 	.word	0xffffe7ff

08000318 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b086      	sub	sp, #24
 800031c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800031e:	2308      	movs	r3, #8
 8000320:	18fb      	adds	r3, r7, r3
 8000322:	0018      	movs	r0, r3
 8000324:	2310      	movs	r3, #16
 8000326:	001a      	movs	r2, r3
 8000328:	2100      	movs	r1, #0
 800032a:	f001 fd81 	bl	8001e30 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800032e:	003b      	movs	r3, r7
 8000330:	0018      	movs	r0, r3
 8000332:	2308      	movs	r3, #8
 8000334:	001a      	movs	r2, r3
 8000336:	2100      	movs	r1, #0
 8000338:	f001 fd7a 	bl	8001e30 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800033c:	4b1e      	ldr	r3, [pc, #120]	@ (80003b8 <MX_TIM2_Init+0xa0>)
 800033e:	2280      	movs	r2, #128	@ 0x80
 8000340:	05d2      	lsls	r2, r2, #23
 8000342:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31999;
 8000344:	4b1c      	ldr	r3, [pc, #112]	@ (80003b8 <MX_TIM2_Init+0xa0>)
 8000346:	4a1d      	ldr	r2, [pc, #116]	@ (80003bc <MX_TIM2_Init+0xa4>)
 8000348:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800034a:	4b1b      	ldr	r3, [pc, #108]	@ (80003b8 <MX_TIM2_Init+0xa0>)
 800034c:	2200      	movs	r2, #0
 800034e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000350:	4b19      	ldr	r3, [pc, #100]	@ (80003b8 <MX_TIM2_Init+0xa0>)
 8000352:	4a1b      	ldr	r2, [pc, #108]	@ (80003c0 <MX_TIM2_Init+0xa8>)
 8000354:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000356:	4b18      	ldr	r3, [pc, #96]	@ (80003b8 <MX_TIM2_Init+0xa0>)
 8000358:	2200      	movs	r2, #0
 800035a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800035c:	4b16      	ldr	r3, [pc, #88]	@ (80003b8 <MX_TIM2_Init+0xa0>)
 800035e:	2200      	movs	r2, #0
 8000360:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000362:	4b15      	ldr	r3, [pc, #84]	@ (80003b8 <MX_TIM2_Init+0xa0>)
 8000364:	0018      	movs	r0, r3
 8000366:	f001 f9b5 	bl	80016d4 <HAL_TIM_Base_Init>
 800036a:	1e03      	subs	r3, r0, #0
 800036c:	d001      	beq.n	8000372 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800036e:	f000 f87d 	bl	800046c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000372:	2108      	movs	r1, #8
 8000374:	187b      	adds	r3, r7, r1
 8000376:	2280      	movs	r2, #128	@ 0x80
 8000378:	0152      	lsls	r2, r2, #5
 800037a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800037c:	187a      	adds	r2, r7, r1
 800037e:	4b0e      	ldr	r3, [pc, #56]	@ (80003b8 <MX_TIM2_Init+0xa0>)
 8000380:	0011      	movs	r1, r2
 8000382:	0018      	movs	r0, r3
 8000384:	f001 fb04 	bl	8001990 <HAL_TIM_ConfigClockSource>
 8000388:	1e03      	subs	r3, r0, #0
 800038a:	d001      	beq.n	8000390 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800038c:	f000 f86e 	bl	800046c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000390:	003b      	movs	r3, r7
 8000392:	2200      	movs	r2, #0
 8000394:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000396:	003b      	movs	r3, r7
 8000398:	2200      	movs	r2, #0
 800039a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800039c:	003a      	movs	r2, r7
 800039e:	4b06      	ldr	r3, [pc, #24]	@ (80003b8 <MX_TIM2_Init+0xa0>)
 80003a0:	0011      	movs	r1, r2
 80003a2:	0018      	movs	r0, r3
 80003a4:	f001 fce6 	bl	8001d74 <HAL_TIMEx_MasterConfigSynchronization>
 80003a8:	1e03      	subs	r3, r0, #0
 80003aa:	d001      	beq.n	80003b0 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80003ac:	f000 f85e 	bl	800046c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80003b0:	46c0      	nop			@ (mov r8, r8)
 80003b2:	46bd      	mov	sp, r7
 80003b4:	b006      	add	sp, #24
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	20000028 	.word	0x20000028
 80003bc:	00007cff 	.word	0x00007cff
 80003c0:	000003e7 	.word	0x000003e7

080003c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003c4:	b590      	push	{r4, r7, lr}
 80003c6:	b089      	sub	sp, #36	@ 0x24
 80003c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ca:	240c      	movs	r4, #12
 80003cc:	193b      	adds	r3, r7, r4
 80003ce:	0018      	movs	r0, r3
 80003d0:	2314      	movs	r3, #20
 80003d2:	001a      	movs	r2, r3
 80003d4:	2100      	movs	r1, #0
 80003d6:	f001 fd2b 	bl	8001e30 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003da:	4b22      	ldr	r3, [pc, #136]	@ (8000464 <MX_GPIO_Init+0xa0>)
 80003dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80003de:	4b21      	ldr	r3, [pc, #132]	@ (8000464 <MX_GPIO_Init+0xa0>)
 80003e0:	2102      	movs	r1, #2
 80003e2:	430a      	orrs	r2, r1
 80003e4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80003e6:	4b1f      	ldr	r3, [pc, #124]	@ (8000464 <MX_GPIO_Init+0xa0>)
 80003e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80003ea:	2202      	movs	r2, #2
 80003ec:	4013      	ands	r3, r2
 80003ee:	60bb      	str	r3, [r7, #8]
 80003f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f2:	4b1c      	ldr	r3, [pc, #112]	@ (8000464 <MX_GPIO_Init+0xa0>)
 80003f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80003f6:	4b1b      	ldr	r3, [pc, #108]	@ (8000464 <MX_GPIO_Init+0xa0>)
 80003f8:	2101      	movs	r1, #1
 80003fa:	430a      	orrs	r2, r1
 80003fc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80003fe:	4b19      	ldr	r3, [pc, #100]	@ (8000464 <MX_GPIO_Init+0xa0>)
 8000400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000402:	2201      	movs	r2, #1
 8000404:	4013      	ands	r3, r2
 8000406:	607b      	str	r3, [r7, #4]
 8000408:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800040a:	4b17      	ldr	r3, [pc, #92]	@ (8000468 <MX_GPIO_Init+0xa4>)
 800040c:	2200      	movs	r2, #0
 800040e:	2120      	movs	r1, #32
 8000410:	0018      	movs	r0, r3
 8000412:	f000 fb85 	bl	8000b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000416:	193b      	adds	r3, r7, r4
 8000418:	2220      	movs	r2, #32
 800041a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800041c:	193b      	adds	r3, r7, r4
 800041e:	2201      	movs	r2, #1
 8000420:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000422:	193b      	adds	r3, r7, r4
 8000424:	2200      	movs	r2, #0
 8000426:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000428:	193b      	adds	r3, r7, r4
 800042a:	2201      	movs	r2, #1
 800042c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800042e:	193b      	adds	r3, r7, r4
 8000430:	4a0d      	ldr	r2, [pc, #52]	@ (8000468 <MX_GPIO_Init+0xa4>)
 8000432:	0019      	movs	r1, r3
 8000434:	0010      	movs	r0, r2
 8000436:	f000 f9f5 	bl	8000824 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800043a:	0021      	movs	r1, r4
 800043c:	187b      	adds	r3, r7, r1
 800043e:	2201      	movs	r2, #1
 8000440:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000442:	187b      	adds	r3, r7, r1
 8000444:	2200      	movs	r2, #0
 8000446:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000448:	187b      	adds	r3, r7, r1
 800044a:	2200      	movs	r2, #0
 800044c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800044e:	187a      	adds	r2, r7, r1
 8000450:	23a0      	movs	r3, #160	@ 0xa0
 8000452:	05db      	lsls	r3, r3, #23
 8000454:	0011      	movs	r1, r2
 8000456:	0018      	movs	r0, r3
 8000458:	f000 f9e4 	bl	8000824 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800045c:	46c0      	nop			@ (mov r8, r8)
 800045e:	46bd      	mov	sp, r7
 8000460:	b009      	add	sp, #36	@ 0x24
 8000462:	bd90      	pop	{r4, r7, pc}
 8000464:	40021000 	.word	0x40021000
 8000468:	50000400 	.word	0x50000400

0800046c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000470:	b672      	cpsid	i
}
 8000472:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000474:	46c0      	nop			@ (mov r8, r8)
 8000476:	e7fd      	b.n	8000474 <Error_Handler+0x8>

08000478 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800047c:	4b07      	ldr	r3, [pc, #28]	@ (800049c <HAL_MspInit+0x24>)
 800047e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000480:	4b06      	ldr	r3, [pc, #24]	@ (800049c <HAL_MspInit+0x24>)
 8000482:	2101      	movs	r1, #1
 8000484:	430a      	orrs	r2, r1
 8000486:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000488:	4b04      	ldr	r3, [pc, #16]	@ (800049c <HAL_MspInit+0x24>)
 800048a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800048c:	4b03      	ldr	r3, [pc, #12]	@ (800049c <HAL_MspInit+0x24>)
 800048e:	2180      	movs	r1, #128	@ 0x80
 8000490:	0549      	lsls	r1, r1, #21
 8000492:	430a      	orrs	r2, r1
 8000494:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000496:	46c0      	nop			@ (mov r8, r8)
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}
 800049c:	40021000 	.word	0x40021000

080004a0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	681a      	ldr	r2, [r3, #0]
 80004ac:	2380      	movs	r3, #128	@ 0x80
 80004ae:	05db      	lsls	r3, r3, #23
 80004b0:	429a      	cmp	r2, r3
 80004b2:	d10d      	bne.n	80004d0 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80004b4:	4b08      	ldr	r3, [pc, #32]	@ (80004d8 <HAL_TIM_Base_MspInit+0x38>)
 80004b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80004b8:	4b07      	ldr	r3, [pc, #28]	@ (80004d8 <HAL_TIM_Base_MspInit+0x38>)
 80004ba:	2101      	movs	r1, #1
 80004bc:	430a      	orrs	r2, r1
 80004be:	639a      	str	r2, [r3, #56]	@ 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80004c0:	2200      	movs	r2, #0
 80004c2:	2100      	movs	r1, #0
 80004c4:	200f      	movs	r0, #15
 80004c6:	f000 f97b 	bl	80007c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80004ca:	200f      	movs	r0, #15
 80004cc:	f000 f98d 	bl	80007ea <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80004d0:	46c0      	nop			@ (mov r8, r8)
 80004d2:	46bd      	mov	sp, r7
 80004d4:	b002      	add	sp, #8
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	40021000 	.word	0x40021000

080004dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004e0:	46c0      	nop			@ (mov r8, r8)
 80004e2:	e7fd      	b.n	80004e0 <NMI_Handler+0x4>

080004e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004e8:	46c0      	nop			@ (mov r8, r8)
 80004ea:	e7fd      	b.n	80004e8 <HardFault_Handler+0x4>

080004ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80004f0:	46c0      	nop			@ (mov r8, r8)
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}

080004f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004f6:	b580      	push	{r7, lr}
 80004f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004fa:	46c0      	nop			@ (mov r8, r8)
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}

08000500 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000504:	f000 f894 	bl	8000630 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000508:	46c0      	nop			@ (mov r8, r8)
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
	...

08000510 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000514:	4b03      	ldr	r3, [pc, #12]	@ (8000524 <TIM2_IRQHandler+0x14>)
 8000516:	0018      	movs	r0, r3
 8000518:	f001 f96e 	bl	80017f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800051c:	46c0      	nop			@ (mov r8, r8)
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	46c0      	nop			@ (mov r8, r8)
 8000524:	20000028 	.word	0x20000028

08000528 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800052c:	46c0      	nop			@ (mov r8, r8)
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
	...

08000534 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000534:	480d      	ldr	r0, [pc, #52]	@ (800056c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000536:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000538:	f7ff fff6 	bl	8000528 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800053c:	480c      	ldr	r0, [pc, #48]	@ (8000570 <LoopForever+0x6>)
  ldr r1, =_edata
 800053e:	490d      	ldr	r1, [pc, #52]	@ (8000574 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000540:	4a0d      	ldr	r2, [pc, #52]	@ (8000578 <LoopForever+0xe>)
  movs r3, #0
 8000542:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000544:	e002      	b.n	800054c <LoopCopyDataInit>

08000546 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000546:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000548:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800054a:	3304      	adds	r3, #4

0800054c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800054c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800054e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000550:	d3f9      	bcc.n	8000546 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000552:	4a0a      	ldr	r2, [pc, #40]	@ (800057c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000554:	4c0a      	ldr	r4, [pc, #40]	@ (8000580 <LoopForever+0x16>)
  movs r3, #0
 8000556:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000558:	e001      	b.n	800055e <LoopFillZerobss>

0800055a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800055a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800055c:	3204      	adds	r2, #4

0800055e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800055e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000560:	d3fb      	bcc.n	800055a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000562:	f001 fc6d 	bl	8001e40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000566:	f7ff fe5b 	bl	8000220 <main>

0800056a <LoopForever>:

LoopForever:
    b LoopForever
 800056a:	e7fe      	b.n	800056a <LoopForever>
   ldr   r0, =_estack
 800056c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000570:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000574:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000578:	08001ec4 	.word	0x08001ec4
  ldr r2, =_sbss
 800057c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000580:	2000006c 	.word	0x2000006c

08000584 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000584:	e7fe      	b.n	8000584 <ADC1_COMP_IRQHandler>
	...

08000588 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800058e:	1dfb      	adds	r3, r7, #7
 8000590:	2200      	movs	r2, #0
 8000592:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000594:	4b0b      	ldr	r3, [pc, #44]	@ (80005c4 <HAL_Init+0x3c>)
 8000596:	681a      	ldr	r2, [r3, #0]
 8000598:	4b0a      	ldr	r3, [pc, #40]	@ (80005c4 <HAL_Init+0x3c>)
 800059a:	2140      	movs	r1, #64	@ 0x40
 800059c:	430a      	orrs	r2, r1
 800059e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005a0:	2003      	movs	r0, #3
 80005a2:	f000 f811 	bl	80005c8 <HAL_InitTick>
 80005a6:	1e03      	subs	r3, r0, #0
 80005a8:	d003      	beq.n	80005b2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80005aa:	1dfb      	adds	r3, r7, #7
 80005ac:	2201      	movs	r2, #1
 80005ae:	701a      	strb	r2, [r3, #0]
 80005b0:	e001      	b.n	80005b6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005b2:	f7ff ff61 	bl	8000478 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005b6:	1dfb      	adds	r3, r7, #7
 80005b8:	781b      	ldrb	r3, [r3, #0]
}
 80005ba:	0018      	movs	r0, r3
 80005bc:	46bd      	mov	sp, r7
 80005be:	b002      	add	sp, #8
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	46c0      	nop			@ (mov r8, r8)
 80005c4:	40022000 	.word	0x40022000

080005c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005c8:	b590      	push	{r4, r7, lr}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005d0:	4b14      	ldr	r3, [pc, #80]	@ (8000624 <HAL_InitTick+0x5c>)
 80005d2:	681c      	ldr	r4, [r3, #0]
 80005d4:	4b14      	ldr	r3, [pc, #80]	@ (8000628 <HAL_InitTick+0x60>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	0019      	movs	r1, r3
 80005da:	23fa      	movs	r3, #250	@ 0xfa
 80005dc:	0098      	lsls	r0, r3, #2
 80005de:	f7ff fd93 	bl	8000108 <__udivsi3>
 80005e2:	0003      	movs	r3, r0
 80005e4:	0019      	movs	r1, r3
 80005e6:	0020      	movs	r0, r4
 80005e8:	f7ff fd8e 	bl	8000108 <__udivsi3>
 80005ec:	0003      	movs	r3, r0
 80005ee:	0018      	movs	r0, r3
 80005f0:	f000 f90b 	bl	800080a <HAL_SYSTICK_Config>
 80005f4:	1e03      	subs	r3, r0, #0
 80005f6:	d001      	beq.n	80005fc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80005f8:	2301      	movs	r3, #1
 80005fa:	e00f      	b.n	800061c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	2b03      	cmp	r3, #3
 8000600:	d80b      	bhi.n	800061a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000602:	6879      	ldr	r1, [r7, #4]
 8000604:	2301      	movs	r3, #1
 8000606:	425b      	negs	r3, r3
 8000608:	2200      	movs	r2, #0
 800060a:	0018      	movs	r0, r3
 800060c:	f000 f8d8 	bl	80007c0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000610:	4b06      	ldr	r3, [pc, #24]	@ (800062c <HAL_InitTick+0x64>)
 8000612:	687a      	ldr	r2, [r7, #4]
 8000614:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000616:	2300      	movs	r3, #0
 8000618:	e000      	b.n	800061c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800061a:	2301      	movs	r3, #1
}
 800061c:	0018      	movs	r0, r3
 800061e:	46bd      	mov	sp, r7
 8000620:	b003      	add	sp, #12
 8000622:	bd90      	pop	{r4, r7, pc}
 8000624:	20000000 	.word	0x20000000
 8000628:	20000008 	.word	0x20000008
 800062c:	20000004 	.word	0x20000004

08000630 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000634:	4b05      	ldr	r3, [pc, #20]	@ (800064c <HAL_IncTick+0x1c>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	001a      	movs	r2, r3
 800063a:	4b05      	ldr	r3, [pc, #20]	@ (8000650 <HAL_IncTick+0x20>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	18d2      	adds	r2, r2, r3
 8000640:	4b03      	ldr	r3, [pc, #12]	@ (8000650 <HAL_IncTick+0x20>)
 8000642:	601a      	str	r2, [r3, #0]
}
 8000644:	46c0      	nop			@ (mov r8, r8)
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	46c0      	nop			@ (mov r8, r8)
 800064c:	20000008 	.word	0x20000008
 8000650:	20000068 	.word	0x20000068

08000654 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  return uwTick;
 8000658:	4b02      	ldr	r3, [pc, #8]	@ (8000664 <HAL_GetTick+0x10>)
 800065a:	681b      	ldr	r3, [r3, #0]
}
 800065c:	0018      	movs	r0, r3
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	46c0      	nop			@ (mov r8, r8)
 8000664:	20000068 	.word	0x20000068

08000668 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	0002      	movs	r2, r0
 8000670:	1dfb      	adds	r3, r7, #7
 8000672:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000674:	1dfb      	adds	r3, r7, #7
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	2b7f      	cmp	r3, #127	@ 0x7f
 800067a:	d809      	bhi.n	8000690 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800067c:	1dfb      	adds	r3, r7, #7
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	001a      	movs	r2, r3
 8000682:	231f      	movs	r3, #31
 8000684:	401a      	ands	r2, r3
 8000686:	4b04      	ldr	r3, [pc, #16]	@ (8000698 <__NVIC_EnableIRQ+0x30>)
 8000688:	2101      	movs	r1, #1
 800068a:	4091      	lsls	r1, r2
 800068c:	000a      	movs	r2, r1
 800068e:	601a      	str	r2, [r3, #0]
  }
}
 8000690:	46c0      	nop			@ (mov r8, r8)
 8000692:	46bd      	mov	sp, r7
 8000694:	b002      	add	sp, #8
 8000696:	bd80      	pop	{r7, pc}
 8000698:	e000e100 	.word	0xe000e100

0800069c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800069c:	b590      	push	{r4, r7, lr}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	0002      	movs	r2, r0
 80006a4:	6039      	str	r1, [r7, #0]
 80006a6:	1dfb      	adds	r3, r7, #7
 80006a8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80006aa:	1dfb      	adds	r3, r7, #7
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80006b0:	d828      	bhi.n	8000704 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006b2:	4a2f      	ldr	r2, [pc, #188]	@ (8000770 <__NVIC_SetPriority+0xd4>)
 80006b4:	1dfb      	adds	r3, r7, #7
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	b25b      	sxtb	r3, r3
 80006ba:	089b      	lsrs	r3, r3, #2
 80006bc:	33c0      	adds	r3, #192	@ 0xc0
 80006be:	009b      	lsls	r3, r3, #2
 80006c0:	589b      	ldr	r3, [r3, r2]
 80006c2:	1dfa      	adds	r2, r7, #7
 80006c4:	7812      	ldrb	r2, [r2, #0]
 80006c6:	0011      	movs	r1, r2
 80006c8:	2203      	movs	r2, #3
 80006ca:	400a      	ands	r2, r1
 80006cc:	00d2      	lsls	r2, r2, #3
 80006ce:	21ff      	movs	r1, #255	@ 0xff
 80006d0:	4091      	lsls	r1, r2
 80006d2:	000a      	movs	r2, r1
 80006d4:	43d2      	mvns	r2, r2
 80006d6:	401a      	ands	r2, r3
 80006d8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	019b      	lsls	r3, r3, #6
 80006de:	22ff      	movs	r2, #255	@ 0xff
 80006e0:	401a      	ands	r2, r3
 80006e2:	1dfb      	adds	r3, r7, #7
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	0018      	movs	r0, r3
 80006e8:	2303      	movs	r3, #3
 80006ea:	4003      	ands	r3, r0
 80006ec:	00db      	lsls	r3, r3, #3
 80006ee:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006f0:	481f      	ldr	r0, [pc, #124]	@ (8000770 <__NVIC_SetPriority+0xd4>)
 80006f2:	1dfb      	adds	r3, r7, #7
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	b25b      	sxtb	r3, r3
 80006f8:	089b      	lsrs	r3, r3, #2
 80006fa:	430a      	orrs	r2, r1
 80006fc:	33c0      	adds	r3, #192	@ 0xc0
 80006fe:	009b      	lsls	r3, r3, #2
 8000700:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000702:	e031      	b.n	8000768 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000704:	4a1b      	ldr	r2, [pc, #108]	@ (8000774 <__NVIC_SetPriority+0xd8>)
 8000706:	1dfb      	adds	r3, r7, #7
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	0019      	movs	r1, r3
 800070c:	230f      	movs	r3, #15
 800070e:	400b      	ands	r3, r1
 8000710:	3b08      	subs	r3, #8
 8000712:	089b      	lsrs	r3, r3, #2
 8000714:	3306      	adds	r3, #6
 8000716:	009b      	lsls	r3, r3, #2
 8000718:	18d3      	adds	r3, r2, r3
 800071a:	3304      	adds	r3, #4
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	1dfa      	adds	r2, r7, #7
 8000720:	7812      	ldrb	r2, [r2, #0]
 8000722:	0011      	movs	r1, r2
 8000724:	2203      	movs	r2, #3
 8000726:	400a      	ands	r2, r1
 8000728:	00d2      	lsls	r2, r2, #3
 800072a:	21ff      	movs	r1, #255	@ 0xff
 800072c:	4091      	lsls	r1, r2
 800072e:	000a      	movs	r2, r1
 8000730:	43d2      	mvns	r2, r2
 8000732:	401a      	ands	r2, r3
 8000734:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	019b      	lsls	r3, r3, #6
 800073a:	22ff      	movs	r2, #255	@ 0xff
 800073c:	401a      	ands	r2, r3
 800073e:	1dfb      	adds	r3, r7, #7
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	0018      	movs	r0, r3
 8000744:	2303      	movs	r3, #3
 8000746:	4003      	ands	r3, r0
 8000748:	00db      	lsls	r3, r3, #3
 800074a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800074c:	4809      	ldr	r0, [pc, #36]	@ (8000774 <__NVIC_SetPriority+0xd8>)
 800074e:	1dfb      	adds	r3, r7, #7
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	001c      	movs	r4, r3
 8000754:	230f      	movs	r3, #15
 8000756:	4023      	ands	r3, r4
 8000758:	3b08      	subs	r3, #8
 800075a:	089b      	lsrs	r3, r3, #2
 800075c:	430a      	orrs	r2, r1
 800075e:	3306      	adds	r3, #6
 8000760:	009b      	lsls	r3, r3, #2
 8000762:	18c3      	adds	r3, r0, r3
 8000764:	3304      	adds	r3, #4
 8000766:	601a      	str	r2, [r3, #0]
}
 8000768:	46c0      	nop			@ (mov r8, r8)
 800076a:	46bd      	mov	sp, r7
 800076c:	b003      	add	sp, #12
 800076e:	bd90      	pop	{r4, r7, pc}
 8000770:	e000e100 	.word	0xe000e100
 8000774:	e000ed00 	.word	0xe000ed00

08000778 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	1e5a      	subs	r2, r3, #1
 8000784:	2380      	movs	r3, #128	@ 0x80
 8000786:	045b      	lsls	r3, r3, #17
 8000788:	429a      	cmp	r2, r3
 800078a:	d301      	bcc.n	8000790 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800078c:	2301      	movs	r3, #1
 800078e:	e010      	b.n	80007b2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000790:	4b0a      	ldr	r3, [pc, #40]	@ (80007bc <SysTick_Config+0x44>)
 8000792:	687a      	ldr	r2, [r7, #4]
 8000794:	3a01      	subs	r2, #1
 8000796:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000798:	2301      	movs	r3, #1
 800079a:	425b      	negs	r3, r3
 800079c:	2103      	movs	r1, #3
 800079e:	0018      	movs	r0, r3
 80007a0:	f7ff ff7c 	bl	800069c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007a4:	4b05      	ldr	r3, [pc, #20]	@ (80007bc <SysTick_Config+0x44>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007aa:	4b04      	ldr	r3, [pc, #16]	@ (80007bc <SysTick_Config+0x44>)
 80007ac:	2207      	movs	r2, #7
 80007ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007b0:	2300      	movs	r3, #0
}
 80007b2:	0018      	movs	r0, r3
 80007b4:	46bd      	mov	sp, r7
 80007b6:	b002      	add	sp, #8
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	46c0      	nop			@ (mov r8, r8)
 80007bc:	e000e010 	.word	0xe000e010

080007c0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	60b9      	str	r1, [r7, #8]
 80007c8:	607a      	str	r2, [r7, #4]
 80007ca:	210f      	movs	r1, #15
 80007cc:	187b      	adds	r3, r7, r1
 80007ce:	1c02      	adds	r2, r0, #0
 80007d0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80007d2:	68ba      	ldr	r2, [r7, #8]
 80007d4:	187b      	adds	r3, r7, r1
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	b25b      	sxtb	r3, r3
 80007da:	0011      	movs	r1, r2
 80007dc:	0018      	movs	r0, r3
 80007de:	f7ff ff5d 	bl	800069c <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 80007e2:	46c0      	nop			@ (mov r8, r8)
 80007e4:	46bd      	mov	sp, r7
 80007e6:	b004      	add	sp, #16
 80007e8:	bd80      	pop	{r7, pc}

080007ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	b082      	sub	sp, #8
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	0002      	movs	r2, r0
 80007f2:	1dfb      	adds	r3, r7, #7
 80007f4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007f6:	1dfb      	adds	r3, r7, #7
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	b25b      	sxtb	r3, r3
 80007fc:	0018      	movs	r0, r3
 80007fe:	f7ff ff33 	bl	8000668 <__NVIC_EnableIRQ>
}
 8000802:	46c0      	nop			@ (mov r8, r8)
 8000804:	46bd      	mov	sp, r7
 8000806:	b002      	add	sp, #8
 8000808:	bd80      	pop	{r7, pc}

0800080a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800080a:	b580      	push	{r7, lr}
 800080c:	b082      	sub	sp, #8
 800080e:	af00      	add	r7, sp, #0
 8000810:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	0018      	movs	r0, r3
 8000816:	f7ff ffaf 	bl	8000778 <SysTick_Config>
 800081a:	0003      	movs	r3, r0
}
 800081c:	0018      	movs	r0, r3
 800081e:	46bd      	mov	sp, r7
 8000820:	b002      	add	sp, #8
 8000822:	bd80      	pop	{r7, pc}

08000824 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b086      	sub	sp, #24
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800082e:	2300      	movs	r3, #0
 8000830:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000832:	2300      	movs	r3, #0
 8000834:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000836:	2300      	movs	r3, #0
 8000838:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800083a:	e155      	b.n	8000ae8 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	2101      	movs	r1, #1
 8000842:	697a      	ldr	r2, [r7, #20]
 8000844:	4091      	lsls	r1, r2
 8000846:	000a      	movs	r2, r1
 8000848:	4013      	ands	r3, r2
 800084a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d100      	bne.n	8000854 <HAL_GPIO_Init+0x30>
 8000852:	e146      	b.n	8000ae2 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	685b      	ldr	r3, [r3, #4]
 8000858:	2203      	movs	r2, #3
 800085a:	4013      	ands	r3, r2
 800085c:	2b01      	cmp	r3, #1
 800085e:	d005      	beq.n	800086c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	685b      	ldr	r3, [r3, #4]
 8000864:	2203      	movs	r2, #3
 8000866:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000868:	2b02      	cmp	r3, #2
 800086a:	d130      	bne.n	80008ce <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	689b      	ldr	r3, [r3, #8]
 8000870:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000872:	697b      	ldr	r3, [r7, #20]
 8000874:	005b      	lsls	r3, r3, #1
 8000876:	2203      	movs	r2, #3
 8000878:	409a      	lsls	r2, r3
 800087a:	0013      	movs	r3, r2
 800087c:	43da      	mvns	r2, r3
 800087e:	693b      	ldr	r3, [r7, #16]
 8000880:	4013      	ands	r3, r2
 8000882:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	68da      	ldr	r2, [r3, #12]
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	005b      	lsls	r3, r3, #1
 800088c:	409a      	lsls	r2, r3
 800088e:	0013      	movs	r3, r2
 8000890:	693a      	ldr	r2, [r7, #16]
 8000892:	4313      	orrs	r3, r2
 8000894:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	693a      	ldr	r2, [r7, #16]
 800089a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	685b      	ldr	r3, [r3, #4]
 80008a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008a2:	2201      	movs	r2, #1
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	409a      	lsls	r2, r3
 80008a8:	0013      	movs	r3, r2
 80008aa:	43da      	mvns	r2, r3
 80008ac:	693b      	ldr	r3, [r7, #16]
 80008ae:	4013      	ands	r3, r2
 80008b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	685b      	ldr	r3, [r3, #4]
 80008b6:	091b      	lsrs	r3, r3, #4
 80008b8:	2201      	movs	r2, #1
 80008ba:	401a      	ands	r2, r3
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	409a      	lsls	r2, r3
 80008c0:	0013      	movs	r3, r2
 80008c2:	693a      	ldr	r2, [r7, #16]
 80008c4:	4313      	orrs	r3, r2
 80008c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	693a      	ldr	r2, [r7, #16]
 80008cc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	2203      	movs	r2, #3
 80008d4:	4013      	ands	r3, r2
 80008d6:	2b03      	cmp	r3, #3
 80008d8:	d017      	beq.n	800090a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	68db      	ldr	r3, [r3, #12]
 80008de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	005b      	lsls	r3, r3, #1
 80008e4:	2203      	movs	r2, #3
 80008e6:	409a      	lsls	r2, r3
 80008e8:	0013      	movs	r3, r2
 80008ea:	43da      	mvns	r2, r3
 80008ec:	693b      	ldr	r3, [r7, #16]
 80008ee:	4013      	ands	r3, r2
 80008f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	689a      	ldr	r2, [r3, #8]
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	005b      	lsls	r3, r3, #1
 80008fa:	409a      	lsls	r2, r3
 80008fc:	0013      	movs	r3, r2
 80008fe:	693a      	ldr	r2, [r7, #16]
 8000900:	4313      	orrs	r3, r2
 8000902:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	693a      	ldr	r2, [r7, #16]
 8000908:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	685b      	ldr	r3, [r3, #4]
 800090e:	2203      	movs	r2, #3
 8000910:	4013      	ands	r3, r2
 8000912:	2b02      	cmp	r3, #2
 8000914:	d123      	bne.n	800095e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000916:	697b      	ldr	r3, [r7, #20]
 8000918:	08da      	lsrs	r2, r3, #3
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	3208      	adds	r2, #8
 800091e:	0092      	lsls	r2, r2, #2
 8000920:	58d3      	ldr	r3, [r2, r3]
 8000922:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	2207      	movs	r2, #7
 8000928:	4013      	ands	r3, r2
 800092a:	009b      	lsls	r3, r3, #2
 800092c:	220f      	movs	r2, #15
 800092e:	409a      	lsls	r2, r3
 8000930:	0013      	movs	r3, r2
 8000932:	43da      	mvns	r2, r3
 8000934:	693b      	ldr	r3, [r7, #16]
 8000936:	4013      	ands	r3, r2
 8000938:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	691a      	ldr	r2, [r3, #16]
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	2107      	movs	r1, #7
 8000942:	400b      	ands	r3, r1
 8000944:	009b      	lsls	r3, r3, #2
 8000946:	409a      	lsls	r2, r3
 8000948:	0013      	movs	r3, r2
 800094a:	693a      	ldr	r2, [r7, #16]
 800094c:	4313      	orrs	r3, r2
 800094e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	08da      	lsrs	r2, r3, #3
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	3208      	adds	r2, #8
 8000958:	0092      	lsls	r2, r2, #2
 800095a:	6939      	ldr	r1, [r7, #16]
 800095c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	005b      	lsls	r3, r3, #1
 8000968:	2203      	movs	r2, #3
 800096a:	409a      	lsls	r2, r3
 800096c:	0013      	movs	r3, r2
 800096e:	43da      	mvns	r2, r3
 8000970:	693b      	ldr	r3, [r7, #16]
 8000972:	4013      	ands	r3, r2
 8000974:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	2203      	movs	r2, #3
 800097c:	401a      	ands	r2, r3
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	005b      	lsls	r3, r3, #1
 8000982:	409a      	lsls	r2, r3
 8000984:	0013      	movs	r3, r2
 8000986:	693a      	ldr	r2, [r7, #16]
 8000988:	4313      	orrs	r3, r2
 800098a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	693a      	ldr	r2, [r7, #16]
 8000990:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	685a      	ldr	r2, [r3, #4]
 8000996:	23c0      	movs	r3, #192	@ 0xc0
 8000998:	029b      	lsls	r3, r3, #10
 800099a:	4013      	ands	r3, r2
 800099c:	d100      	bne.n	80009a0 <HAL_GPIO_Init+0x17c>
 800099e:	e0a0      	b.n	8000ae2 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a0:	4b57      	ldr	r3, [pc, #348]	@ (8000b00 <HAL_GPIO_Init+0x2dc>)
 80009a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009a4:	4b56      	ldr	r3, [pc, #344]	@ (8000b00 <HAL_GPIO_Init+0x2dc>)
 80009a6:	2101      	movs	r1, #1
 80009a8:	430a      	orrs	r2, r1
 80009aa:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80009ac:	4a55      	ldr	r2, [pc, #340]	@ (8000b04 <HAL_GPIO_Init+0x2e0>)
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	089b      	lsrs	r3, r3, #2
 80009b2:	3302      	adds	r3, #2
 80009b4:	009b      	lsls	r3, r3, #2
 80009b6:	589b      	ldr	r3, [r3, r2]
 80009b8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	2203      	movs	r2, #3
 80009be:	4013      	ands	r3, r2
 80009c0:	009b      	lsls	r3, r3, #2
 80009c2:	220f      	movs	r2, #15
 80009c4:	409a      	lsls	r2, r3
 80009c6:	0013      	movs	r3, r2
 80009c8:	43da      	mvns	r2, r3
 80009ca:	693b      	ldr	r3, [r7, #16]
 80009cc:	4013      	ands	r3, r2
 80009ce:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80009d0:	687a      	ldr	r2, [r7, #4]
 80009d2:	23a0      	movs	r3, #160	@ 0xa0
 80009d4:	05db      	lsls	r3, r3, #23
 80009d6:	429a      	cmp	r2, r3
 80009d8:	d01f      	beq.n	8000a1a <HAL_GPIO_Init+0x1f6>
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4a4a      	ldr	r2, [pc, #296]	@ (8000b08 <HAL_GPIO_Init+0x2e4>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d019      	beq.n	8000a16 <HAL_GPIO_Init+0x1f2>
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4a49      	ldr	r2, [pc, #292]	@ (8000b0c <HAL_GPIO_Init+0x2e8>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d013      	beq.n	8000a12 <HAL_GPIO_Init+0x1ee>
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4a48      	ldr	r2, [pc, #288]	@ (8000b10 <HAL_GPIO_Init+0x2ec>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d00d      	beq.n	8000a0e <HAL_GPIO_Init+0x1ea>
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4a47      	ldr	r2, [pc, #284]	@ (8000b14 <HAL_GPIO_Init+0x2f0>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d007      	beq.n	8000a0a <HAL_GPIO_Init+0x1e6>
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4a46      	ldr	r2, [pc, #280]	@ (8000b18 <HAL_GPIO_Init+0x2f4>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d101      	bne.n	8000a06 <HAL_GPIO_Init+0x1e2>
 8000a02:	2305      	movs	r3, #5
 8000a04:	e00a      	b.n	8000a1c <HAL_GPIO_Init+0x1f8>
 8000a06:	2306      	movs	r3, #6
 8000a08:	e008      	b.n	8000a1c <HAL_GPIO_Init+0x1f8>
 8000a0a:	2304      	movs	r3, #4
 8000a0c:	e006      	b.n	8000a1c <HAL_GPIO_Init+0x1f8>
 8000a0e:	2303      	movs	r3, #3
 8000a10:	e004      	b.n	8000a1c <HAL_GPIO_Init+0x1f8>
 8000a12:	2302      	movs	r3, #2
 8000a14:	e002      	b.n	8000a1c <HAL_GPIO_Init+0x1f8>
 8000a16:	2301      	movs	r3, #1
 8000a18:	e000      	b.n	8000a1c <HAL_GPIO_Init+0x1f8>
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	697a      	ldr	r2, [r7, #20]
 8000a1e:	2103      	movs	r1, #3
 8000a20:	400a      	ands	r2, r1
 8000a22:	0092      	lsls	r2, r2, #2
 8000a24:	4093      	lsls	r3, r2
 8000a26:	693a      	ldr	r2, [r7, #16]
 8000a28:	4313      	orrs	r3, r2
 8000a2a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a2c:	4935      	ldr	r1, [pc, #212]	@ (8000b04 <HAL_GPIO_Init+0x2e0>)
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	089b      	lsrs	r3, r3, #2
 8000a32:	3302      	adds	r3, #2
 8000a34:	009b      	lsls	r3, r3, #2
 8000a36:	693a      	ldr	r2, [r7, #16]
 8000a38:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a3a:	4b38      	ldr	r3, [pc, #224]	@ (8000b1c <HAL_GPIO_Init+0x2f8>)
 8000a3c:	689b      	ldr	r3, [r3, #8]
 8000a3e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	43da      	mvns	r2, r3
 8000a44:	693b      	ldr	r3, [r7, #16]
 8000a46:	4013      	ands	r3, r2
 8000a48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	685a      	ldr	r2, [r3, #4]
 8000a4e:	2380      	movs	r3, #128	@ 0x80
 8000a50:	035b      	lsls	r3, r3, #13
 8000a52:	4013      	ands	r3, r2
 8000a54:	d003      	beq.n	8000a5e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8000a56:	693a      	ldr	r2, [r7, #16]
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	4313      	orrs	r3, r2
 8000a5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000a5e:	4b2f      	ldr	r3, [pc, #188]	@ (8000b1c <HAL_GPIO_Init+0x2f8>)
 8000a60:	693a      	ldr	r2, [r7, #16]
 8000a62:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000a64:	4b2d      	ldr	r3, [pc, #180]	@ (8000b1c <HAL_GPIO_Init+0x2f8>)
 8000a66:	68db      	ldr	r3, [r3, #12]
 8000a68:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	43da      	mvns	r2, r3
 8000a6e:	693b      	ldr	r3, [r7, #16]
 8000a70:	4013      	ands	r3, r2
 8000a72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	685a      	ldr	r2, [r3, #4]
 8000a78:	2380      	movs	r3, #128	@ 0x80
 8000a7a:	039b      	lsls	r3, r3, #14
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	d003      	beq.n	8000a88 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000a80:	693a      	ldr	r2, [r7, #16]
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	4313      	orrs	r3, r2
 8000a86:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000a88:	4b24      	ldr	r3, [pc, #144]	@ (8000b1c <HAL_GPIO_Init+0x2f8>)
 8000a8a:	693a      	ldr	r2, [r7, #16]
 8000a8c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8000a8e:	4b23      	ldr	r3, [pc, #140]	@ (8000b1c <HAL_GPIO_Init+0x2f8>)
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	43da      	mvns	r2, r3
 8000a98:	693b      	ldr	r3, [r7, #16]
 8000a9a:	4013      	ands	r3, r2
 8000a9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	685a      	ldr	r2, [r3, #4]
 8000aa2:	2380      	movs	r3, #128	@ 0x80
 8000aa4:	029b      	lsls	r3, r3, #10
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	d003      	beq.n	8000ab2 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8000aaa:	693a      	ldr	r2, [r7, #16]
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	4313      	orrs	r3, r2
 8000ab0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ab2:	4b1a      	ldr	r3, [pc, #104]	@ (8000b1c <HAL_GPIO_Init+0x2f8>)
 8000ab4:	693a      	ldr	r2, [r7, #16]
 8000ab6:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ab8:	4b18      	ldr	r3, [pc, #96]	@ (8000b1c <HAL_GPIO_Init+0x2f8>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	43da      	mvns	r2, r3
 8000ac2:	693b      	ldr	r3, [r7, #16]
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	685a      	ldr	r2, [r3, #4]
 8000acc:	2380      	movs	r3, #128	@ 0x80
 8000ace:	025b      	lsls	r3, r3, #9
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	d003      	beq.n	8000adc <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8000ad4:	693a      	ldr	r2, [r7, #16]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000adc:	4b0f      	ldr	r3, [pc, #60]	@ (8000b1c <HAL_GPIO_Init+0x2f8>)
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	40da      	lsrs	r2, r3
 8000af0:	1e13      	subs	r3, r2, #0
 8000af2:	d000      	beq.n	8000af6 <HAL_GPIO_Init+0x2d2>
 8000af4:	e6a2      	b.n	800083c <HAL_GPIO_Init+0x18>
  }
}
 8000af6:	46c0      	nop			@ (mov r8, r8)
 8000af8:	46c0      	nop			@ (mov r8, r8)
 8000afa:	46bd      	mov	sp, r7
 8000afc:	b006      	add	sp, #24
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40021000 	.word	0x40021000
 8000b04:	40010000 	.word	0x40010000
 8000b08:	50000400 	.word	0x50000400
 8000b0c:	50000800 	.word	0x50000800
 8000b10:	50000c00 	.word	0x50000c00
 8000b14:	50001000 	.word	0x50001000
 8000b18:	50001c00 	.word	0x50001c00
 8000b1c:	40010400 	.word	0x40010400

08000b20 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	0008      	movs	r0, r1
 8000b2a:	0011      	movs	r1, r2
 8000b2c:	1cbb      	adds	r3, r7, #2
 8000b2e:	1c02      	adds	r2, r0, #0
 8000b30:	801a      	strh	r2, [r3, #0]
 8000b32:	1c7b      	adds	r3, r7, #1
 8000b34:	1c0a      	adds	r2, r1, #0
 8000b36:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b38:	1c7b      	adds	r3, r7, #1
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d004      	beq.n	8000b4a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b40:	1cbb      	adds	r3, r7, #2
 8000b42:	881a      	ldrh	r2, [r3, #0]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000b48:	e003      	b.n	8000b52 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000b4a:	1cbb      	adds	r3, r7, #2
 8000b4c:	881a      	ldrh	r2, [r3, #0]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000b52:	46c0      	nop			@ (mov r8, r8)
 8000b54:	46bd      	mov	sp, r7
 8000b56:	b002      	add	sp, #8
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b084      	sub	sp, #16
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
 8000b62:	000a      	movs	r2, r1
 8000b64:	1cbb      	adds	r3, r7, #2
 8000b66:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	695b      	ldr	r3, [r3, #20]
 8000b6c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000b6e:	1cbb      	adds	r3, r7, #2
 8000b70:	881b      	ldrh	r3, [r3, #0]
 8000b72:	68fa      	ldr	r2, [r7, #12]
 8000b74:	4013      	ands	r3, r2
 8000b76:	041a      	lsls	r2, r3, #16
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	43db      	mvns	r3, r3
 8000b7c:	1cb9      	adds	r1, r7, #2
 8000b7e:	8809      	ldrh	r1, [r1, #0]
 8000b80:	400b      	ands	r3, r1
 8000b82:	431a      	orrs	r2, r3
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	619a      	str	r2, [r3, #24]
}
 8000b88:	46c0      	nop			@ (mov r8, r8)
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	b004      	add	sp, #16
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b90:	b5b0      	push	{r4, r5, r7, lr}
 8000b92:	b08a      	sub	sp, #40	@ 0x28
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d102      	bne.n	8000ba4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	f000 fbbf 	bl	8001322 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ba4:	4bc9      	ldr	r3, [pc, #804]	@ (8000ecc <HAL_RCC_OscConfig+0x33c>)
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	220c      	movs	r2, #12
 8000baa:	4013      	ands	r3, r2
 8000bac:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000bae:	4bc7      	ldr	r3, [pc, #796]	@ (8000ecc <HAL_RCC_OscConfig+0x33c>)
 8000bb0:	68da      	ldr	r2, [r3, #12]
 8000bb2:	2380      	movs	r3, #128	@ 0x80
 8000bb4:	025b      	lsls	r3, r3, #9
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	d100      	bne.n	8000bc6 <HAL_RCC_OscConfig+0x36>
 8000bc4:	e07e      	b.n	8000cc4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	2b08      	cmp	r3, #8
 8000bca:	d007      	beq.n	8000bdc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000bcc:	69fb      	ldr	r3, [r7, #28]
 8000bce:	2b0c      	cmp	r3, #12
 8000bd0:	d112      	bne.n	8000bf8 <HAL_RCC_OscConfig+0x68>
 8000bd2:	69ba      	ldr	r2, [r7, #24]
 8000bd4:	2380      	movs	r3, #128	@ 0x80
 8000bd6:	025b      	lsls	r3, r3, #9
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d10d      	bne.n	8000bf8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bdc:	4bbb      	ldr	r3, [pc, #748]	@ (8000ecc <HAL_RCC_OscConfig+0x33c>)
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	2380      	movs	r3, #128	@ 0x80
 8000be2:	029b      	lsls	r3, r3, #10
 8000be4:	4013      	ands	r3, r2
 8000be6:	d100      	bne.n	8000bea <HAL_RCC_OscConfig+0x5a>
 8000be8:	e06b      	b.n	8000cc2 <HAL_RCC_OscConfig+0x132>
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d167      	bne.n	8000cc2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	f000 fb95 	bl	8001322 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	685a      	ldr	r2, [r3, #4]
 8000bfc:	2380      	movs	r3, #128	@ 0x80
 8000bfe:	025b      	lsls	r3, r3, #9
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d107      	bne.n	8000c14 <HAL_RCC_OscConfig+0x84>
 8000c04:	4bb1      	ldr	r3, [pc, #708]	@ (8000ecc <HAL_RCC_OscConfig+0x33c>)
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	4bb0      	ldr	r3, [pc, #704]	@ (8000ecc <HAL_RCC_OscConfig+0x33c>)
 8000c0a:	2180      	movs	r1, #128	@ 0x80
 8000c0c:	0249      	lsls	r1, r1, #9
 8000c0e:	430a      	orrs	r2, r1
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	e027      	b.n	8000c64 <HAL_RCC_OscConfig+0xd4>
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	685a      	ldr	r2, [r3, #4]
 8000c18:	23a0      	movs	r3, #160	@ 0xa0
 8000c1a:	02db      	lsls	r3, r3, #11
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d10e      	bne.n	8000c3e <HAL_RCC_OscConfig+0xae>
 8000c20:	4baa      	ldr	r3, [pc, #680]	@ (8000ecc <HAL_RCC_OscConfig+0x33c>)
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	4ba9      	ldr	r3, [pc, #676]	@ (8000ecc <HAL_RCC_OscConfig+0x33c>)
 8000c26:	2180      	movs	r1, #128	@ 0x80
 8000c28:	02c9      	lsls	r1, r1, #11
 8000c2a:	430a      	orrs	r2, r1
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	4ba7      	ldr	r3, [pc, #668]	@ (8000ecc <HAL_RCC_OscConfig+0x33c>)
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	4ba6      	ldr	r3, [pc, #664]	@ (8000ecc <HAL_RCC_OscConfig+0x33c>)
 8000c34:	2180      	movs	r1, #128	@ 0x80
 8000c36:	0249      	lsls	r1, r1, #9
 8000c38:	430a      	orrs	r2, r1
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	e012      	b.n	8000c64 <HAL_RCC_OscConfig+0xd4>
 8000c3e:	4ba3      	ldr	r3, [pc, #652]	@ (8000ecc <HAL_RCC_OscConfig+0x33c>)
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	4ba2      	ldr	r3, [pc, #648]	@ (8000ecc <HAL_RCC_OscConfig+0x33c>)
 8000c44:	49a2      	ldr	r1, [pc, #648]	@ (8000ed0 <HAL_RCC_OscConfig+0x340>)
 8000c46:	400a      	ands	r2, r1
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	4ba0      	ldr	r3, [pc, #640]	@ (8000ecc <HAL_RCC_OscConfig+0x33c>)
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	2380      	movs	r3, #128	@ 0x80
 8000c50:	025b      	lsls	r3, r3, #9
 8000c52:	4013      	ands	r3, r2
 8000c54:	60fb      	str	r3, [r7, #12]
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	4b9c      	ldr	r3, [pc, #624]	@ (8000ecc <HAL_RCC_OscConfig+0x33c>)
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	4b9b      	ldr	r3, [pc, #620]	@ (8000ecc <HAL_RCC_OscConfig+0x33c>)
 8000c5e:	499d      	ldr	r1, [pc, #628]	@ (8000ed4 <HAL_RCC_OscConfig+0x344>)
 8000c60:	400a      	ands	r2, r1
 8000c62:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d015      	beq.n	8000c98 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c6c:	f7ff fcf2 	bl	8000654 <HAL_GetTick>
 8000c70:	0003      	movs	r3, r0
 8000c72:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000c74:	e009      	b.n	8000c8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c76:	f7ff fced 	bl	8000654 <HAL_GetTick>
 8000c7a:	0002      	movs	r2, r0
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	1ad3      	subs	r3, r2, r3
 8000c80:	2b64      	cmp	r3, #100	@ 0x64
 8000c82:	d902      	bls.n	8000c8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000c84:	2303      	movs	r3, #3
 8000c86:	f000 fb4c 	bl	8001322 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000c8a:	4b90      	ldr	r3, [pc, #576]	@ (8000ecc <HAL_RCC_OscConfig+0x33c>)
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	2380      	movs	r3, #128	@ 0x80
 8000c90:	029b      	lsls	r3, r3, #10
 8000c92:	4013      	ands	r3, r2
 8000c94:	d0ef      	beq.n	8000c76 <HAL_RCC_OscConfig+0xe6>
 8000c96:	e015      	b.n	8000cc4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c98:	f7ff fcdc 	bl	8000654 <HAL_GetTick>
 8000c9c:	0003      	movs	r3, r0
 8000c9e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000ca0:	e008      	b.n	8000cb4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ca2:	f7ff fcd7 	bl	8000654 <HAL_GetTick>
 8000ca6:	0002      	movs	r2, r0
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	1ad3      	subs	r3, r2, r3
 8000cac:	2b64      	cmp	r3, #100	@ 0x64
 8000cae:	d901      	bls.n	8000cb4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	e336      	b.n	8001322 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000cb4:	4b85      	ldr	r3, [pc, #532]	@ (8000ecc <HAL_RCC_OscConfig+0x33c>)
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	2380      	movs	r3, #128	@ 0x80
 8000cba:	029b      	lsls	r3, r3, #10
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	d1f0      	bne.n	8000ca2 <HAL_RCC_OscConfig+0x112>
 8000cc0:	e000      	b.n	8000cc4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cc2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2202      	movs	r2, #2
 8000cca:	4013      	ands	r3, r2
 8000ccc:	d100      	bne.n	8000cd0 <HAL_RCC_OscConfig+0x140>
 8000cce:	e099      	b.n	8000e04 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8000cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cd8:	2220      	movs	r2, #32
 8000cda:	4013      	ands	r3, r2
 8000cdc:	d009      	beq.n	8000cf2 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8000cde:	4b7b      	ldr	r3, [pc, #492]	@ (8000ecc <HAL_RCC_OscConfig+0x33c>)
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	4b7a      	ldr	r3, [pc, #488]	@ (8000ecc <HAL_RCC_OscConfig+0x33c>)
 8000ce4:	2120      	movs	r1, #32
 8000ce6:	430a      	orrs	r2, r1
 8000ce8:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8000cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cec:	2220      	movs	r2, #32
 8000cee:	4393      	bics	r3, r2
 8000cf0:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	2b04      	cmp	r3, #4
 8000cf6:	d005      	beq.n	8000d04 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000cf8:	69fb      	ldr	r3, [r7, #28]
 8000cfa:	2b0c      	cmp	r3, #12
 8000cfc:	d13e      	bne.n	8000d7c <HAL_RCC_OscConfig+0x1ec>
 8000cfe:	69bb      	ldr	r3, [r7, #24]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d13b      	bne.n	8000d7c <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8000d04:	4b71      	ldr	r3, [pc, #452]	@ (8000ecc <HAL_RCC_OscConfig+0x33c>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	2204      	movs	r2, #4
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	d004      	beq.n	8000d18 <HAL_RCC_OscConfig+0x188>
 8000d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d101      	bne.n	8000d18 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8000d14:	2301      	movs	r3, #1
 8000d16:	e304      	b.n	8001322 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d18:	4b6c      	ldr	r3, [pc, #432]	@ (8000ecc <HAL_RCC_OscConfig+0x33c>)
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	4a6e      	ldr	r2, [pc, #440]	@ (8000ed8 <HAL_RCC_OscConfig+0x348>)
 8000d1e:	4013      	ands	r3, r2
 8000d20:	0019      	movs	r1, r3
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	691b      	ldr	r3, [r3, #16]
 8000d26:	021a      	lsls	r2, r3, #8
 8000d28:	4b68      	ldr	r3, [pc, #416]	@ (8000ecc <HAL_RCC_OscConfig+0x33c>)
 8000d2a:	430a      	orrs	r2, r1
 8000d2c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000d2e:	4b67      	ldr	r3, [pc, #412]	@ (8000ecc <HAL_RCC_OscConfig+0x33c>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	2209      	movs	r2, #9
 8000d34:	4393      	bics	r3, r2
 8000d36:	0019      	movs	r1, r3
 8000d38:	4b64      	ldr	r3, [pc, #400]	@ (8000ecc <HAL_RCC_OscConfig+0x33c>)
 8000d3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d3c:	430a      	orrs	r2, r1
 8000d3e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000d40:	f000 fc42 	bl	80015c8 <HAL_RCC_GetSysClockFreq>
 8000d44:	0001      	movs	r1, r0
 8000d46:	4b61      	ldr	r3, [pc, #388]	@ (8000ecc <HAL_RCC_OscConfig+0x33c>)
 8000d48:	68db      	ldr	r3, [r3, #12]
 8000d4a:	091b      	lsrs	r3, r3, #4
 8000d4c:	220f      	movs	r2, #15
 8000d4e:	4013      	ands	r3, r2
 8000d50:	4a62      	ldr	r2, [pc, #392]	@ (8000edc <HAL_RCC_OscConfig+0x34c>)
 8000d52:	5cd3      	ldrb	r3, [r2, r3]
 8000d54:	000a      	movs	r2, r1
 8000d56:	40da      	lsrs	r2, r3
 8000d58:	4b61      	ldr	r3, [pc, #388]	@ (8000ee0 <HAL_RCC_OscConfig+0x350>)
 8000d5a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8000d5c:	4b61      	ldr	r3, [pc, #388]	@ (8000ee4 <HAL_RCC_OscConfig+0x354>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2513      	movs	r5, #19
 8000d62:	197c      	adds	r4, r7, r5
 8000d64:	0018      	movs	r0, r3
 8000d66:	f7ff fc2f 	bl	80005c8 <HAL_InitTick>
 8000d6a:	0003      	movs	r3, r0
 8000d6c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8000d6e:	197b      	adds	r3, r7, r5
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d046      	beq.n	8000e04 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8000d76:	197b      	adds	r3, r7, r5
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	e2d2      	b.n	8001322 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8000d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d027      	beq.n	8000dd2 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000d82:	4b52      	ldr	r3, [pc, #328]	@ (8000ecc <HAL_RCC_OscConfig+0x33c>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	2209      	movs	r2, #9
 8000d88:	4393      	bics	r3, r2
 8000d8a:	0019      	movs	r1, r3
 8000d8c:	4b4f      	ldr	r3, [pc, #316]	@ (8000ecc <HAL_RCC_OscConfig+0x33c>)
 8000d8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d90:	430a      	orrs	r2, r1
 8000d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d94:	f7ff fc5e 	bl	8000654 <HAL_GetTick>
 8000d98:	0003      	movs	r3, r0
 8000d9a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000d9c:	e008      	b.n	8000db0 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d9e:	f7ff fc59 	bl	8000654 <HAL_GetTick>
 8000da2:	0002      	movs	r2, r0
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	1ad3      	subs	r3, r2, r3
 8000da8:	2b02      	cmp	r3, #2
 8000daa:	d901      	bls.n	8000db0 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8000dac:	2303      	movs	r3, #3
 8000dae:	e2b8      	b.n	8001322 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000db0:	4b46      	ldr	r3, [pc, #280]	@ (8000ecc <HAL_RCC_OscConfig+0x33c>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2204      	movs	r2, #4
 8000db6:	4013      	ands	r3, r2
 8000db8:	d0f1      	beq.n	8000d9e <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dba:	4b44      	ldr	r3, [pc, #272]	@ (8000ecc <HAL_RCC_OscConfig+0x33c>)
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	4a46      	ldr	r2, [pc, #280]	@ (8000ed8 <HAL_RCC_OscConfig+0x348>)
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	0019      	movs	r1, r3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	691b      	ldr	r3, [r3, #16]
 8000dc8:	021a      	lsls	r2, r3, #8
 8000dca:	4b40      	ldr	r3, [pc, #256]	@ (8000ecc <HAL_RCC_OscConfig+0x33c>)
 8000dcc:	430a      	orrs	r2, r1
 8000dce:	605a      	str	r2, [r3, #4]
 8000dd0:	e018      	b.n	8000e04 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000dd2:	4b3e      	ldr	r3, [pc, #248]	@ (8000ecc <HAL_RCC_OscConfig+0x33c>)
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	4b3d      	ldr	r3, [pc, #244]	@ (8000ecc <HAL_RCC_OscConfig+0x33c>)
 8000dd8:	2101      	movs	r1, #1
 8000dda:	438a      	bics	r2, r1
 8000ddc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dde:	f7ff fc39 	bl	8000654 <HAL_GetTick>
 8000de2:	0003      	movs	r3, r0
 8000de4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000de6:	e008      	b.n	8000dfa <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000de8:	f7ff fc34 	bl	8000654 <HAL_GetTick>
 8000dec:	0002      	movs	r2, r0
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	1ad3      	subs	r3, r2, r3
 8000df2:	2b02      	cmp	r3, #2
 8000df4:	d901      	bls.n	8000dfa <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8000df6:	2303      	movs	r3, #3
 8000df8:	e293      	b.n	8001322 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000dfa:	4b34      	ldr	r3, [pc, #208]	@ (8000ecc <HAL_RCC_OscConfig+0x33c>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2204      	movs	r2, #4
 8000e00:	4013      	ands	r3, r2
 8000e02:	d1f1      	bne.n	8000de8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2210      	movs	r2, #16
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	d100      	bne.n	8000e10 <HAL_RCC_OscConfig+0x280>
 8000e0e:	e0a2      	b.n	8000f56 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d140      	bne.n	8000e98 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e16:	4b2d      	ldr	r3, [pc, #180]	@ (8000ecc <HAL_RCC_OscConfig+0x33c>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	2380      	movs	r3, #128	@ 0x80
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	4013      	ands	r3, r2
 8000e20:	d005      	beq.n	8000e2e <HAL_RCC_OscConfig+0x29e>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	69db      	ldr	r3, [r3, #28]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d101      	bne.n	8000e2e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e279      	b.n	8001322 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e2e:	4b27      	ldr	r3, [pc, #156]	@ (8000ecc <HAL_RCC_OscConfig+0x33c>)
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	4a2d      	ldr	r2, [pc, #180]	@ (8000ee8 <HAL_RCC_OscConfig+0x358>)
 8000e34:	4013      	ands	r3, r2
 8000e36:	0019      	movs	r1, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000e3c:	4b23      	ldr	r3, [pc, #140]	@ (8000ecc <HAL_RCC_OscConfig+0x33c>)
 8000e3e:	430a      	orrs	r2, r1
 8000e40:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e42:	4b22      	ldr	r3, [pc, #136]	@ (8000ecc <HAL_RCC_OscConfig+0x33c>)
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	021b      	lsls	r3, r3, #8
 8000e48:	0a19      	lsrs	r1, r3, #8
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6a1b      	ldr	r3, [r3, #32]
 8000e4e:	061a      	lsls	r2, r3, #24
 8000e50:	4b1e      	ldr	r3, [pc, #120]	@ (8000ecc <HAL_RCC_OscConfig+0x33c>)
 8000e52:	430a      	orrs	r2, r1
 8000e54:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e5a:	0b5b      	lsrs	r3, r3, #13
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	2280      	movs	r2, #128	@ 0x80
 8000e60:	0212      	lsls	r2, r2, #8
 8000e62:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000e64:	4b19      	ldr	r3, [pc, #100]	@ (8000ecc <HAL_RCC_OscConfig+0x33c>)
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	091b      	lsrs	r3, r3, #4
 8000e6a:	210f      	movs	r1, #15
 8000e6c:	400b      	ands	r3, r1
 8000e6e:	491b      	ldr	r1, [pc, #108]	@ (8000edc <HAL_RCC_OscConfig+0x34c>)
 8000e70:	5ccb      	ldrb	r3, [r1, r3]
 8000e72:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000e74:	4b1a      	ldr	r3, [pc, #104]	@ (8000ee0 <HAL_RCC_OscConfig+0x350>)
 8000e76:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8000e78:	4b1a      	ldr	r3, [pc, #104]	@ (8000ee4 <HAL_RCC_OscConfig+0x354>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	2513      	movs	r5, #19
 8000e7e:	197c      	adds	r4, r7, r5
 8000e80:	0018      	movs	r0, r3
 8000e82:	f7ff fba1 	bl	80005c8 <HAL_InitTick>
 8000e86:	0003      	movs	r3, r0
 8000e88:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8000e8a:	197b      	adds	r3, r7, r5
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d061      	beq.n	8000f56 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8000e92:	197b      	adds	r3, r7, r5
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	e244      	b.n	8001322 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	69db      	ldr	r3, [r3, #28]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d040      	beq.n	8000f22 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8000ecc <HAL_RCC_OscConfig+0x33c>)
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	4b09      	ldr	r3, [pc, #36]	@ (8000ecc <HAL_RCC_OscConfig+0x33c>)
 8000ea6:	2180      	movs	r1, #128	@ 0x80
 8000ea8:	0049      	lsls	r1, r1, #1
 8000eaa:	430a      	orrs	r2, r1
 8000eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eae:	f7ff fbd1 	bl	8000654 <HAL_GetTick>
 8000eb2:	0003      	movs	r3, r0
 8000eb4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000eb6:	e019      	b.n	8000eec <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000eb8:	f7ff fbcc 	bl	8000654 <HAL_GetTick>
 8000ebc:	0002      	movs	r2, r0
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	2b02      	cmp	r3, #2
 8000ec4:	d912      	bls.n	8000eec <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	e22b      	b.n	8001322 <HAL_RCC_OscConfig+0x792>
 8000eca:	46c0      	nop			@ (mov r8, r8)
 8000ecc:	40021000 	.word	0x40021000
 8000ed0:	fffeffff 	.word	0xfffeffff
 8000ed4:	fffbffff 	.word	0xfffbffff
 8000ed8:	ffffe0ff 	.word	0xffffe0ff
 8000edc:	08001ea0 	.word	0x08001ea0
 8000ee0:	20000000 	.word	0x20000000
 8000ee4:	20000004 	.word	0x20000004
 8000ee8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000eec:	4bca      	ldr	r3, [pc, #808]	@ (8001218 <HAL_RCC_OscConfig+0x688>)
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	2380      	movs	r3, #128	@ 0x80
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	d0df      	beq.n	8000eb8 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ef8:	4bc7      	ldr	r3, [pc, #796]	@ (8001218 <HAL_RCC_OscConfig+0x688>)
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	4ac7      	ldr	r2, [pc, #796]	@ (800121c <HAL_RCC_OscConfig+0x68c>)
 8000efe:	4013      	ands	r3, r2
 8000f00:	0019      	movs	r1, r3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000f06:	4bc4      	ldr	r3, [pc, #784]	@ (8001218 <HAL_RCC_OscConfig+0x688>)
 8000f08:	430a      	orrs	r2, r1
 8000f0a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f0c:	4bc2      	ldr	r3, [pc, #776]	@ (8001218 <HAL_RCC_OscConfig+0x688>)
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	021b      	lsls	r3, r3, #8
 8000f12:	0a19      	lsrs	r1, r3, #8
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6a1b      	ldr	r3, [r3, #32]
 8000f18:	061a      	lsls	r2, r3, #24
 8000f1a:	4bbf      	ldr	r3, [pc, #764]	@ (8001218 <HAL_RCC_OscConfig+0x688>)
 8000f1c:	430a      	orrs	r2, r1
 8000f1e:	605a      	str	r2, [r3, #4]
 8000f20:	e019      	b.n	8000f56 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000f22:	4bbd      	ldr	r3, [pc, #756]	@ (8001218 <HAL_RCC_OscConfig+0x688>)
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	4bbc      	ldr	r3, [pc, #752]	@ (8001218 <HAL_RCC_OscConfig+0x688>)
 8000f28:	49bd      	ldr	r1, [pc, #756]	@ (8001220 <HAL_RCC_OscConfig+0x690>)
 8000f2a:	400a      	ands	r2, r1
 8000f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f2e:	f7ff fb91 	bl	8000654 <HAL_GetTick>
 8000f32:	0003      	movs	r3, r0
 8000f34:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000f36:	e008      	b.n	8000f4a <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f38:	f7ff fb8c 	bl	8000654 <HAL_GetTick>
 8000f3c:	0002      	movs	r2, r0
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	2b02      	cmp	r3, #2
 8000f44:	d901      	bls.n	8000f4a <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8000f46:	2303      	movs	r3, #3
 8000f48:	e1eb      	b.n	8001322 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000f4a:	4bb3      	ldr	r3, [pc, #716]	@ (8001218 <HAL_RCC_OscConfig+0x688>)
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	2380      	movs	r3, #128	@ 0x80
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	4013      	ands	r3, r2
 8000f54:	d1f0      	bne.n	8000f38 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	2208      	movs	r2, #8
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	d036      	beq.n	8000fce <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	695b      	ldr	r3, [r3, #20]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d019      	beq.n	8000f9c <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f68:	4bab      	ldr	r3, [pc, #684]	@ (8001218 <HAL_RCC_OscConfig+0x688>)
 8000f6a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000f6c:	4baa      	ldr	r3, [pc, #680]	@ (8001218 <HAL_RCC_OscConfig+0x688>)
 8000f6e:	2101      	movs	r1, #1
 8000f70:	430a      	orrs	r2, r1
 8000f72:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f74:	f7ff fb6e 	bl	8000654 <HAL_GetTick>
 8000f78:	0003      	movs	r3, r0
 8000f7a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000f7c:	e008      	b.n	8000f90 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f7e:	f7ff fb69 	bl	8000654 <HAL_GetTick>
 8000f82:	0002      	movs	r2, r0
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	1ad3      	subs	r3, r2, r3
 8000f88:	2b02      	cmp	r3, #2
 8000f8a:	d901      	bls.n	8000f90 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	e1c8      	b.n	8001322 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000f90:	4ba1      	ldr	r3, [pc, #644]	@ (8001218 <HAL_RCC_OscConfig+0x688>)
 8000f92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000f94:	2202      	movs	r2, #2
 8000f96:	4013      	ands	r3, r2
 8000f98:	d0f1      	beq.n	8000f7e <HAL_RCC_OscConfig+0x3ee>
 8000f9a:	e018      	b.n	8000fce <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f9c:	4b9e      	ldr	r3, [pc, #632]	@ (8001218 <HAL_RCC_OscConfig+0x688>)
 8000f9e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000fa0:	4b9d      	ldr	r3, [pc, #628]	@ (8001218 <HAL_RCC_OscConfig+0x688>)
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	438a      	bics	r2, r1
 8000fa6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fa8:	f7ff fb54 	bl	8000654 <HAL_GetTick>
 8000fac:	0003      	movs	r3, r0
 8000fae:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000fb0:	e008      	b.n	8000fc4 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fb2:	f7ff fb4f 	bl	8000654 <HAL_GetTick>
 8000fb6:	0002      	movs	r2, r0
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	1ad3      	subs	r3, r2, r3
 8000fbc:	2b02      	cmp	r3, #2
 8000fbe:	d901      	bls.n	8000fc4 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	e1ae      	b.n	8001322 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000fc4:	4b94      	ldr	r3, [pc, #592]	@ (8001218 <HAL_RCC_OscConfig+0x688>)
 8000fc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000fc8:	2202      	movs	r2, #2
 8000fca:	4013      	ands	r3, r2
 8000fcc:	d1f1      	bne.n	8000fb2 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	2204      	movs	r2, #4
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	d100      	bne.n	8000fda <HAL_RCC_OscConfig+0x44a>
 8000fd8:	e0ae      	b.n	8001138 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fda:	2023      	movs	r0, #35	@ 0x23
 8000fdc:	183b      	adds	r3, r7, r0
 8000fde:	2200      	movs	r2, #0
 8000fe0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fe2:	4b8d      	ldr	r3, [pc, #564]	@ (8001218 <HAL_RCC_OscConfig+0x688>)
 8000fe4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000fe6:	2380      	movs	r3, #128	@ 0x80
 8000fe8:	055b      	lsls	r3, r3, #21
 8000fea:	4013      	ands	r3, r2
 8000fec:	d109      	bne.n	8001002 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fee:	4b8a      	ldr	r3, [pc, #552]	@ (8001218 <HAL_RCC_OscConfig+0x688>)
 8000ff0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000ff2:	4b89      	ldr	r3, [pc, #548]	@ (8001218 <HAL_RCC_OscConfig+0x688>)
 8000ff4:	2180      	movs	r1, #128	@ 0x80
 8000ff6:	0549      	lsls	r1, r1, #21
 8000ff8:	430a      	orrs	r2, r1
 8000ffa:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8000ffc:	183b      	adds	r3, r7, r0
 8000ffe:	2201      	movs	r2, #1
 8001000:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001002:	4b88      	ldr	r3, [pc, #544]	@ (8001224 <HAL_RCC_OscConfig+0x694>)
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	2380      	movs	r3, #128	@ 0x80
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	4013      	ands	r3, r2
 800100c:	d11a      	bne.n	8001044 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800100e:	4b85      	ldr	r3, [pc, #532]	@ (8001224 <HAL_RCC_OscConfig+0x694>)
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	4b84      	ldr	r3, [pc, #528]	@ (8001224 <HAL_RCC_OscConfig+0x694>)
 8001014:	2180      	movs	r1, #128	@ 0x80
 8001016:	0049      	lsls	r1, r1, #1
 8001018:	430a      	orrs	r2, r1
 800101a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800101c:	f7ff fb1a 	bl	8000654 <HAL_GetTick>
 8001020:	0003      	movs	r3, r0
 8001022:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001024:	e008      	b.n	8001038 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001026:	f7ff fb15 	bl	8000654 <HAL_GetTick>
 800102a:	0002      	movs	r2, r0
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	2b64      	cmp	r3, #100	@ 0x64
 8001032:	d901      	bls.n	8001038 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8001034:	2303      	movs	r3, #3
 8001036:	e174      	b.n	8001322 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001038:	4b7a      	ldr	r3, [pc, #488]	@ (8001224 <HAL_RCC_OscConfig+0x694>)
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	2380      	movs	r3, #128	@ 0x80
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	4013      	ands	r3, r2
 8001042:	d0f0      	beq.n	8001026 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	689a      	ldr	r2, [r3, #8]
 8001048:	2380      	movs	r3, #128	@ 0x80
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	429a      	cmp	r2, r3
 800104e:	d107      	bne.n	8001060 <HAL_RCC_OscConfig+0x4d0>
 8001050:	4b71      	ldr	r3, [pc, #452]	@ (8001218 <HAL_RCC_OscConfig+0x688>)
 8001052:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001054:	4b70      	ldr	r3, [pc, #448]	@ (8001218 <HAL_RCC_OscConfig+0x688>)
 8001056:	2180      	movs	r1, #128	@ 0x80
 8001058:	0049      	lsls	r1, r1, #1
 800105a:	430a      	orrs	r2, r1
 800105c:	651a      	str	r2, [r3, #80]	@ 0x50
 800105e:	e031      	b.n	80010c4 <HAL_RCC_OscConfig+0x534>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d10c      	bne.n	8001082 <HAL_RCC_OscConfig+0x4f2>
 8001068:	4b6b      	ldr	r3, [pc, #428]	@ (8001218 <HAL_RCC_OscConfig+0x688>)
 800106a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800106c:	4b6a      	ldr	r3, [pc, #424]	@ (8001218 <HAL_RCC_OscConfig+0x688>)
 800106e:	496c      	ldr	r1, [pc, #432]	@ (8001220 <HAL_RCC_OscConfig+0x690>)
 8001070:	400a      	ands	r2, r1
 8001072:	651a      	str	r2, [r3, #80]	@ 0x50
 8001074:	4b68      	ldr	r3, [pc, #416]	@ (8001218 <HAL_RCC_OscConfig+0x688>)
 8001076:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001078:	4b67      	ldr	r3, [pc, #412]	@ (8001218 <HAL_RCC_OscConfig+0x688>)
 800107a:	496b      	ldr	r1, [pc, #428]	@ (8001228 <HAL_RCC_OscConfig+0x698>)
 800107c:	400a      	ands	r2, r1
 800107e:	651a      	str	r2, [r3, #80]	@ 0x50
 8001080:	e020      	b.n	80010c4 <HAL_RCC_OscConfig+0x534>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	689a      	ldr	r2, [r3, #8]
 8001086:	23a0      	movs	r3, #160	@ 0xa0
 8001088:	00db      	lsls	r3, r3, #3
 800108a:	429a      	cmp	r2, r3
 800108c:	d10e      	bne.n	80010ac <HAL_RCC_OscConfig+0x51c>
 800108e:	4b62      	ldr	r3, [pc, #392]	@ (8001218 <HAL_RCC_OscConfig+0x688>)
 8001090:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001092:	4b61      	ldr	r3, [pc, #388]	@ (8001218 <HAL_RCC_OscConfig+0x688>)
 8001094:	2180      	movs	r1, #128	@ 0x80
 8001096:	00c9      	lsls	r1, r1, #3
 8001098:	430a      	orrs	r2, r1
 800109a:	651a      	str	r2, [r3, #80]	@ 0x50
 800109c:	4b5e      	ldr	r3, [pc, #376]	@ (8001218 <HAL_RCC_OscConfig+0x688>)
 800109e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80010a0:	4b5d      	ldr	r3, [pc, #372]	@ (8001218 <HAL_RCC_OscConfig+0x688>)
 80010a2:	2180      	movs	r1, #128	@ 0x80
 80010a4:	0049      	lsls	r1, r1, #1
 80010a6:	430a      	orrs	r2, r1
 80010a8:	651a      	str	r2, [r3, #80]	@ 0x50
 80010aa:	e00b      	b.n	80010c4 <HAL_RCC_OscConfig+0x534>
 80010ac:	4b5a      	ldr	r3, [pc, #360]	@ (8001218 <HAL_RCC_OscConfig+0x688>)
 80010ae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80010b0:	4b59      	ldr	r3, [pc, #356]	@ (8001218 <HAL_RCC_OscConfig+0x688>)
 80010b2:	495b      	ldr	r1, [pc, #364]	@ (8001220 <HAL_RCC_OscConfig+0x690>)
 80010b4:	400a      	ands	r2, r1
 80010b6:	651a      	str	r2, [r3, #80]	@ 0x50
 80010b8:	4b57      	ldr	r3, [pc, #348]	@ (8001218 <HAL_RCC_OscConfig+0x688>)
 80010ba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80010bc:	4b56      	ldr	r3, [pc, #344]	@ (8001218 <HAL_RCC_OscConfig+0x688>)
 80010be:	495a      	ldr	r1, [pc, #360]	@ (8001228 <HAL_RCC_OscConfig+0x698>)
 80010c0:	400a      	ands	r2, r1
 80010c2:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d015      	beq.n	80010f8 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010cc:	f7ff fac2 	bl	8000654 <HAL_GetTick>
 80010d0:	0003      	movs	r3, r0
 80010d2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80010d4:	e009      	b.n	80010ea <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010d6:	f7ff fabd 	bl	8000654 <HAL_GetTick>
 80010da:	0002      	movs	r2, r0
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	1ad3      	subs	r3, r2, r3
 80010e0:	4a52      	ldr	r2, [pc, #328]	@ (800122c <HAL_RCC_OscConfig+0x69c>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d901      	bls.n	80010ea <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80010e6:	2303      	movs	r3, #3
 80010e8:	e11b      	b.n	8001322 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80010ea:	4b4b      	ldr	r3, [pc, #300]	@ (8001218 <HAL_RCC_OscConfig+0x688>)
 80010ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80010ee:	2380      	movs	r3, #128	@ 0x80
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	4013      	ands	r3, r2
 80010f4:	d0ef      	beq.n	80010d6 <HAL_RCC_OscConfig+0x546>
 80010f6:	e014      	b.n	8001122 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010f8:	f7ff faac 	bl	8000654 <HAL_GetTick>
 80010fc:	0003      	movs	r3, r0
 80010fe:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001100:	e009      	b.n	8001116 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001102:	f7ff faa7 	bl	8000654 <HAL_GetTick>
 8001106:	0002      	movs	r2, r0
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	4a47      	ldr	r2, [pc, #284]	@ (800122c <HAL_RCC_OscConfig+0x69c>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d901      	bls.n	8001116 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8001112:	2303      	movs	r3, #3
 8001114:	e105      	b.n	8001322 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001116:	4b40      	ldr	r3, [pc, #256]	@ (8001218 <HAL_RCC_OscConfig+0x688>)
 8001118:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800111a:	2380      	movs	r3, #128	@ 0x80
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	4013      	ands	r3, r2
 8001120:	d1ef      	bne.n	8001102 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001122:	2323      	movs	r3, #35	@ 0x23
 8001124:	18fb      	adds	r3, r7, r3
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	2b01      	cmp	r3, #1
 800112a:	d105      	bne.n	8001138 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800112c:	4b3a      	ldr	r3, [pc, #232]	@ (8001218 <HAL_RCC_OscConfig+0x688>)
 800112e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001130:	4b39      	ldr	r3, [pc, #228]	@ (8001218 <HAL_RCC_OscConfig+0x688>)
 8001132:	493f      	ldr	r1, [pc, #252]	@ (8001230 <HAL_RCC_OscConfig+0x6a0>)
 8001134:	400a      	ands	r2, r1
 8001136:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2220      	movs	r2, #32
 800113e:	4013      	ands	r3, r2
 8001140:	d049      	beq.n	80011d6 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	699b      	ldr	r3, [r3, #24]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d026      	beq.n	8001198 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800114a:	4b33      	ldr	r3, [pc, #204]	@ (8001218 <HAL_RCC_OscConfig+0x688>)
 800114c:	689a      	ldr	r2, [r3, #8]
 800114e:	4b32      	ldr	r3, [pc, #200]	@ (8001218 <HAL_RCC_OscConfig+0x688>)
 8001150:	2101      	movs	r1, #1
 8001152:	430a      	orrs	r2, r1
 8001154:	609a      	str	r2, [r3, #8]
 8001156:	4b30      	ldr	r3, [pc, #192]	@ (8001218 <HAL_RCC_OscConfig+0x688>)
 8001158:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800115a:	4b2f      	ldr	r3, [pc, #188]	@ (8001218 <HAL_RCC_OscConfig+0x688>)
 800115c:	2101      	movs	r1, #1
 800115e:	430a      	orrs	r2, r1
 8001160:	635a      	str	r2, [r3, #52]	@ 0x34
 8001162:	4b34      	ldr	r3, [pc, #208]	@ (8001234 <HAL_RCC_OscConfig+0x6a4>)
 8001164:	6a1a      	ldr	r2, [r3, #32]
 8001166:	4b33      	ldr	r3, [pc, #204]	@ (8001234 <HAL_RCC_OscConfig+0x6a4>)
 8001168:	2180      	movs	r1, #128	@ 0x80
 800116a:	0189      	lsls	r1, r1, #6
 800116c:	430a      	orrs	r2, r1
 800116e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001170:	f7ff fa70 	bl	8000654 <HAL_GetTick>
 8001174:	0003      	movs	r3, r0
 8001176:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001178:	e008      	b.n	800118c <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800117a:	f7ff fa6b 	bl	8000654 <HAL_GetTick>
 800117e:	0002      	movs	r2, r0
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	2b02      	cmp	r3, #2
 8001186:	d901      	bls.n	800118c <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8001188:	2303      	movs	r3, #3
 800118a:	e0ca      	b.n	8001322 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800118c:	4b22      	ldr	r3, [pc, #136]	@ (8001218 <HAL_RCC_OscConfig+0x688>)
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	2202      	movs	r2, #2
 8001192:	4013      	ands	r3, r2
 8001194:	d0f1      	beq.n	800117a <HAL_RCC_OscConfig+0x5ea>
 8001196:	e01e      	b.n	80011d6 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001198:	4b1f      	ldr	r3, [pc, #124]	@ (8001218 <HAL_RCC_OscConfig+0x688>)
 800119a:	689a      	ldr	r2, [r3, #8]
 800119c:	4b1e      	ldr	r3, [pc, #120]	@ (8001218 <HAL_RCC_OscConfig+0x688>)
 800119e:	2101      	movs	r1, #1
 80011a0:	438a      	bics	r2, r1
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	4b23      	ldr	r3, [pc, #140]	@ (8001234 <HAL_RCC_OscConfig+0x6a4>)
 80011a6:	6a1a      	ldr	r2, [r3, #32]
 80011a8:	4b22      	ldr	r3, [pc, #136]	@ (8001234 <HAL_RCC_OscConfig+0x6a4>)
 80011aa:	4923      	ldr	r1, [pc, #140]	@ (8001238 <HAL_RCC_OscConfig+0x6a8>)
 80011ac:	400a      	ands	r2, r1
 80011ae:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b0:	f7ff fa50 	bl	8000654 <HAL_GetTick>
 80011b4:	0003      	movs	r3, r0
 80011b6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80011b8:	e008      	b.n	80011cc <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80011ba:	f7ff fa4b 	bl	8000654 <HAL_GetTick>
 80011be:	0002      	movs	r2, r0
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	d901      	bls.n	80011cc <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80011c8:	2303      	movs	r3, #3
 80011ca:	e0aa      	b.n	8001322 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80011cc:	4b12      	ldr	r3, [pc, #72]	@ (8001218 <HAL_RCC_OscConfig+0x688>)
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	2202      	movs	r2, #2
 80011d2:	4013      	ands	r3, r2
 80011d4:	d1f1      	bne.n	80011ba <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d100      	bne.n	80011e0 <HAL_RCC_OscConfig+0x650>
 80011de:	e09f      	b.n	8001320 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	2b0c      	cmp	r3, #12
 80011e4:	d100      	bne.n	80011e8 <HAL_RCC_OscConfig+0x658>
 80011e6:	e078      	b.n	80012da <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	d159      	bne.n	80012a4 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011f0:	4b09      	ldr	r3, [pc, #36]	@ (8001218 <HAL_RCC_OscConfig+0x688>)
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	4b08      	ldr	r3, [pc, #32]	@ (8001218 <HAL_RCC_OscConfig+0x688>)
 80011f6:	4911      	ldr	r1, [pc, #68]	@ (800123c <HAL_RCC_OscConfig+0x6ac>)
 80011f8:	400a      	ands	r2, r1
 80011fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011fc:	f7ff fa2a 	bl	8000654 <HAL_GetTick>
 8001200:	0003      	movs	r3, r0
 8001202:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001204:	e01c      	b.n	8001240 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001206:	f7ff fa25 	bl	8000654 <HAL_GetTick>
 800120a:	0002      	movs	r2, r0
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	2b02      	cmp	r3, #2
 8001212:	d915      	bls.n	8001240 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8001214:	2303      	movs	r3, #3
 8001216:	e084      	b.n	8001322 <HAL_RCC_OscConfig+0x792>
 8001218:	40021000 	.word	0x40021000
 800121c:	ffff1fff 	.word	0xffff1fff
 8001220:	fffffeff 	.word	0xfffffeff
 8001224:	40007000 	.word	0x40007000
 8001228:	fffffbff 	.word	0xfffffbff
 800122c:	00001388 	.word	0x00001388
 8001230:	efffffff 	.word	0xefffffff
 8001234:	40010000 	.word	0x40010000
 8001238:	ffffdfff 	.word	0xffffdfff
 800123c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001240:	4b3a      	ldr	r3, [pc, #232]	@ (800132c <HAL_RCC_OscConfig+0x79c>)
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	2380      	movs	r3, #128	@ 0x80
 8001246:	049b      	lsls	r3, r3, #18
 8001248:	4013      	ands	r3, r2
 800124a:	d1dc      	bne.n	8001206 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800124c:	4b37      	ldr	r3, [pc, #220]	@ (800132c <HAL_RCC_OscConfig+0x79c>)
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	4a37      	ldr	r2, [pc, #220]	@ (8001330 <HAL_RCC_OscConfig+0x7a0>)
 8001252:	4013      	ands	r3, r2
 8001254:	0019      	movs	r1, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125e:	431a      	orrs	r2, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001264:	431a      	orrs	r2, r3
 8001266:	4b31      	ldr	r3, [pc, #196]	@ (800132c <HAL_RCC_OscConfig+0x79c>)
 8001268:	430a      	orrs	r2, r1
 800126a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800126c:	4b2f      	ldr	r3, [pc, #188]	@ (800132c <HAL_RCC_OscConfig+0x79c>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	4b2e      	ldr	r3, [pc, #184]	@ (800132c <HAL_RCC_OscConfig+0x79c>)
 8001272:	2180      	movs	r1, #128	@ 0x80
 8001274:	0449      	lsls	r1, r1, #17
 8001276:	430a      	orrs	r2, r1
 8001278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800127a:	f7ff f9eb 	bl	8000654 <HAL_GetTick>
 800127e:	0003      	movs	r3, r0
 8001280:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001282:	e008      	b.n	8001296 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001284:	f7ff f9e6 	bl	8000654 <HAL_GetTick>
 8001288:	0002      	movs	r2, r0
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	2b02      	cmp	r3, #2
 8001290:	d901      	bls.n	8001296 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8001292:	2303      	movs	r3, #3
 8001294:	e045      	b.n	8001322 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001296:	4b25      	ldr	r3, [pc, #148]	@ (800132c <HAL_RCC_OscConfig+0x79c>)
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	2380      	movs	r3, #128	@ 0x80
 800129c:	049b      	lsls	r3, r3, #18
 800129e:	4013      	ands	r3, r2
 80012a0:	d0f0      	beq.n	8001284 <HAL_RCC_OscConfig+0x6f4>
 80012a2:	e03d      	b.n	8001320 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012a4:	4b21      	ldr	r3, [pc, #132]	@ (800132c <HAL_RCC_OscConfig+0x79c>)
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	4b20      	ldr	r3, [pc, #128]	@ (800132c <HAL_RCC_OscConfig+0x79c>)
 80012aa:	4922      	ldr	r1, [pc, #136]	@ (8001334 <HAL_RCC_OscConfig+0x7a4>)
 80012ac:	400a      	ands	r2, r1
 80012ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b0:	f7ff f9d0 	bl	8000654 <HAL_GetTick>
 80012b4:	0003      	movs	r3, r0
 80012b6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80012b8:	e008      	b.n	80012cc <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012ba:	f7ff f9cb 	bl	8000654 <HAL_GetTick>
 80012be:	0002      	movs	r2, r0
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d901      	bls.n	80012cc <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80012c8:	2303      	movs	r3, #3
 80012ca:	e02a      	b.n	8001322 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80012cc:	4b17      	ldr	r3, [pc, #92]	@ (800132c <HAL_RCC_OscConfig+0x79c>)
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	2380      	movs	r3, #128	@ 0x80
 80012d2:	049b      	lsls	r3, r3, #18
 80012d4:	4013      	ands	r3, r2
 80012d6:	d1f0      	bne.n	80012ba <HAL_RCC_OscConfig+0x72a>
 80012d8:	e022      	b.n	8001320 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d101      	bne.n	80012e6 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e01d      	b.n	8001322 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80012e6:	4b11      	ldr	r3, [pc, #68]	@ (800132c <HAL_RCC_OscConfig+0x79c>)
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	2380      	movs	r3, #128	@ 0x80
 80012f0:	025b      	lsls	r3, r3, #9
 80012f2:	401a      	ands	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d10f      	bne.n	800131c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	23f0      	movs	r3, #240	@ 0xf0
 8001300:	039b      	lsls	r3, r3, #14
 8001302:	401a      	ands	r2, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001308:	429a      	cmp	r2, r3
 800130a:	d107      	bne.n	800131c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	23c0      	movs	r3, #192	@ 0xc0
 8001310:	041b      	lsls	r3, r3, #16
 8001312:	401a      	ands	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001318:	429a      	cmp	r2, r3
 800131a:	d001      	beq.n	8001320 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	e000      	b.n	8001322 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8001320:	2300      	movs	r3, #0
}
 8001322:	0018      	movs	r0, r3
 8001324:	46bd      	mov	sp, r7
 8001326:	b00a      	add	sp, #40	@ 0x28
 8001328:	bdb0      	pop	{r4, r5, r7, pc}
 800132a:	46c0      	nop			@ (mov r8, r8)
 800132c:	40021000 	.word	0x40021000
 8001330:	ff02ffff 	.word	0xff02ffff
 8001334:	feffffff 	.word	0xfeffffff

08001338 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001338:	b5b0      	push	{r4, r5, r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d101      	bne.n	800134c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001348:	2301      	movs	r3, #1
 800134a:	e128      	b.n	800159e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800134c:	4b96      	ldr	r3, [pc, #600]	@ (80015a8 <HAL_RCC_ClockConfig+0x270>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2201      	movs	r2, #1
 8001352:	4013      	ands	r3, r2
 8001354:	683a      	ldr	r2, [r7, #0]
 8001356:	429a      	cmp	r2, r3
 8001358:	d91e      	bls.n	8001398 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800135a:	4b93      	ldr	r3, [pc, #588]	@ (80015a8 <HAL_RCC_ClockConfig+0x270>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2201      	movs	r2, #1
 8001360:	4393      	bics	r3, r2
 8001362:	0019      	movs	r1, r3
 8001364:	4b90      	ldr	r3, [pc, #576]	@ (80015a8 <HAL_RCC_ClockConfig+0x270>)
 8001366:	683a      	ldr	r2, [r7, #0]
 8001368:	430a      	orrs	r2, r1
 800136a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800136c:	f7ff f972 	bl	8000654 <HAL_GetTick>
 8001370:	0003      	movs	r3, r0
 8001372:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001374:	e009      	b.n	800138a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001376:	f7ff f96d 	bl	8000654 <HAL_GetTick>
 800137a:	0002      	movs	r2, r0
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	4a8a      	ldr	r2, [pc, #552]	@ (80015ac <HAL_RCC_ClockConfig+0x274>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d901      	bls.n	800138a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e109      	b.n	800159e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800138a:	4b87      	ldr	r3, [pc, #540]	@ (80015a8 <HAL_RCC_ClockConfig+0x270>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2201      	movs	r2, #1
 8001390:	4013      	ands	r3, r2
 8001392:	683a      	ldr	r2, [r7, #0]
 8001394:	429a      	cmp	r2, r3
 8001396:	d1ee      	bne.n	8001376 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2202      	movs	r2, #2
 800139e:	4013      	ands	r3, r2
 80013a0:	d009      	beq.n	80013b6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013a2:	4b83      	ldr	r3, [pc, #524]	@ (80015b0 <HAL_RCC_ClockConfig+0x278>)
 80013a4:	68db      	ldr	r3, [r3, #12]
 80013a6:	22f0      	movs	r2, #240	@ 0xf0
 80013a8:	4393      	bics	r3, r2
 80013aa:	0019      	movs	r1, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	689a      	ldr	r2, [r3, #8]
 80013b0:	4b7f      	ldr	r3, [pc, #508]	@ (80015b0 <HAL_RCC_ClockConfig+0x278>)
 80013b2:	430a      	orrs	r2, r1
 80013b4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2201      	movs	r2, #1
 80013bc:	4013      	ands	r3, r2
 80013be:	d100      	bne.n	80013c2 <HAL_RCC_ClockConfig+0x8a>
 80013c0:	e089      	b.n	80014d6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	d107      	bne.n	80013da <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80013ca:	4b79      	ldr	r3, [pc, #484]	@ (80015b0 <HAL_RCC_ClockConfig+0x278>)
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	2380      	movs	r3, #128	@ 0x80
 80013d0:	029b      	lsls	r3, r3, #10
 80013d2:	4013      	ands	r3, r2
 80013d4:	d120      	bne.n	8001418 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e0e1      	b.n	800159e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	2b03      	cmp	r3, #3
 80013e0:	d107      	bne.n	80013f2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80013e2:	4b73      	ldr	r3, [pc, #460]	@ (80015b0 <HAL_RCC_ClockConfig+0x278>)
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	2380      	movs	r3, #128	@ 0x80
 80013e8:	049b      	lsls	r3, r3, #18
 80013ea:	4013      	ands	r3, r2
 80013ec:	d114      	bne.n	8001418 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e0d5      	b.n	800159e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d106      	bne.n	8001408 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013fa:	4b6d      	ldr	r3, [pc, #436]	@ (80015b0 <HAL_RCC_ClockConfig+0x278>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2204      	movs	r2, #4
 8001400:	4013      	ands	r3, r2
 8001402:	d109      	bne.n	8001418 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	e0ca      	b.n	800159e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001408:	4b69      	ldr	r3, [pc, #420]	@ (80015b0 <HAL_RCC_ClockConfig+0x278>)
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	2380      	movs	r3, #128	@ 0x80
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	4013      	ands	r3, r2
 8001412:	d101      	bne.n	8001418 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	e0c2      	b.n	800159e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001418:	4b65      	ldr	r3, [pc, #404]	@ (80015b0 <HAL_RCC_ClockConfig+0x278>)
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	2203      	movs	r2, #3
 800141e:	4393      	bics	r3, r2
 8001420:	0019      	movs	r1, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	685a      	ldr	r2, [r3, #4]
 8001426:	4b62      	ldr	r3, [pc, #392]	@ (80015b0 <HAL_RCC_ClockConfig+0x278>)
 8001428:	430a      	orrs	r2, r1
 800142a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800142c:	f7ff f912 	bl	8000654 <HAL_GetTick>
 8001430:	0003      	movs	r3, r0
 8001432:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	2b02      	cmp	r3, #2
 800143a:	d111      	bne.n	8001460 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800143c:	e009      	b.n	8001452 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800143e:	f7ff f909 	bl	8000654 <HAL_GetTick>
 8001442:	0002      	movs	r2, r0
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	4a58      	ldr	r2, [pc, #352]	@ (80015ac <HAL_RCC_ClockConfig+0x274>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d901      	bls.n	8001452 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e0a5      	b.n	800159e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001452:	4b57      	ldr	r3, [pc, #348]	@ (80015b0 <HAL_RCC_ClockConfig+0x278>)
 8001454:	68db      	ldr	r3, [r3, #12]
 8001456:	220c      	movs	r2, #12
 8001458:	4013      	ands	r3, r2
 800145a:	2b08      	cmp	r3, #8
 800145c:	d1ef      	bne.n	800143e <HAL_RCC_ClockConfig+0x106>
 800145e:	e03a      	b.n	80014d6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	2b03      	cmp	r3, #3
 8001466:	d111      	bne.n	800148c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001468:	e009      	b.n	800147e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800146a:	f7ff f8f3 	bl	8000654 <HAL_GetTick>
 800146e:	0002      	movs	r2, r0
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	4a4d      	ldr	r2, [pc, #308]	@ (80015ac <HAL_RCC_ClockConfig+0x274>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d901      	bls.n	800147e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e08f      	b.n	800159e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800147e:	4b4c      	ldr	r3, [pc, #304]	@ (80015b0 <HAL_RCC_ClockConfig+0x278>)
 8001480:	68db      	ldr	r3, [r3, #12]
 8001482:	220c      	movs	r2, #12
 8001484:	4013      	ands	r3, r2
 8001486:	2b0c      	cmp	r3, #12
 8001488:	d1ef      	bne.n	800146a <HAL_RCC_ClockConfig+0x132>
 800148a:	e024      	b.n	80014d6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	2b01      	cmp	r3, #1
 8001492:	d11b      	bne.n	80014cc <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001494:	e009      	b.n	80014aa <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001496:	f7ff f8dd 	bl	8000654 <HAL_GetTick>
 800149a:	0002      	movs	r2, r0
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	4a42      	ldr	r2, [pc, #264]	@ (80015ac <HAL_RCC_ClockConfig+0x274>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e079      	b.n	800159e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80014aa:	4b41      	ldr	r3, [pc, #260]	@ (80015b0 <HAL_RCC_ClockConfig+0x278>)
 80014ac:	68db      	ldr	r3, [r3, #12]
 80014ae:	220c      	movs	r2, #12
 80014b0:	4013      	ands	r3, r2
 80014b2:	2b04      	cmp	r3, #4
 80014b4:	d1ef      	bne.n	8001496 <HAL_RCC_ClockConfig+0x15e>
 80014b6:	e00e      	b.n	80014d6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014b8:	f7ff f8cc 	bl	8000654 <HAL_GetTick>
 80014bc:	0002      	movs	r2, r0
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	4a3a      	ldr	r2, [pc, #232]	@ (80015ac <HAL_RCC_ClockConfig+0x274>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d901      	bls.n	80014cc <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e068      	b.n	800159e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80014cc:	4b38      	ldr	r3, [pc, #224]	@ (80015b0 <HAL_RCC_ClockConfig+0x278>)
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	220c      	movs	r2, #12
 80014d2:	4013      	ands	r3, r2
 80014d4:	d1f0      	bne.n	80014b8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014d6:	4b34      	ldr	r3, [pc, #208]	@ (80015a8 <HAL_RCC_ClockConfig+0x270>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2201      	movs	r2, #1
 80014dc:	4013      	ands	r3, r2
 80014de:	683a      	ldr	r2, [r7, #0]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d21e      	bcs.n	8001522 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014e4:	4b30      	ldr	r3, [pc, #192]	@ (80015a8 <HAL_RCC_ClockConfig+0x270>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2201      	movs	r2, #1
 80014ea:	4393      	bics	r3, r2
 80014ec:	0019      	movs	r1, r3
 80014ee:	4b2e      	ldr	r3, [pc, #184]	@ (80015a8 <HAL_RCC_ClockConfig+0x270>)
 80014f0:	683a      	ldr	r2, [r7, #0]
 80014f2:	430a      	orrs	r2, r1
 80014f4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80014f6:	f7ff f8ad 	bl	8000654 <HAL_GetTick>
 80014fa:	0003      	movs	r3, r0
 80014fc:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014fe:	e009      	b.n	8001514 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001500:	f7ff f8a8 	bl	8000654 <HAL_GetTick>
 8001504:	0002      	movs	r2, r0
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	4a28      	ldr	r2, [pc, #160]	@ (80015ac <HAL_RCC_ClockConfig+0x274>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d901      	bls.n	8001514 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e044      	b.n	800159e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001514:	4b24      	ldr	r3, [pc, #144]	@ (80015a8 <HAL_RCC_ClockConfig+0x270>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2201      	movs	r2, #1
 800151a:	4013      	ands	r3, r2
 800151c:	683a      	ldr	r2, [r7, #0]
 800151e:	429a      	cmp	r2, r3
 8001520:	d1ee      	bne.n	8001500 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2204      	movs	r2, #4
 8001528:	4013      	ands	r3, r2
 800152a:	d009      	beq.n	8001540 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800152c:	4b20      	ldr	r3, [pc, #128]	@ (80015b0 <HAL_RCC_ClockConfig+0x278>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	4a20      	ldr	r2, [pc, #128]	@ (80015b4 <HAL_RCC_ClockConfig+0x27c>)
 8001532:	4013      	ands	r3, r2
 8001534:	0019      	movs	r1, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	68da      	ldr	r2, [r3, #12]
 800153a:	4b1d      	ldr	r3, [pc, #116]	@ (80015b0 <HAL_RCC_ClockConfig+0x278>)
 800153c:	430a      	orrs	r2, r1
 800153e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2208      	movs	r2, #8
 8001546:	4013      	ands	r3, r2
 8001548:	d00a      	beq.n	8001560 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800154a:	4b19      	ldr	r3, [pc, #100]	@ (80015b0 <HAL_RCC_ClockConfig+0x278>)
 800154c:	68db      	ldr	r3, [r3, #12]
 800154e:	4a1a      	ldr	r2, [pc, #104]	@ (80015b8 <HAL_RCC_ClockConfig+0x280>)
 8001550:	4013      	ands	r3, r2
 8001552:	0019      	movs	r1, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	691b      	ldr	r3, [r3, #16]
 8001558:	00da      	lsls	r2, r3, #3
 800155a:	4b15      	ldr	r3, [pc, #84]	@ (80015b0 <HAL_RCC_ClockConfig+0x278>)
 800155c:	430a      	orrs	r2, r1
 800155e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001560:	f000 f832 	bl	80015c8 <HAL_RCC_GetSysClockFreq>
 8001564:	0001      	movs	r1, r0
 8001566:	4b12      	ldr	r3, [pc, #72]	@ (80015b0 <HAL_RCC_ClockConfig+0x278>)
 8001568:	68db      	ldr	r3, [r3, #12]
 800156a:	091b      	lsrs	r3, r3, #4
 800156c:	220f      	movs	r2, #15
 800156e:	4013      	ands	r3, r2
 8001570:	4a12      	ldr	r2, [pc, #72]	@ (80015bc <HAL_RCC_ClockConfig+0x284>)
 8001572:	5cd3      	ldrb	r3, [r2, r3]
 8001574:	000a      	movs	r2, r1
 8001576:	40da      	lsrs	r2, r3
 8001578:	4b11      	ldr	r3, [pc, #68]	@ (80015c0 <HAL_RCC_ClockConfig+0x288>)
 800157a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800157c:	4b11      	ldr	r3, [pc, #68]	@ (80015c4 <HAL_RCC_ClockConfig+0x28c>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	250b      	movs	r5, #11
 8001582:	197c      	adds	r4, r7, r5
 8001584:	0018      	movs	r0, r3
 8001586:	f7ff f81f 	bl	80005c8 <HAL_InitTick>
 800158a:	0003      	movs	r3, r0
 800158c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800158e:	197b      	adds	r3, r7, r5
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d002      	beq.n	800159c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001596:	197b      	adds	r3, r7, r5
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	e000      	b.n	800159e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800159c:	2300      	movs	r3, #0
}
 800159e:	0018      	movs	r0, r3
 80015a0:	46bd      	mov	sp, r7
 80015a2:	b004      	add	sp, #16
 80015a4:	bdb0      	pop	{r4, r5, r7, pc}
 80015a6:	46c0      	nop			@ (mov r8, r8)
 80015a8:	40022000 	.word	0x40022000
 80015ac:	00001388 	.word	0x00001388
 80015b0:	40021000 	.word	0x40021000
 80015b4:	fffff8ff 	.word	0xfffff8ff
 80015b8:	ffffc7ff 	.word	0xffffc7ff
 80015bc:	08001ea0 	.word	0x08001ea0
 80015c0:	20000000 	.word	0x20000000
 80015c4:	20000004 	.word	0x20000004

080015c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b086      	sub	sp, #24
 80015cc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80015ce:	4b3c      	ldr	r3, [pc, #240]	@ (80016c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	220c      	movs	r2, #12
 80015d8:	4013      	ands	r3, r2
 80015da:	2b0c      	cmp	r3, #12
 80015dc:	d013      	beq.n	8001606 <HAL_RCC_GetSysClockFreq+0x3e>
 80015de:	d85c      	bhi.n	800169a <HAL_RCC_GetSysClockFreq+0xd2>
 80015e0:	2b04      	cmp	r3, #4
 80015e2:	d002      	beq.n	80015ea <HAL_RCC_GetSysClockFreq+0x22>
 80015e4:	2b08      	cmp	r3, #8
 80015e6:	d00b      	beq.n	8001600 <HAL_RCC_GetSysClockFreq+0x38>
 80015e8:	e057      	b.n	800169a <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80015ea:	4b35      	ldr	r3, [pc, #212]	@ (80016c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	2210      	movs	r2, #16
 80015f0:	4013      	ands	r3, r2
 80015f2:	d002      	beq.n	80015fa <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80015f4:	4b33      	ldr	r3, [pc, #204]	@ (80016c4 <HAL_RCC_GetSysClockFreq+0xfc>)
 80015f6:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80015f8:	e05d      	b.n	80016b6 <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 80015fa:	4b33      	ldr	r3, [pc, #204]	@ (80016c8 <HAL_RCC_GetSysClockFreq+0x100>)
 80015fc:	613b      	str	r3, [r7, #16]
      break;
 80015fe:	e05a      	b.n	80016b6 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001600:	4b32      	ldr	r3, [pc, #200]	@ (80016cc <HAL_RCC_GetSysClockFreq+0x104>)
 8001602:	613b      	str	r3, [r7, #16]
      break;
 8001604:	e057      	b.n	80016b6 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	0c9b      	lsrs	r3, r3, #18
 800160a:	220f      	movs	r2, #15
 800160c:	4013      	ands	r3, r2
 800160e:	4a30      	ldr	r2, [pc, #192]	@ (80016d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001610:	5cd3      	ldrb	r3, [r2, r3]
 8001612:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	0d9b      	lsrs	r3, r3, #22
 8001618:	2203      	movs	r2, #3
 800161a:	4013      	ands	r3, r2
 800161c:	3301      	adds	r3, #1
 800161e:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001620:	4b27      	ldr	r3, [pc, #156]	@ (80016c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001622:	68da      	ldr	r2, [r3, #12]
 8001624:	2380      	movs	r3, #128	@ 0x80
 8001626:	025b      	lsls	r3, r3, #9
 8001628:	4013      	ands	r3, r2
 800162a:	d00f      	beq.n	800164c <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 800162c:	68b9      	ldr	r1, [r7, #8]
 800162e:	000a      	movs	r2, r1
 8001630:	0152      	lsls	r2, r2, #5
 8001632:	1a52      	subs	r2, r2, r1
 8001634:	0193      	lsls	r3, r2, #6
 8001636:	1a9b      	subs	r3, r3, r2
 8001638:	00db      	lsls	r3, r3, #3
 800163a:	185b      	adds	r3, r3, r1
 800163c:	025b      	lsls	r3, r3, #9
 800163e:	6879      	ldr	r1, [r7, #4]
 8001640:	0018      	movs	r0, r3
 8001642:	f7fe fd61 	bl	8000108 <__udivsi3>
 8001646:	0003      	movs	r3, r0
 8001648:	617b      	str	r3, [r7, #20]
 800164a:	e023      	b.n	8001694 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800164c:	4b1c      	ldr	r3, [pc, #112]	@ (80016c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2210      	movs	r2, #16
 8001652:	4013      	ands	r3, r2
 8001654:	d00f      	beq.n	8001676 <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8001656:	68b9      	ldr	r1, [r7, #8]
 8001658:	000a      	movs	r2, r1
 800165a:	0152      	lsls	r2, r2, #5
 800165c:	1a52      	subs	r2, r2, r1
 800165e:	0193      	lsls	r3, r2, #6
 8001660:	1a9b      	subs	r3, r3, r2
 8001662:	00db      	lsls	r3, r3, #3
 8001664:	185b      	adds	r3, r3, r1
 8001666:	021b      	lsls	r3, r3, #8
 8001668:	6879      	ldr	r1, [r7, #4]
 800166a:	0018      	movs	r0, r3
 800166c:	f7fe fd4c 	bl	8000108 <__udivsi3>
 8001670:	0003      	movs	r3, r0
 8001672:	617b      	str	r3, [r7, #20]
 8001674:	e00e      	b.n	8001694 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8001676:	68b9      	ldr	r1, [r7, #8]
 8001678:	000a      	movs	r2, r1
 800167a:	0152      	lsls	r2, r2, #5
 800167c:	1a52      	subs	r2, r2, r1
 800167e:	0193      	lsls	r3, r2, #6
 8001680:	1a9b      	subs	r3, r3, r2
 8001682:	00db      	lsls	r3, r3, #3
 8001684:	185b      	adds	r3, r3, r1
 8001686:	029b      	lsls	r3, r3, #10
 8001688:	6879      	ldr	r1, [r7, #4]
 800168a:	0018      	movs	r0, r3
 800168c:	f7fe fd3c 	bl	8000108 <__udivsi3>
 8001690:	0003      	movs	r3, r0
 8001692:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	613b      	str	r3, [r7, #16]
      break;
 8001698:	e00d      	b.n	80016b6 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800169a:	4b09      	ldr	r3, [pc, #36]	@ (80016c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	0b5b      	lsrs	r3, r3, #13
 80016a0:	2207      	movs	r2, #7
 80016a2:	4013      	ands	r3, r2
 80016a4:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	3301      	adds	r3, #1
 80016aa:	2280      	movs	r2, #128	@ 0x80
 80016ac:	0212      	lsls	r2, r2, #8
 80016ae:	409a      	lsls	r2, r3
 80016b0:	0013      	movs	r3, r2
 80016b2:	613b      	str	r3, [r7, #16]
      break;
 80016b4:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80016b6:	693b      	ldr	r3, [r7, #16]
}
 80016b8:	0018      	movs	r0, r3
 80016ba:	46bd      	mov	sp, r7
 80016bc:	b006      	add	sp, #24
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40021000 	.word	0x40021000
 80016c4:	003d0900 	.word	0x003d0900
 80016c8:	00f42400 	.word	0x00f42400
 80016cc:	007a1200 	.word	0x007a1200
 80016d0:	08001eb0 	.word	0x08001eb0

080016d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d101      	bne.n	80016e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e032      	b.n	800174c <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2239      	movs	r2, #57	@ 0x39
 80016ea:	5c9b      	ldrb	r3, [r3, r2]
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d107      	bne.n	8001702 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2238      	movs	r2, #56	@ 0x38
 80016f6:	2100      	movs	r1, #0
 80016f8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	0018      	movs	r0, r3
 80016fe:	f7fe fecf 	bl	80004a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2239      	movs	r2, #57	@ 0x39
 8001706:	2102      	movs	r1, #2
 8001708:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	3304      	adds	r3, #4
 8001712:	0019      	movs	r1, r3
 8001714:	0010      	movs	r0, r2
 8001716:	f000 fa2f 	bl	8001b78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	223e      	movs	r2, #62	@ 0x3e
 800171e:	2101      	movs	r1, #1
 8001720:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	223a      	movs	r2, #58	@ 0x3a
 8001726:	2101      	movs	r1, #1
 8001728:	5499      	strb	r1, [r3, r2]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	223b      	movs	r2, #59	@ 0x3b
 800172e:	2101      	movs	r1, #1
 8001730:	5499      	strb	r1, [r3, r2]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	223c      	movs	r2, #60	@ 0x3c
 8001736:	2101      	movs	r1, #1
 8001738:	5499      	strb	r1, [r3, r2]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	223d      	movs	r2, #61	@ 0x3d
 800173e:	2101      	movs	r1, #1
 8001740:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2239      	movs	r2, #57	@ 0x39
 8001746:	2101      	movs	r1, #1
 8001748:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800174a:	2300      	movs	r3, #0
}
 800174c:	0018      	movs	r0, r3
 800174e:	46bd      	mov	sp, r7
 8001750:	b002      	add	sp, #8
 8001752:	bd80      	pop	{r7, pc}

08001754 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2239      	movs	r2, #57	@ 0x39
 8001760:	5c9b      	ldrb	r3, [r3, r2]
 8001762:	b2db      	uxtb	r3, r3
 8001764:	2b01      	cmp	r3, #1
 8001766:	d001      	beq.n	800176c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e03b      	b.n	80017e4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2239      	movs	r2, #57	@ 0x39
 8001770:	2102      	movs	r1, #2
 8001772:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	68da      	ldr	r2, [r3, #12]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2101      	movs	r1, #1
 8001780:	430a      	orrs	r2, r1
 8001782:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	2380      	movs	r3, #128	@ 0x80
 800178a:	05db      	lsls	r3, r3, #23
 800178c:	429a      	cmp	r2, r3
 800178e:	d00e      	beq.n	80017ae <HAL_TIM_Base_Start_IT+0x5a>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a15      	ldr	r2, [pc, #84]	@ (80017ec <HAL_TIM_Base_Start_IT+0x98>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d009      	beq.n	80017ae <HAL_TIM_Base_Start_IT+0x5a>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a14      	ldr	r2, [pc, #80]	@ (80017f0 <HAL_TIM_Base_Start_IT+0x9c>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d004      	beq.n	80017ae <HAL_TIM_Base_Start_IT+0x5a>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a12      	ldr	r2, [pc, #72]	@ (80017f4 <HAL_TIM_Base_Start_IT+0xa0>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d111      	bne.n	80017d2 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	2207      	movs	r2, #7
 80017b6:	4013      	ands	r3, r2
 80017b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	2b06      	cmp	r3, #6
 80017be:	d010      	beq.n	80017e2 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2101      	movs	r1, #1
 80017cc:	430a      	orrs	r2, r1
 80017ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017d0:	e007      	b.n	80017e2 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2101      	movs	r1, #1
 80017de:	430a      	orrs	r2, r1
 80017e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80017e2:	2300      	movs	r3, #0
}
 80017e4:	0018      	movs	r0, r3
 80017e6:	46bd      	mov	sp, r7
 80017e8:	b004      	add	sp, #16
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	40000400 	.word	0x40000400
 80017f0:	40010800 	.word	0x40010800
 80017f4:	40011400 	.word	0x40011400

080017f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	691b      	ldr	r3, [r3, #16]
 800180e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	2202      	movs	r2, #2
 8001814:	4013      	ands	r3, r2
 8001816:	d021      	beq.n	800185c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2202      	movs	r2, #2
 800181c:	4013      	ands	r3, r2
 800181e:	d01d      	beq.n	800185c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2203      	movs	r2, #3
 8001826:	4252      	negs	r2, r2
 8001828:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2201      	movs	r2, #1
 800182e:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	699b      	ldr	r3, [r3, #24]
 8001836:	2203      	movs	r2, #3
 8001838:	4013      	ands	r3, r2
 800183a:	d004      	beq.n	8001846 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	0018      	movs	r0, r3
 8001840:	f000 f982 	bl	8001b48 <HAL_TIM_IC_CaptureCallback>
 8001844:	e007      	b.n	8001856 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	0018      	movs	r0, r3
 800184a:	f000 f975 	bl	8001b38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	0018      	movs	r0, r3
 8001852:	f000 f981 	bl	8001b58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2200      	movs	r2, #0
 800185a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	2204      	movs	r2, #4
 8001860:	4013      	ands	r3, r2
 8001862:	d022      	beq.n	80018aa <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2204      	movs	r2, #4
 8001868:	4013      	ands	r3, r2
 800186a:	d01e      	beq.n	80018aa <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2205      	movs	r2, #5
 8001872:	4252      	negs	r2, r2
 8001874:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2202      	movs	r2, #2
 800187a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	699a      	ldr	r2, [r3, #24]
 8001882:	23c0      	movs	r3, #192	@ 0xc0
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	4013      	ands	r3, r2
 8001888:	d004      	beq.n	8001894 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	0018      	movs	r0, r3
 800188e:	f000 f95b 	bl	8001b48 <HAL_TIM_IC_CaptureCallback>
 8001892:	e007      	b.n	80018a4 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	0018      	movs	r0, r3
 8001898:	f000 f94e 	bl	8001b38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	0018      	movs	r0, r3
 80018a0:	f000 f95a 	bl	8001b58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	2208      	movs	r2, #8
 80018ae:	4013      	ands	r3, r2
 80018b0:	d021      	beq.n	80018f6 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2208      	movs	r2, #8
 80018b6:	4013      	ands	r3, r2
 80018b8:	d01d      	beq.n	80018f6 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2209      	movs	r2, #9
 80018c0:	4252      	negs	r2, r2
 80018c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2204      	movs	r2, #4
 80018c8:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	69db      	ldr	r3, [r3, #28]
 80018d0:	2203      	movs	r2, #3
 80018d2:	4013      	ands	r3, r2
 80018d4:	d004      	beq.n	80018e0 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	0018      	movs	r0, r3
 80018da:	f000 f935 	bl	8001b48 <HAL_TIM_IC_CaptureCallback>
 80018de:	e007      	b.n	80018f0 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	0018      	movs	r0, r3
 80018e4:	f000 f928 	bl	8001b38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	0018      	movs	r0, r3
 80018ec:	f000 f934 	bl	8001b58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2200      	movs	r2, #0
 80018f4:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	2210      	movs	r2, #16
 80018fa:	4013      	ands	r3, r2
 80018fc:	d022      	beq.n	8001944 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2210      	movs	r2, #16
 8001902:	4013      	ands	r3, r2
 8001904:	d01e      	beq.n	8001944 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2211      	movs	r2, #17
 800190c:	4252      	negs	r2, r2
 800190e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2208      	movs	r2, #8
 8001914:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	69da      	ldr	r2, [r3, #28]
 800191c:	23c0      	movs	r3, #192	@ 0xc0
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	4013      	ands	r3, r2
 8001922:	d004      	beq.n	800192e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	0018      	movs	r0, r3
 8001928:	f000 f90e 	bl	8001b48 <HAL_TIM_IC_CaptureCallback>
 800192c:	e007      	b.n	800193e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	0018      	movs	r0, r3
 8001932:	f000 f901 	bl	8001b38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	0018      	movs	r0, r3
 800193a:	f000 f90d 	bl	8001b58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2200      	movs	r2, #0
 8001942:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	2201      	movs	r2, #1
 8001948:	4013      	ands	r3, r2
 800194a:	d00c      	beq.n	8001966 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2201      	movs	r2, #1
 8001950:	4013      	ands	r3, r2
 8001952:	d008      	beq.n	8001966 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2202      	movs	r2, #2
 800195a:	4252      	negs	r2, r2
 800195c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	0018      	movs	r0, r3
 8001962:	f7fe fc6f 	bl	8000244 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	2240      	movs	r2, #64	@ 0x40
 800196a:	4013      	ands	r3, r2
 800196c:	d00c      	beq.n	8001988 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2240      	movs	r2, #64	@ 0x40
 8001972:	4013      	ands	r3, r2
 8001974:	d008      	beq.n	8001988 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2241      	movs	r2, #65	@ 0x41
 800197c:	4252      	negs	r2, r2
 800197e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	0018      	movs	r0, r3
 8001984:	f000 f8f0 	bl	8001b68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001988:	46c0      	nop			@ (mov r8, r8)
 800198a:	46bd      	mov	sp, r7
 800198c:	b004      	add	sp, #16
 800198e:	bd80      	pop	{r7, pc}

08001990 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800199a:	230f      	movs	r3, #15
 800199c:	18fb      	adds	r3, r7, r3
 800199e:	2200      	movs	r2, #0
 80019a0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2238      	movs	r2, #56	@ 0x38
 80019a6:	5c9b      	ldrb	r3, [r3, r2]
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d101      	bne.n	80019b0 <HAL_TIM_ConfigClockSource+0x20>
 80019ac:	2302      	movs	r3, #2
 80019ae:	e0bc      	b.n	8001b2a <HAL_TIM_ConfigClockSource+0x19a>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2238      	movs	r2, #56	@ 0x38
 80019b4:	2101      	movs	r1, #1
 80019b6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2239      	movs	r2, #57	@ 0x39
 80019bc:	2102      	movs	r1, #2
 80019be:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	2277      	movs	r2, #119	@ 0x77
 80019cc:	4393      	bics	r3, r2
 80019ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	4a58      	ldr	r2, [pc, #352]	@ (8001b34 <HAL_TIM_ConfigClockSource+0x1a4>)
 80019d4:	4013      	ands	r3, r2
 80019d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	68ba      	ldr	r2, [r7, #8]
 80019de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2280      	movs	r2, #128	@ 0x80
 80019e6:	0192      	lsls	r2, r2, #6
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d040      	beq.n	8001a6e <HAL_TIM_ConfigClockSource+0xde>
 80019ec:	2280      	movs	r2, #128	@ 0x80
 80019ee:	0192      	lsls	r2, r2, #6
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d900      	bls.n	80019f6 <HAL_TIM_ConfigClockSource+0x66>
 80019f4:	e088      	b.n	8001b08 <HAL_TIM_ConfigClockSource+0x178>
 80019f6:	2280      	movs	r2, #128	@ 0x80
 80019f8:	0152      	lsls	r2, r2, #5
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d100      	bne.n	8001a00 <HAL_TIM_ConfigClockSource+0x70>
 80019fe:	e088      	b.n	8001b12 <HAL_TIM_ConfigClockSource+0x182>
 8001a00:	2280      	movs	r2, #128	@ 0x80
 8001a02:	0152      	lsls	r2, r2, #5
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d900      	bls.n	8001a0a <HAL_TIM_ConfigClockSource+0x7a>
 8001a08:	e07e      	b.n	8001b08 <HAL_TIM_ConfigClockSource+0x178>
 8001a0a:	2b70      	cmp	r3, #112	@ 0x70
 8001a0c:	d018      	beq.n	8001a40 <HAL_TIM_ConfigClockSource+0xb0>
 8001a0e:	d900      	bls.n	8001a12 <HAL_TIM_ConfigClockSource+0x82>
 8001a10:	e07a      	b.n	8001b08 <HAL_TIM_ConfigClockSource+0x178>
 8001a12:	2b60      	cmp	r3, #96	@ 0x60
 8001a14:	d04f      	beq.n	8001ab6 <HAL_TIM_ConfigClockSource+0x126>
 8001a16:	d900      	bls.n	8001a1a <HAL_TIM_ConfigClockSource+0x8a>
 8001a18:	e076      	b.n	8001b08 <HAL_TIM_ConfigClockSource+0x178>
 8001a1a:	2b50      	cmp	r3, #80	@ 0x50
 8001a1c:	d03b      	beq.n	8001a96 <HAL_TIM_ConfigClockSource+0x106>
 8001a1e:	d900      	bls.n	8001a22 <HAL_TIM_ConfigClockSource+0x92>
 8001a20:	e072      	b.n	8001b08 <HAL_TIM_ConfigClockSource+0x178>
 8001a22:	2b40      	cmp	r3, #64	@ 0x40
 8001a24:	d057      	beq.n	8001ad6 <HAL_TIM_ConfigClockSource+0x146>
 8001a26:	d900      	bls.n	8001a2a <HAL_TIM_ConfigClockSource+0x9a>
 8001a28:	e06e      	b.n	8001b08 <HAL_TIM_ConfigClockSource+0x178>
 8001a2a:	2b30      	cmp	r3, #48	@ 0x30
 8001a2c:	d063      	beq.n	8001af6 <HAL_TIM_ConfigClockSource+0x166>
 8001a2e:	d86b      	bhi.n	8001b08 <HAL_TIM_ConfigClockSource+0x178>
 8001a30:	2b20      	cmp	r3, #32
 8001a32:	d060      	beq.n	8001af6 <HAL_TIM_ConfigClockSource+0x166>
 8001a34:	d868      	bhi.n	8001b08 <HAL_TIM_ConfigClockSource+0x178>
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d05d      	beq.n	8001af6 <HAL_TIM_ConfigClockSource+0x166>
 8001a3a:	2b10      	cmp	r3, #16
 8001a3c:	d05b      	beq.n	8001af6 <HAL_TIM_ConfigClockSource+0x166>
 8001a3e:	e063      	b.n	8001b08 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001a50:	f000 f970 	bl	8001d34 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	2277      	movs	r2, #119	@ 0x77
 8001a60:	4313      	orrs	r3, r2
 8001a62:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	68ba      	ldr	r2, [r7, #8]
 8001a6a:	609a      	str	r2, [r3, #8]
      break;
 8001a6c:	e052      	b.n	8001b14 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001a7e:	f000 f959 	bl	8001d34 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	689a      	ldr	r2, [r3, #8]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2180      	movs	r1, #128	@ 0x80
 8001a8e:	01c9      	lsls	r1, r1, #7
 8001a90:	430a      	orrs	r2, r1
 8001a92:	609a      	str	r2, [r3, #8]
      break;
 8001a94:	e03e      	b.n	8001b14 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001aa2:	001a      	movs	r2, r3
 8001aa4:	f000 f8cc 	bl	8001c40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2150      	movs	r1, #80	@ 0x50
 8001aae:	0018      	movs	r0, r3
 8001ab0:	f000 f926 	bl	8001d00 <TIM_ITRx_SetConfig>
      break;
 8001ab4:	e02e      	b.n	8001b14 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001ac2:	001a      	movs	r2, r3
 8001ac4:	f000 f8ea 	bl	8001c9c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2160      	movs	r1, #96	@ 0x60
 8001ace:	0018      	movs	r0, r3
 8001ad0:	f000 f916 	bl	8001d00 <TIM_ITRx_SetConfig>
      break;
 8001ad4:	e01e      	b.n	8001b14 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ae2:	001a      	movs	r2, r3
 8001ae4:	f000 f8ac 	bl	8001c40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2140      	movs	r1, #64	@ 0x40
 8001aee:	0018      	movs	r0, r3
 8001af0:	f000 f906 	bl	8001d00 <TIM_ITRx_SetConfig>
      break;
 8001af4:	e00e      	b.n	8001b14 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	0019      	movs	r1, r3
 8001b00:	0010      	movs	r0, r2
 8001b02:	f000 f8fd 	bl	8001d00 <TIM_ITRx_SetConfig>
      break;
 8001b06:	e005      	b.n	8001b14 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8001b08:	230f      	movs	r3, #15
 8001b0a:	18fb      	adds	r3, r7, r3
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	701a      	strb	r2, [r3, #0]
      break;
 8001b10:	e000      	b.n	8001b14 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8001b12:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2239      	movs	r2, #57	@ 0x39
 8001b18:	2101      	movs	r1, #1
 8001b1a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2238      	movs	r2, #56	@ 0x38
 8001b20:	2100      	movs	r1, #0
 8001b22:	5499      	strb	r1, [r3, r2]

  return status;
 8001b24:	230f      	movs	r3, #15
 8001b26:	18fb      	adds	r3, r7, r3
 8001b28:	781b      	ldrb	r3, [r3, #0]
}
 8001b2a:	0018      	movs	r0, r3
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	b004      	add	sp, #16
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	46c0      	nop			@ (mov r8, r8)
 8001b34:	ffff00ff 	.word	0xffff00ff

08001b38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001b40:	46c0      	nop			@ (mov r8, r8)
 8001b42:	46bd      	mov	sp, r7
 8001b44:	b002      	add	sp, #8
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001b50:	46c0      	nop			@ (mov r8, r8)
 8001b52:	46bd      	mov	sp, r7
 8001b54:	b002      	add	sp, #8
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001b60:	46c0      	nop			@ (mov r8, r8)
 8001b62:	46bd      	mov	sp, r7
 8001b64:	b002      	add	sp, #8
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001b70:	46c0      	nop			@ (mov r8, r8)
 8001b72:	46bd      	mov	sp, r7
 8001b74:	b002      	add	sp, #8
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	2380      	movs	r3, #128	@ 0x80
 8001b8c:	05db      	lsls	r3, r3, #23
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d00b      	beq.n	8001baa <TIM_Base_SetConfig+0x32>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a26      	ldr	r2, [pc, #152]	@ (8001c30 <TIM_Base_SetConfig+0xb8>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d007      	beq.n	8001baa <TIM_Base_SetConfig+0x32>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a25      	ldr	r2, [pc, #148]	@ (8001c34 <TIM_Base_SetConfig+0xbc>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d003      	beq.n	8001baa <TIM_Base_SetConfig+0x32>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a24      	ldr	r2, [pc, #144]	@ (8001c38 <TIM_Base_SetConfig+0xc0>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d108      	bne.n	8001bbc <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2270      	movs	r2, #112	@ 0x70
 8001bae:	4393      	bics	r3, r2
 8001bb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	68fa      	ldr	r2, [r7, #12]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	2380      	movs	r3, #128	@ 0x80
 8001bc0:	05db      	lsls	r3, r3, #23
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d00b      	beq.n	8001bde <TIM_Base_SetConfig+0x66>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a19      	ldr	r2, [pc, #100]	@ (8001c30 <TIM_Base_SetConfig+0xb8>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d007      	beq.n	8001bde <TIM_Base_SetConfig+0x66>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a18      	ldr	r2, [pc, #96]	@ (8001c34 <TIM_Base_SetConfig+0xbc>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d003      	beq.n	8001bde <TIM_Base_SetConfig+0x66>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a17      	ldr	r2, [pc, #92]	@ (8001c38 <TIM_Base_SetConfig+0xc0>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d108      	bne.n	8001bf0 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	4a16      	ldr	r2, [pc, #88]	@ (8001c3c <TIM_Base_SetConfig+0xc4>)
 8001be2:	4013      	ands	r3, r2
 8001be4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	68fa      	ldr	r2, [r7, #12]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2280      	movs	r2, #128	@ 0x80
 8001bf4:	4393      	bics	r3, r2
 8001bf6:	001a      	movs	r2, r3
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	689a      	ldr	r2, [r3, #8]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2204      	movs	r2, #4
 8001c16:	431a      	orrs	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	68fa      	ldr	r2, [r7, #12]
 8001c26:	601a      	str	r2, [r3, #0]
}
 8001c28:	46c0      	nop			@ (mov r8, r8)
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	b004      	add	sp, #16
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	40000400 	.word	0x40000400
 8001c34:	40010800 	.word	0x40010800
 8001c38:	40011400 	.word	0x40011400
 8001c3c:	fffffcff 	.word	0xfffffcff

08001c40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	6a1b      	ldr	r3, [r3, #32]
 8001c50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	6a1b      	ldr	r3, [r3, #32]
 8001c56:	2201      	movs	r2, #1
 8001c58:	4393      	bics	r3, r2
 8001c5a:	001a      	movs	r2, r3
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	22f0      	movs	r2, #240	@ 0xf0
 8001c6a:	4393      	bics	r3, r2
 8001c6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	011b      	lsls	r3, r3, #4
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	220a      	movs	r2, #10
 8001c7c:	4393      	bics	r3, r2
 8001c7e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001c80:	697a      	ldr	r2, [r7, #20]
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	697a      	ldr	r2, [r7, #20]
 8001c92:	621a      	str	r2, [r3, #32]
}
 8001c94:	46c0      	nop			@ (mov r8, r8)
 8001c96:	46bd      	mov	sp, r7
 8001c98:	b006      	add	sp, #24
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	6a1b      	ldr	r3, [r3, #32]
 8001cac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	6a1b      	ldr	r3, [r3, #32]
 8001cb2:	2210      	movs	r2, #16
 8001cb4:	4393      	bics	r3, r2
 8001cb6:	001a      	movs	r2, r3
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	4a0d      	ldr	r2, [pc, #52]	@ (8001cfc <TIM_TI2_ConfigInputStage+0x60>)
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	031b      	lsls	r3, r3, #12
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	22a0      	movs	r2, #160	@ 0xa0
 8001cd8:	4393      	bics	r3, r2
 8001cda:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	011b      	lsls	r3, r3, #4
 8001ce0:	697a      	ldr	r2, [r7, #20]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	693a      	ldr	r2, [r7, #16]
 8001cea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	697a      	ldr	r2, [r7, #20]
 8001cf0:	621a      	str	r2, [r3, #32]
}
 8001cf2:	46c0      	nop			@ (mov r8, r8)
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	b006      	add	sp, #24
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	46c0      	nop			@ (mov r8, r8)
 8001cfc:	ffff0fff 	.word	0xffff0fff

08001d00 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2270      	movs	r2, #112	@ 0x70
 8001d14:	4393      	bics	r3, r2
 8001d16:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001d18:	683a      	ldr	r2, [r7, #0]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	2207      	movs	r2, #7
 8001d20:	4313      	orrs	r3, r2
 8001d22:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	68fa      	ldr	r2, [r7, #12]
 8001d28:	609a      	str	r2, [r3, #8]
}
 8001d2a:	46c0      	nop			@ (mov r8, r8)
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	b004      	add	sp, #16
 8001d30:	bd80      	pop	{r7, pc}
	...

08001d34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
 8001d40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	4a09      	ldr	r2, [pc, #36]	@ (8001d70 <TIM_ETR_SetConfig+0x3c>)
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	021a      	lsls	r2, r3, #8
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	431a      	orrs	r2, r3
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	697a      	ldr	r2, [r7, #20]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	697a      	ldr	r2, [r7, #20]
 8001d66:	609a      	str	r2, [r3, #8]
}
 8001d68:	46c0      	nop			@ (mov r8, r8)
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	b006      	add	sp, #24
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	ffff00ff 	.word	0xffff00ff

08001d74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2238      	movs	r2, #56	@ 0x38
 8001d82:	5c9b      	ldrb	r3, [r3, r2]
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d101      	bne.n	8001d8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001d88:	2302      	movs	r3, #2
 8001d8a:	e047      	b.n	8001e1c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2238      	movs	r2, #56	@ 0x38
 8001d90:	2101      	movs	r1, #1
 8001d92:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2239      	movs	r2, #57	@ 0x39
 8001d98:	2102      	movs	r1, #2
 8001d9a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2270      	movs	r2, #112	@ 0x70
 8001db0:	4393      	bics	r3, r2
 8001db2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	68fa      	ldr	r2, [r7, #12]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	68fa      	ldr	r2, [r7, #12]
 8001dc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	2380      	movs	r3, #128	@ 0x80
 8001dcc:	05db      	lsls	r3, r3, #23
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d00e      	beq.n	8001df0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a13      	ldr	r2, [pc, #76]	@ (8001e24 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d009      	beq.n	8001df0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a11      	ldr	r2, [pc, #68]	@ (8001e28 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d004      	beq.n	8001df0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a10      	ldr	r2, [pc, #64]	@ (8001e2c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d10c      	bne.n	8001e0a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	2280      	movs	r2, #128	@ 0x80
 8001df4:	4393      	bics	r3, r2
 8001df6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	68ba      	ldr	r2, [r7, #8]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	68ba      	ldr	r2, [r7, #8]
 8001e08:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2239      	movs	r2, #57	@ 0x39
 8001e0e:	2101      	movs	r1, #1
 8001e10:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2238      	movs	r2, #56	@ 0x38
 8001e16:	2100      	movs	r1, #0
 8001e18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	0018      	movs	r0, r3
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	b004      	add	sp, #16
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40000400 	.word	0x40000400
 8001e28:	40010800 	.word	0x40010800
 8001e2c:	40011400 	.word	0x40011400

08001e30 <memset>:
 8001e30:	0003      	movs	r3, r0
 8001e32:	1882      	adds	r2, r0, r2
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d100      	bne.n	8001e3a <memset+0xa>
 8001e38:	4770      	bx	lr
 8001e3a:	7019      	strb	r1, [r3, #0]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	e7f9      	b.n	8001e34 <memset+0x4>

08001e40 <__libc_init_array>:
 8001e40:	b570      	push	{r4, r5, r6, lr}
 8001e42:	2600      	movs	r6, #0
 8001e44:	4c0c      	ldr	r4, [pc, #48]	@ (8001e78 <__libc_init_array+0x38>)
 8001e46:	4d0d      	ldr	r5, [pc, #52]	@ (8001e7c <__libc_init_array+0x3c>)
 8001e48:	1b64      	subs	r4, r4, r5
 8001e4a:	10a4      	asrs	r4, r4, #2
 8001e4c:	42a6      	cmp	r6, r4
 8001e4e:	d109      	bne.n	8001e64 <__libc_init_array+0x24>
 8001e50:	2600      	movs	r6, #0
 8001e52:	f000 f819 	bl	8001e88 <_init>
 8001e56:	4c0a      	ldr	r4, [pc, #40]	@ (8001e80 <__libc_init_array+0x40>)
 8001e58:	4d0a      	ldr	r5, [pc, #40]	@ (8001e84 <__libc_init_array+0x44>)
 8001e5a:	1b64      	subs	r4, r4, r5
 8001e5c:	10a4      	asrs	r4, r4, #2
 8001e5e:	42a6      	cmp	r6, r4
 8001e60:	d105      	bne.n	8001e6e <__libc_init_array+0x2e>
 8001e62:	bd70      	pop	{r4, r5, r6, pc}
 8001e64:	00b3      	lsls	r3, r6, #2
 8001e66:	58eb      	ldr	r3, [r5, r3]
 8001e68:	4798      	blx	r3
 8001e6a:	3601      	adds	r6, #1
 8001e6c:	e7ee      	b.n	8001e4c <__libc_init_array+0xc>
 8001e6e:	00b3      	lsls	r3, r6, #2
 8001e70:	58eb      	ldr	r3, [r5, r3]
 8001e72:	4798      	blx	r3
 8001e74:	3601      	adds	r6, #1
 8001e76:	e7f2      	b.n	8001e5e <__libc_init_array+0x1e>
 8001e78:	08001ebc 	.word	0x08001ebc
 8001e7c:	08001ebc 	.word	0x08001ebc
 8001e80:	08001ec0 	.word	0x08001ec0
 8001e84:	08001ebc 	.word	0x08001ebc

08001e88 <_init>:
 8001e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e8a:	46c0      	nop			@ (mov r8, r8)
 8001e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e8e:	bc08      	pop	{r3}
 8001e90:	469e      	mov	lr, r3
 8001e92:	4770      	bx	lr

08001e94 <_fini>:
 8001e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e96:	46c0      	nop			@ (mov r8, r8)
 8001e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e9a:	bc08      	pop	{r3}
 8001e9c:	469e      	mov	lr, r3
 8001e9e:	4770      	bx	lr
